
VL53L7CX_MyProject_2ToF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008acc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015970  08008c6c  08008c6c  00018c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e5dc  0801e5dc  000300ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801e5dc  0801e5dc  0002e5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e5e4  0801e5e4  000300ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e5e4  0801e5e4  0002e5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e5e8  0801e5e8  0002e5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0801e5ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d8c  200000ac  0801e698  000300ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e38  0801e698  00030e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121f8  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db3  00000000  00000000  000422d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00045088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00045f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e7e  00000000  00000000  00046d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d08  00000000  00000000  0005fbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bde  00000000  00000000  000738de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001064bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  0010650c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c54 	.word	0x08008c54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08008c54 	.word	0x08008c54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f003 fe3e 	bl	8004208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f80a 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8d0 	bl	8000734 <MX_GPIO_Init>
  MX_RTC_Init();
 8000594:	f000 f874 	bl	8000680 <MX_RTC_Init>
  MX_TOF_Init();
 8000598:	f006 feaa 	bl	80072f0 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 800059c:	f006 feae 	bl	80072fc <MX_TOF_Process>
 80005a0:	e7fc      	b.n	800059c <main+0x18>
	...

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f007 fae4 	bl	8007b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <SystemClock_Config+0xd4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a29      	ldr	r2, [pc, #164]	; (8000678 <SystemClock_Config+0xd4>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <SystemClock_Config+0xd4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <SystemClock_Config+0xd8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f0:	4a22      	ldr	r2, [pc, #136]	; (800067c <SystemClock_Config+0xd8>)
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <SystemClock_Config+0xd8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000604:	230a      	movs	r3, #10
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800061c:	2310      	movs	r3, #16
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000626:	2304      	movs	r3, #4
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062a:	2307      	movs	r3, #7
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	4618      	mov	r0, r3
 8000634:	f005 fa34 	bl	8005aa0 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800063e:	f000 f92d 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fc96 	bl	8005f90 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800066a:	f000 f917 	bl	800089c <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_RTC_Init+0xac>)
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_RTC_Init+0xb0>)
 800069c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_RTC_Init+0xac>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_RTC_Init+0xac>)
 80006a6:	227f      	movs	r2, #127	; 0x7f
 80006a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_RTC_Init+0xac>)
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_RTC_Init+0xac>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_RTC_Init+0xac>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_RTC_Init+0xac>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006c2:	481a      	ldr	r0, [pc, #104]	; (800072c <MX_RTC_Init+0xac>)
 80006c4:	f005 ff72 	bl	80065ac <HAL_RTC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f8e5 	bl	800089c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	480f      	ldr	r0, [pc, #60]	; (800072c <MX_RTC_Init+0xac>)
 80006ee:	f005 ffd3 	bl	8006698 <HAL_RTC_SetTime>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80006f8:	f000 f8d0 	bl	800089c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006fc:	2301      	movs	r3, #1
 80006fe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000700:	2301      	movs	r3, #1
 8000702:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000704:	2301      	movs	r3, #1
 8000706:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000708:	2300      	movs	r3, #0
 800070a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2201      	movs	r2, #1
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_RTC_Init+0xac>)
 8000714:	f006 f85a 	bl	80067cc <HAL_RTC_SetDate>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800071e:	f000 f8bd 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000c8 	.word	0x200000c8
 8000730:	40002800 	.word	0x40002800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b4f      	ldr	r3, [pc, #316]	; (800088c <MX_GPIO_Init+0x158>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a4e      	ldr	r2, [pc, #312]	; (800088c <MX_GPIO_Init+0x158>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b4c      	ldr	r3, [pc, #304]	; (800088c <MX_GPIO_Init+0x158>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_GPIO_Init+0x158>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a47      	ldr	r2, [pc, #284]	; (800088c <MX_GPIO_Init+0x158>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <MX_GPIO_Init+0x158>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <MX_GPIO_Init+0x158>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a40      	ldr	r2, [pc, #256]	; (800088c <MX_GPIO_Init+0x158>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <MX_GPIO_Init+0x158>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <MX_GPIO_Init+0x158>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a39      	ldr	r2, [pc, #228]	; (800088c <MX_GPIO_Init+0x158>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_GPIO_Init+0x158>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2101      	movs	r1, #1
 80007be:	4834      	ldr	r0, [pc, #208]	; (8000890 <MX_GPIO_Init+0x15c>)
 80007c0:	f004 f932 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2122      	movs	r1, #34	; 0x22
 80007c8:	4832      	ldr	r0, [pc, #200]	; (8000894 <MX_GPIO_Init+0x160>)
 80007ca:	f004 f92d 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2101      	movs	r1, #1
 80007d2:	4831      	ldr	r0, [pc, #196]	; (8000898 <MX_GPIO_Init+0x164>)
 80007d4:	f004 f928 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4828      	ldr	r0, [pc, #160]	; (8000890 <MX_GPIO_Init+0x15c>)
 80007f0:	f003 feb2 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4821      	ldr	r0, [pc, #132]	; (8000890 <MX_GPIO_Init+0x15c>)
 800080c:	f003 fea4 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000810:	2322      	movs	r3, #34	; 0x22
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	481b      	ldr	r0, [pc, #108]	; (8000894 <MX_GPIO_Init+0x160>)
 8000828:	f003 fe96 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800082c:	2310      	movs	r3, #16
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000830:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4814      	ldr	r0, [pc, #80]	; (8000894 <MX_GPIO_Init+0x160>)
 8000842:	f003 fe89 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <MX_GPIO_Init+0x164>)
 800085e:	f003 fe7b 	bl	8004558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	200a      	movs	r0, #10
 8000868:	f003 fe3f 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800086c:	200a      	movs	r0, #10
 800086e:	f003 fe58 	bl	8004522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f003 fe37 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087c:	2028      	movs	r0, #40	; 0x28
 800087e:	f003 fe50 	bl	8004522 <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800
 8000894:	40020000 	.word	0x40020000
 8000898:	40020400 	.word	0x40020400

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e6:	2007      	movs	r0, #7
 80008e8:	f003 fdf4 	bl	80044d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a4a      	ldr	r2, [pc, #296]	; (8000a40 <HAL_I2C_MspInit+0x148>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d13d      	bne.n	8000996 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093c:	2312      	movs	r3, #18
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000948:	2304      	movs	r3, #4
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	483d      	ldr	r0, [pc, #244]	; (8000a48 <HAL_I2C_MspInit+0x150>)
 8000954:	f003 fe00 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000958:	2308      	movs	r3, #8
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000968:	2309      	movs	r3, #9
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4835      	ldr	r0, [pc, #212]	; (8000a48 <HAL_I2C_MspInit+0x150>)
 8000974:	f003 fdf0 	bl	8004558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a30      	ldr	r2, [pc, #192]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 8000982:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
 8000988:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000994:	e04f      	b.n	8000a36 <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C3)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2c      	ldr	r2, [pc, #176]	; (8000a4c <HAL_I2C_MspInit+0x154>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d14a      	bne.n	8000a36 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	6313      	str	r3, [r2, #48]	; 0x30
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009de:	2312      	movs	r3, #18
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009ea:	2304      	movs	r3, #4
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4816      	ldr	r0, [pc, #88]	; (8000a50 <HAL_I2C_MspInit+0x158>)
 80009f6:	f003 fdaf 	bl	8004558 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009fa:	2310      	movs	r3, #16
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fe:	2312      	movs	r3, #18
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000a0a:	2309      	movs	r3, #9
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <HAL_I2C_MspInit+0x150>)
 8000a16:	f003 fd9f 	bl	8004558 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 8000a24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_I2C_MspInit+0x14c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40005800 	.word	0x40005800
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40005c00 	.word	0x40005c00
 8000a50:	40020000 	.word	0x40020000

08000a54 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <HAL_I2C_MspDeInit+0x64>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10f      	bne.n	8000a86 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_I2C_MspDeInit+0x68>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <HAL_I2C_MspDeInit+0x68>)
 8000a6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <HAL_I2C_MspDeInit+0x6c>)
 8000a78:	f003 fef2 	bl	8004860 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <HAL_I2C_MspDeInit+0x6c>)
 8000a80:	f003 feee 	bl	8004860 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8000a84:	e013      	b.n	8000aae <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_I2C_MspDeInit+0x70>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d10e      	bne.n	8000aae <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_I2C_MspDeInit+0x68>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a09      	ldr	r2, [pc, #36]	; (8000abc <HAL_I2C_MspDeInit+0x68>)
 8000a96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <HAL_I2C_MspDeInit+0x74>)
 8000aa2:	f003 fedd 	bl	8004860 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_I2C_MspDeInit+0x6c>)
 8000aaa:	f003 fed9 	bl	8004860 <HAL_GPIO_DeInit>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40005c00 	.word	0x40005c00
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <HAL_RTC_MspInit+0x50>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d111      	bne.n	8000b12 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000aee:	2302      	movs	r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 fc67 	bl	80063d0 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b08:	f7ff fec8 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <HAL_RTC_MspInit+0x54>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40002800 	.word	0x40002800
 8000b20:	42470e3c 	.word	0x42470e3c

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f003 fb9c 	bl	80042ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_0_Pin);
 8000b7c:	2010      	movs	r0, #16
 8000b7e:	f003 ff6d 	bl	8004a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b8e:	f003 ff65 	bl	8004a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <BSP_I2C1_Init+0x58>)
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <BSP_I2C1_Init+0x5c>)
 8000ba6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <BSP_I2C1_Init+0x60>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	4912      	ldr	r1, [pc, #72]	; (8000bf8 <BSP_I2C1_Init+0x60>)
 8000bb0:	600a      	str	r2, [r1, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d117      	bne.n	8000be6 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <BSP_I2C1_Init+0x58>)
 8000bb8:	f004 fbfc 	bl	80053b4 <HAL_I2C_GetState>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d111      	bne.n	8000be6 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <BSP_I2C1_Init+0x58>)
 8000bc4:	f000 f8e2 	bl	8000d8c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10b      	bne.n	8000be6 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000bce:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <BSP_I2C1_Init+0x58>)
 8000bd0:	f000 f8a8 	bl	8000d24 <MX_I2C1_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000bda:	f06f 0307 	mvn.w	r3, #7
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	e001      	b.n	8000be6 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000be6:	687b      	ldr	r3, [r7, #4]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000e8 	.word	0x200000e8
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	2000013c 	.word	0x2000013c

08000bfc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <BSP_I2C1_DeInit+0x48>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d014      	beq.n	8000c38 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <BSP_I2C1_DeInit+0x48>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <BSP_I2C1_DeInit+0x48>)
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <BSP_I2C1_DeInit+0x48>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10b      	bne.n	8000c38 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <BSP_I2C1_DeInit+0x4c>)
 8000c22:	f000 f8fd 	bl	8000e20 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000c26:	4808      	ldr	r0, [pc, #32]	; (8000c48 <BSP_I2C1_DeInit+0x4c>)
 8000c28:	f004 f874 	bl	8004d14 <HAL_I2C_DeInit>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000c32:	f06f 0307 	mvn.w	r3, #7
 8000c36:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000013c 	.word	0x2000013c
 8000c48:	200000e8 	.word	0x200000e8

08000c4c <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4603      	mov	r3, r0
 8000c58:	81fb      	strh	r3, [r7, #14]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	81bb      	strh	r3, [r7, #12]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c66:	89ba      	ldrh	r2, [r7, #12]
 8000c68:	89f9      	ldrh	r1, [r7, #14]
 8000c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2310      	movs	r3, #16
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <BSP_I2C1_WriteReg16+0x60>)
 8000c7c:	f004 f87a 	bl	8004d74 <HAL_I2C_Mem_Write>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00c      	beq.n	8000ca0 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <BSP_I2C1_WriteReg16+0x60>)
 8000c88:	f004 fba2 	bl	80053d0 <HAL_I2C_GetError>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d103      	bne.n	8000c9a <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c92:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e002      	b.n	8000ca0 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c9a:	f06f 0303 	mvn.w	r3, #3
 8000c9e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000ca0:	697b      	ldr	r3, [r7, #20]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000e8 	.word	0x200000e8

08000cb0 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af04      	add	r7, sp, #16
 8000cb6:	60ba      	str	r2, [r7, #8]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4603      	mov	r3, r0
 8000cbc:	81fb      	strh	r3, [r7, #14]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	81bb      	strh	r3, [r7, #12]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000cca:	89ba      	ldrh	r2, [r7, #12]
 8000ccc:	89f9      	ldrh	r1, [r7, #14]
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2310      	movs	r3, #16
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <BSP_I2C1_ReadReg16+0x60>)
 8000ce0:	f004 f942 	bl	8004f68 <HAL_I2C_Mem_Read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00c      	beq.n	8000d04 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <BSP_I2C1_ReadReg16+0x60>)
 8000cec:	f004 fb70 	bl	80053d0 <HAL_I2C_GetError>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d003      	beq.n	8000cfe <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000cf6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e002      	b.n	8000d04 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000cfe:	f06f 0303 	mvn.w	r3, #3
 8000d02:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d04:	697b      	ldr	r3, [r7, #20]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000e8 	.word	0x200000e8

08000d14 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d18:	f003 fadc 	bl	80042d4 <HAL_GetTick>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <MX_I2C1_Init+0x60>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <MX_I2C1_Init+0x64>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f003 fe8f 	bl	8004a8c <HAL_I2C_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40005400 	.word	0x40005400
 8000d88:	00061a80 	.word	0x00061a80

08000d8c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <I2C1_MspInit+0x8c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <I2C1_MspInit+0x8c>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	6313      	str	r3, [r2, #48]	; 0x30
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <I2C1_MspInit+0x8c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db6:	2312      	movs	r3, #18
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <I2C1_MspInit+0x90>)
 8000dce:	f003 fbc3 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd8:	2312      	movs	r3, #18
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000de4:	2304      	movs	r3, #4
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <I2C1_MspInit+0x90>)
 8000df0:	f003 fbb2 	bl	8004558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <I2C1_MspInit+0x8c>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <I2C1_MspInit+0x8c>)
 8000dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <I2C1_MspInit+0x8c>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000e10:	bf00      	nop
 8000e12:	3728      	adds	r7, #40	; 0x28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400

08000e20 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <I2C1_MspDeInit+0x30>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <I2C1_MspDeInit+0x30>)
 8000e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <I2C1_MspDeInit+0x34>)
 8000e3a:	f003 fd11 	bl	8004860 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <I2C1_MspDeInit+0x34>)
 8000e44:	f003 fd0c 	bl	8004860 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020400 	.word	0x40020400

08000e58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e00a      	b.n	8000e80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	4601      	mov	r1, r0
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	b2ca      	uxtb	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf0      	blt.n	8000e6a <_read+0x12>
	}

return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e009      	b.n	8000eb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 f947 	bl	8004140 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf1      	blt.n	8000ea4 <_write+0x12>
	}
	return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_isatty>:

int _isatty(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return 1;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f006 fdd4 	bl	8007b10 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20018000 	.word	0x20018000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	20000140 	.word	0x20000140
 8000f9c:	20000e38 	.word	0x20000e38

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fee:	f7ff ffd7 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f006 fd93 	bl	8007b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fac5 	bl	8000584 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001008:	0801e5ec 	.word	0x0801e5ec
  ldr r2, =_sbss
 800100c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001010:	20000e38 	.word	0x20000e38

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>

08001016 <_vl53l7cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	4608      	mov	r0, r1
 8001020:	4611      	mov	r1, r2
 8001022:	461a      	mov	r2, r3
 8001024:	4603      	mov	r3, r0
 8001026:	70fb      	strb	r3, [r7, #3]
 8001028:	460b      	mov	r3, r1
 800102a:	70bb      	strb	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8001038:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	8839      	ldrh	r1, [r7, #0]
 8001044:	f002 fa02 	bl	800344c <RdMulti>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	4313      	orrs	r3, r2
 8001050:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	210a      	movs	r1, #10
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fa45 	bl	80034e6 <WaitMs>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	4313      	orrs	r3, r2
 8001064:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	2bc7      	cmp	r3, #199	; 0xc7
 800106a:	d904      	bls.n	8001076 <_vl53l7cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L7CX_STATUS_TIMEOUT_ERROR;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
			break;
 8001074:	e01a      	b.n	80010ac <_vl53l7cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d909      	bls.n	8001090 <_vl53l7cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8001082:	2b7e      	cmp	r3, #126	; 0x7e
 8001084:	d904      	bls.n	8001090 <_vl53l7cx_poll_for_answer+0x7a>
		{
			status |= VL53L7CX_MCU_ERROR;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800108c:	73fb      	strb	r3, [r7, #15]
			break;
 800108e:	e00d      	b.n	80010ac <_vl53l7cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	3301      	adds	r3, #1
 8001094:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8001096:	78bb      	ldrb	r3, [r7, #2]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80010a0:	7e3b      	ldrb	r3, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	7f3a      	ldrb	r2, [r7, #28]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d1c5      	bne.n	8001038 <_vl53l7cx_poll_for_answer+0x22>

	return status;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_vl53l7cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l7cx_poll_for_mcu_boot(
              VL53L7CX_Configuration      *p_dev)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L7CX_STATUS_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f107 020b 	add.w	r2, r7, #11
 80010cc:	2106      	movs	r1, #6
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 f97a 	bl	80033c8 <RdByte>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	4313      	orrs	r3, r2
 80010dc:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	da10      	bge.n	8001108 <_vl53l7cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f107 020a 	add.w	r2, r7, #10
 80010ec:	2107      	movs	r1, #7
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 f96a 	bl	80033c8 <RdByte>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 80010fe:	7aba      	ldrb	r2, [r7, #10]
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	4313      	orrs	r3, r2
 8001104:	73fb      	strb	r3, [r7, #15]
			break;
 8001106:	e012      	b.n	800112e <_vl53l7cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2101      	movs	r1, #1
 800110c:	4618      	mov	r0, r3
 800110e:	f002 f9ea 	bl	80034e6 <WaitMs>
		timeout++;
 8001112:	89bb      	ldrh	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8001118:	7afb      	ldrb	r3, [r7, #11]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d104      	bne.n	800112c <_vl53l7cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8001122:	89bb      	ldrh	r3, [r7, #12]
 8001124:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001128:	d3cd      	bcc.n	80010c6 <_vl53l7cx_poll_for_mcu_boot+0x10>
 800112a:	e000      	b.n	800112e <_vl53l7cx_poll_for_mcu_boot+0x78>
			break;
 800112c:	bf00      	nop

   return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_vl53l7cx_send_offset_data>:
 */

static uint8_t _vl53l7cx_send_offset_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ea      	sub	sp, #424	; 0x1a8
 800113c:	af02      	add	r7, sp, #8
 800113e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001142:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001146:	6018      	str	r0, [r3, #0]
 8001148:	460a      	mov	r2, r1
 800114a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800114e:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8001152:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800115a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800115e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001162:	4ad9      	ldr	r2, [pc, #868]	; (80014c8 <_vl53l7cx_send_offset_data+0x390>)
 8001164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001168:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 800116c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001170:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001174:	4ad5      	ldr	r2, [pc, #852]	; (80014cc <_vl53l7cx_send_offset_data+0x394>)
 8001176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117a:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800117e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001182:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L7CX_OFFSET_BUFFER_SIZE);
 800118c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001190:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8001198:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800119c:	4619      	mov	r1, r3
 800119e:	f006 fce1 	bl	8007b64 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4){
 80011a2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011a6:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b10      	cmp	r3, #16
 80011ae:	f040 8122 	bne.w	80013f6 <_vl53l7cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80011b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 80011c0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011c8:	cb03      	ldmia	r3!, {r0, r1}
 80011ca:	6010      	str	r0, [r2, #0]
 80011cc:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 80011ce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011d2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80011dc:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 f94a 	bl	800347a <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80011e6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011ea:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 80011f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 fcb1 	bl	8007b64 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8001202:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001206:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 8001210:	f107 0318 	add.w	r3, r7, #24
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	4618      	mov	r0, r3
 8001218:	f006 fca4 	bl	8007b64 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 800121c:	2300      	movs	r3, #0
 800121e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8001222:	e0ac      	b.n	800137e <_vl53l7cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001224:	2300      	movs	r3, #0
 8001226:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800122a:	e09c      	b.n	8001366 <_vl53l7cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 800122c:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001230:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	005a      	lsls	r2, r3, #1
 800123a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800123e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8001246:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800124a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	1c59      	adds	r1, r3, #1
 8001256:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800125a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800125e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001262:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8001264:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001268:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	3304      	adds	r3, #4
 8001272:	0059      	lsls	r1, r3, #1
 8001274:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800127c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001280:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8001282:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001286:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	f103 0109 	add.w	r1, r3, #9
 8001294:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800129c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012a0:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80012a2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80012a6:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80012ae:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80012b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80012b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80012bc:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80012c0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	005a      	lsls	r2, r3, #1
 80012ca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012ce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80012d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80012d6:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80012d8:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80012dc:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80012f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80012f4:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 80012f6:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80012fa:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80012fe:	00d2      	lsls	r2, r2, #3
 8001300:	440a      	add	r2, r1
 8001302:	3204      	adds	r2, #4
 8001304:	0051      	lsls	r1, r2, #1
 8001306:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800130a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800130e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001312:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001314:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001318:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800131c:	00d2      	lsls	r2, r2, #3
 800131e:	440a      	add	r2, r1
 8001320:	0052      	lsls	r2, r2, #1
 8001322:	f102 0109 	add.w	r1, r2, #9
 8001326:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800132a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800132e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001332:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001334:	2b00      	cmp	r3, #0
 8001336:	da00      	bge.n	800133a <_vl53l7cx_send_offset_data+0x202>
 8001338:	3303      	adds	r3, #3
 800133a:	109b      	asrs	r3, r3, #2
 800133c:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800133e:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001342:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	441a      	add	r2, r3
 800134a:	b209      	sxth	r1, r1
 800134c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001350:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001354:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8001358:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3301      	adds	r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001366:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800136a:	2b03      	cmp	r3, #3
 800136c:	f77f af5e 	ble.w	800122c <_vl53l7cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8001370:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3301      	adds	r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800137e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001382:	2b03      	cmp	r3, #3
 8001384:	f77f af4e 	ble.w	8001224 <_vl53l7cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	3320      	adds	r3, #32
 800138e:	2260      	movs	r2, #96	; 0x60
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fbf4 	bl	8007b80 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8001398:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800139c:	3340      	adds	r3, #64	; 0x40
 800139e:	22c0      	movs	r2, #192	; 0xc0
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fbec 	bl	8007b80 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80013a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80013ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80013b6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80013ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013be:	4618      	mov	r0, r3
 80013c0:	f006 fbd0 	bl	8007b64 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80013c4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80013c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80013d2:	f107 0118 	add.w	r1, r7, #24
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 fbc3 	bl	8007b64 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 80013de:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80013e2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80013ec:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 f842 	bl	800347a <SwapBuffer>
	}

	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 80013fc:	e01b      	b.n	8001436 <_vl53l7cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80013fe:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001402:	f103 0208 	add.w	r2, r3, #8
 8001406:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800140a:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800140e:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 8001412:	6809      	ldr	r1, [r1, #0]
 8001414:	440a      	add	r2, r1
 8001416:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 800141a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800141e:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	4413      	add	r3, r2
 8001426:	460a      	mov	r2, r1
 8001428:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800142c:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001430:	3301      	adds	r3, #1
 8001432:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001436:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800143a:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 800143e:	d3de      	bcc.n	80013fe <_vl53l7cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8001440:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001444:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 800144e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001452:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001456:	cb03      	ldmia	r3!, {r0, r1}
 8001458:	6010      	str	r0, [r2, #0]
 800145a:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 800145c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001460:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800146a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8001474:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8001478:	f642 6118 	movw	r1, #11800	; 0x2e18
 800147c:	f001 ffcf 	bl	800341e <WrMulti>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8001488:	4313      	orrs	r3, r2
 800148a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 800148e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001492:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8001496:	2303      	movs	r3, #3
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	23ff      	movs	r3, #255	; 0xff
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80014a2:	2201      	movs	r2, #1
 80014a4:	2104      	movs	r1, #4
 80014a6:	6800      	ldr	r0, [r0, #0]
 80014a8:	f7ff fdb5 	bl	8001016 <_vl53l7cx_poll_for_answer>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80014b4:	4313      	orrs	r3, r2
 80014b6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80014ba:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 80014be:	4618      	mov	r0, r3
 80014c0:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	08008c6c 	.word	0x08008c6c
 80014cc:	08008c74 	.word	0x08008c74

080014d0 <_vl53l7cx_send_xtalk_data>:
 */

static uint8_t _vl53l7cx_send_xtalk_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ca      	sub	sp, #296	; 0x128
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014de:	6018      	str	r0, [r3, #0]
 80014e0:	460a      	mov	r2, r1
 80014e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014e6:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80014ea:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80014f2:	4a9a      	ldr	r2, [pc, #616]	; (800175c <_vl53l7cx_send_xtalk_data+0x28c>)
 80014f4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80014f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014fc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8001500:	4a97      	ldr	r2, [pc, #604]	; (8001760 <_vl53l7cx_send_xtalk_data+0x290>)
 8001502:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800150a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800150e:	4b95      	ldr	r3, [pc, #596]	; (8001764 <_vl53l7cx_send_xtalk_data+0x294>)
 8001510:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001514:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001518:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 8001522:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001526:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001530:	f44f 7242 	mov.w	r2, #776	; 0x308
 8001534:	4619      	mov	r1, r3
 8001536:	f006 fb15 	bl	8007b64 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4)
 800153a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800153e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b10      	cmp	r3, #16
 8001546:	f040 80d2 	bne.w	80016ee <_vl53l7cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800154a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800154e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8001558:	461a      	mov	r2, r3
 800155a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800155e:	cb03      	ldmia	r3!, {r0, r1}
 8001560:	6010      	str	r0, [r2, #0]
 8001562:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8001564:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001568:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8001572:	461a      	mov	r2, r3
 8001574:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001578:	cb03      	ldmia	r3!, {r0, r1}
 800157a:	6010      	str	r0, [r2, #0]
 800157c:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 800157e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001582:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800158c:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001590:	4618      	mov	r0, r3
 8001592:	f001 ff72 	bl	800347a <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8001596:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800159a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f203 5144 	addw	r1, r3, #1348	; 0x544
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ac:	4618      	mov	r0, r3
 80015ae:	f006 fad9 	bl	8007b64 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80015b8:	e05d      	b.n	8001676 <_vl53l7cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80015c0:	e04e      	b.n	8001660 <_vl53l7cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80015c2:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 80015c6:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	005a      	lsls	r2, r3, #1
 80015d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80015dc:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80015e0:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	1c59      	adds	r1, r3, #1
 80015ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015f8:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80015fa:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80015fe:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	3304      	adds	r3, #4
 8001608:	0059      	lsls	r1, r3, #1
 800160a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800160e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001616:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001618:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800161c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	f103 0109 	add.w	r1, r3, #9
 800162a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800162e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001632:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001636:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001638:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800163c:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001644:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001646:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800164a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800164e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8001652:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8001660:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001664:	2b03      	cmp	r3, #3
 8001666:	ddac      	ble.n	80015c2 <_vl53l7cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8001668:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800166c:	b2db      	uxtb	r3, r3
 800166e:	3301      	adds	r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001676:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800167a:	2b03      	cmp	r3, #3
 800167c:	dd9d      	ble.n	80015ba <_vl53l7cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	3340      	adds	r3, #64	; 0x40
 8001684:	22c0      	movs	r2, #192	; 0xc0
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fa79 	bl	8007b80 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800168e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001692:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f203 5344 	addw	r3, r3, #1348	; 0x544
 800169c:	f107 0108 	add.w	r1, r7, #8
 80016a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a4:	4618      	mov	r0, r3
 80016a6:	f006 fa5d 	bl	8007b64 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 80016aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80016b8:	f44f 7142 	mov.w	r1, #776	; 0x308
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fedc 	bl	800347a <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80016c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f203 6344 	addw	r3, r3, #1604	; 0x644
 80016d0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80016d4:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 80016d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80016e4:	2204      	movs	r2, #4
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f006 fa49 	bl	8007b80 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80016ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016f6:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 80016f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001706:	f44f 7342 	mov.w	r3, #776	; 0x308
 800170a:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 800170e:	f001 fe86 	bl	800341e <WrMulti>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800171a:	4313      	orrs	r3, r2
 800171c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8001720:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001724:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001728:	2303      	movs	r3, #3
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	23ff      	movs	r3, #255	; 0xff
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001734:	2201      	movs	r2, #1
 8001736:	2104      	movs	r1, #4
 8001738:	6800      	ldr	r0, [r0, #0]
 800173a:	f7ff fc6c 	bl	8001016 <_vl53l7cx_poll_for_answer>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001746:	4313      	orrs	r3, r2
 8001748:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800174c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8001750:	4618      	mov	r0, r3
 8001752:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	08008c7c 	.word	0x08008c7c
 8001760:	08008c84 	.word	0x08008c84
 8001764:	0001fca0 	.word	0x0001fca0

08001768 <vl53l7cx_init>:
	return status;
}

uint8_t vl53l7cx_init(
		VL53L7CX_Configuration		*p_dev)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af02      	add	r7, sp, #8
 800176e:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L7CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8001774:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001778:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 800177a:	2301      	movs	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L7CX_DEFAULT_XTALK;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a7e      	ldr	r2, [pc, #504]	; (800197c <vl53l7cx_init+0x214>)
 8001782:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L7CX_DEFAULT_CONFIGURATION;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a7e      	ldr	r2, [pc, #504]	; (8001980 <vl53l7cx_init+0x218>)
 8001788:	619a      	str	r2, [r3, #24]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fe2d 	bl	80033f2 <WrByte>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	4313      	orrs	r3, r2
 80017a0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2204      	movs	r2, #4
 80017a6:	2109      	movs	r1, #9
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fe22 	bl	80033f2 <WrByte>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	210f      	movs	r1, #15
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fe17 	bl	80033f2 <WrByte>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	210a      	movs	r1, #10
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 fe0c 	bl	80033f2 <WrByte>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f107 0216 	add.w	r2, r7, #22
 80017ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fdea 	bl	80033c8 <RdByte>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	210c      	movs	r1, #12
 8001804:	4618      	mov	r0, r3
 8001806:	f001 fdf4 	bl	80033f2 <WrByte>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	4313      	orrs	r3, r2
 8001812:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f240 1101 	movw	r1, #257	; 0x101
 800181c:	4618      	mov	r0, r3
 800181e:	f001 fde8 	bl	80033f2 <WrByte>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	4313      	orrs	r3, r2
 800182a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001834:	4618      	mov	r0, r3
 8001836:	f001 fddc 	bl	80033f2 <WrByte>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	4313      	orrs	r3, r2
 8001842:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800184c:	4618      	mov	r0, r3
 800184e:	f001 fdd0 	bl	80033f2 <WrByte>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	4313      	orrs	r3, r2
 800185a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f244 0102 	movw	r1, #16386	; 0x4002
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fdc4 	bl	80033f2 <WrByte>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	7dfb      	ldrb	r3, [r7, #23]
 8001870:	4313      	orrs	r3, r2
 8001872:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f244 0102 	movw	r1, #16386	; 0x4002
 800187c:	4618      	mov	r0, r3
 800187e:	f001 fdb8 	bl	80033f2 <WrByte>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	4313      	orrs	r3, r2
 800188a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fdac 	bl	80033f2 <WrByte>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f240 1103 	movw	r1, #259	; 0x103
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 fda0 	bl	80033f2 <WrByte>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	210c      	movs	r1, #12
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fd95 	bl	80033f2 <WrByte>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2243      	movs	r2, #67	; 0x43
 80018d6:	210f      	movs	r1, #15
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 fd8a 	bl	80033f2 <WrByte>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2101      	movs	r1, #1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fdfa 	bl	80034e6 <WaitMs>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	210f      	movs	r1, #15
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fd75 	bl	80033f2 <WrByte>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	4313      	orrs	r3, r2
 8001910:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	210a      	movs	r1, #10
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fd6a 	bl	80033f2 <WrByte>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	4313      	orrs	r3, r2
 8001926:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2164      	movs	r1, #100	; 0x64
 800192c:	4618      	mov	r0, r3
 800192e:	f001 fdda 	bl	80034e6 <WaitMs>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	4313      	orrs	r3, r2
 800193a:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fd54 	bl	80033f2 <WrByte>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	4313      	orrs	r3, r2
 8001952:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001954:	2301      	movs	r3, #1
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	23ff      	movs	r3, #255	; 0xff
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2306      	movs	r3, #6
 800195e:	2200      	movs	r2, #0
 8001960:	2101      	movs	r1, #1
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fb57 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	4313      	orrs	r3, r2
 8001970:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 831c 	bne.w	8001fb2 <vl53l7cx_init+0x84a>
 800197a:	e003      	b.n	8001984 <vl53l7cx_init+0x21c>
 800197c:	0801e214 	.word	0x0801e214
 8001980:	0801de48 	.word	0x0801de48
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	210e      	movs	r1, #14
 800198a:	4618      	mov	r0, r3
 800198c:	f001 fd31 	bl	80033f2 <WrByte>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	4313      	orrs	r3, r2
 8001998:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 fd25 	bl	80033f2 <WrByte>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	220d      	movs	r2, #13
 80019b6:	2103      	movs	r1, #3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fd1a 	bl	80033f2 <WrByte>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 fd0e 	bl	80033f2 <WrByte>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	4313      	orrs	r3, r2
 80019de:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80019e0:	2310      	movs	r3, #16
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2310      	movs	r3, #16
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2321      	movs	r3, #33	; 0x21
 80019ea:	2200      	movs	r2, #0
 80019ec:	2101      	movs	r1, #1
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fb11 	bl	8001016 <_vl53l7cx_poll_for_answer>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fcf3 	bl	80033f2 <WrByte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f107 0216 	add.w	r2, r7, #22
 8001a1c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fcd1 	bl	80033c8 <RdByte>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	210c      	movs	r1, #12
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fcdb 	bl	80033f2 <WrByte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 fccf 	bl	80033f2 <WrByte>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f240 1101 	movw	r1, #257	; 0x101
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fcc3 	bl	80033f2 <WrByte>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fcb7 	bl	80033f2 <WrByte>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 fcab 	bl	80033f2 <WrByte>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f244 0102 	movw	r1, #16386	; 0x4002
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fc9f 	bl	80033f2 <WrByte>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f244 0102 	movw	r1, #16386	; 0x4002
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fc93 	bl	80033f2 <WrByte>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 fc87 	bl	80033f2 <WrByte>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f240 1103 	movw	r1, #259	; 0x103
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 fc7b 	bl	80033f2 <WrByte>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f244 010f 	movw	r1, #16399	; 0x400f
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 fc6f 	bl	80033f2 <WrByte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2243      	movs	r2, #67	; 0x43
 8001b22:	f240 211a 	movw	r1, #538	; 0x21a
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 fc63 	bl	80033f2 <WrByte>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f240 211a 	movw	r1, #538	; 0x21a
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 fc57 	bl	80033f2 <WrByte>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f240 211a 	movw	r1, #538	; 0x21a
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fc4b 	bl	80033f2 <WrByte>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f240 211a 	movw	r1, #538	; 0x21a
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 fc3f 	bl	80033f2 <WrByte>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f240 2119 	movw	r1, #537	; 0x219
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 fc33 	bl	80033f2 <WrByte>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f240 211b 	movw	r1, #539	; 0x21b
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fc27 	bl	80033f2 <WrByte>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fc1b 	bl	80033f2 <WrByte>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f107 0216 	add.w	r2, r7, #22
 8001bcc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fbf9 	bl	80033c8 <RdByte>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	210c      	movs	r1, #12
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 fc03 	bl	80033f2 <WrByte>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fbf7 	bl	80033f2 <WrByte>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2207      	movs	r2, #7
 8001c12:	2120      	movs	r1, #32
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 fbec 	bl	80033f2 <WrByte>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2206      	movs	r2, #6
 8001c28:	2120      	movs	r1, #32
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fbe1 	bl	80033f2 <WrByte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L7CX */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2209      	movs	r2, #9
 8001c3e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fbd5 	bl	80033f2 <WrByte>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c58:	4adb      	ldr	r2, [pc, #876]	; (8001fc8 <vl53l7cx_init+0x860>)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f001 fbdf 	bl	800341e <WrMulti>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	220a      	movs	r2, #10
 8001c6e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fbbd 	bl	80033f2 <WrByte>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c88:	4ad0      	ldr	r2, [pc, #832]	; (8001fcc <vl53l7cx_init+0x864>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	f001 fbc7 	bl	800341e <WrMulti>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	220b      	movs	r2, #11
 8001c9e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 fba5 	bl	80033f2 <WrByte>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001cb8:	4ac5      	ldr	r2, [pc, #788]	; (8001fd0 <vl53l7cx_init+0x868>)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	f001 fbaf 	bl	800341e <WrMulti>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fb8d 	bl	80033f2 <WrByte>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fb81 	bl	80033f2 <WrByte>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	220d      	movs	r2, #13
 8001cfe:	2103      	movs	r1, #3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 fb76 	bl	80033f2 <WrByte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fb6a 	bl	80033f2 <WrByte>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001d28:	2310      	movs	r3, #16
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2321      	movs	r3, #33	; 0x21
 8001d32:	2200      	movs	r2, #0
 8001d34:	2101      	movs	r1, #1
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff f96d 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 8134 	bne.w	8001fb6 <vl53l7cx_init+0x84e>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 fb4b 	bl	80033f2 <WrByte>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f107 0216 	add.w	r2, r7, #22
 8001d6c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fb29 	bl	80033c8 <RdByte>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	210c      	movs	r1, #12
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fb33 	bl	80033f2 <WrByte>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fb27 	bl	80033f2 <WrByte>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fb1b 	bl	80033f2 <WrByte>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f240 1115 	movw	r1, #277	; 0x115
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fb0f 	bl	80033f2 <WrByte>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2242      	movs	r2, #66	; 0x42
 8001de2:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 fb03 	bl	80033f2 <WrByte>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f240 1117 	movw	r1, #279	; 0x117
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 faf7 	bl	80033f2 <WrByte>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	210b      	movs	r1, #11
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 faec 	bl	80033f2 <WrByte>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f107 0216 	add.w	r2, r7, #22
 8001e2a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 faca 	bl	80033c8 <RdByte>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	210c      	movs	r1, #12
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fad4 	bl	80033f2 <WrByte>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	210b      	movs	r1, #11
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 fac9 	bl	80033f2 <WrByte>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_mcu_boot(p_dev);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff f923 	bl	80010b6 <_vl53l7cx_poll_for_mcu_boot>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 809c 	bne.w	8001fba <vl53l7cx_init+0x852>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 fab1 	bl	80033f2 <WrByte>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	2328      	movs	r3, #40	; 0x28
 8001e9e:	4a4d      	ldr	r2, [pc, #308]	; (8001fd4 <vl53l7cx_init+0x86c>)
 8001ea0:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8001ea4:	f001 fabb 	bl	800341e <WrMulti>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L7CX_GET_NVM_CMD, sizeof(VL53L7CX_GET_NVM_CMD));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 0,
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	23ff      	movs	r3, #255	; 0xff
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff f8a7 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8001ed2:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L7CX_NVM_DATA_SIZE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8001eda:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001ede:	f642 4104 	movw	r1, #11268	; 0x2c04
 8001ee2:	f001 fab3 	bl	800344c <RdMulti>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f103 0020 	add.w	r0, r3, #32
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001efc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001f00:	4619      	mov	r1, r3
 8001f02:	f005 fe2f 	bl	8007b64 <memcpy>
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l7cx_send_offset_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 8001f06:	2110      	movs	r1, #16
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff f915 	bl	8001138 <_vl53l7cx_send_offset_data>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L7CX_DEFAULT_XTALK,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f1e:	4a2e      	ldr	r2, [pc, #184]	; (8001fd8 <vl53l7cx_init+0x870>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	4611      	mov	r1, r2
 8001f24:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f005 fe1b 	bl	8007b64 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);
	status |= _vl53l7cx_send_xtalk_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 8001f2e:	2110      	movs	r1, #16
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff facd 	bl	80014d0 <_vl53l7cx_send_xtalk_data>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L7CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8001f4a:	f642 4134 	movw	r1, #11316	; 0x2c34
 8001f4e:	f001 fa66 	bl	800341e <WrMulti>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L7CX_DEFAULT_CONFIGURATION));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	23ff      	movs	r3, #255	; 0xff
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001f68:	2201      	movs	r2, #1
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff f852 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8001f7c:	f107 0110 	add.w	r1, r7, #16
 8001f80:	2304      	movs	r3, #4
 8001f82:	f64c 7278 	movw	r2, #53112	; 0xcf78
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 ffb6 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	75fb      	strb	r3, [r7, #23]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L7CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8001f96:	f107 010c 	add.w	r1, r7, #12
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 ffa9 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	75fb      	strb	r3, [r7, #23]
 8001fb0:	e004      	b.n	8001fbc <vl53l7cx_init+0x854>
		goto exit;
 8001fb2:	bf00      	nop
 8001fb4:	e002      	b.n	8001fbc <vl53l7cx_init+0x854>
		goto exit;
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <vl53l7cx_init+0x854>
		goto exit;
 8001fba:	bf00      	nop
			VL53L7CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));
exit:
	return status;
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08008e48 	.word	0x08008e48
 8001fcc:	08010e48 	.word	0x08010e48
 8001fd0:	08018e48 	.word	0x08018e48
 8001fd4:	0801e51c 	.word	0x0801e51c
 8001fd8:	0801e214 	.word	0x0801e214

08001fdc <vl53l7cx_set_i2c_address>:

uint8_t vl53l7cx_set_i2c_address(
		VL53L7CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 f9fc 	bl	80033f2 <WrByte>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	4313      	orrs	r3, r2
 8002002:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	b29b      	uxth	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	2104      	movs	r1, #4
 8002012:	f001 f9ee 	bl	80033f2 <WrByte>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	4313      	orrs	r3, r2
 800201e:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800202e:	4618      	mov	r0, r3
 8002030:	f001 f9df 	bl	80033f2 <WrByte>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	4313      	orrs	r3, r2
 800203c:	73fb      	strb	r3, [r7, #15]

	return status;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <vl53l7cx_get_power_mode>:

uint8_t vl53l7cx_get_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800205e:	4618      	mov	r0, r3
 8002060:	f001 f9c7 	bl	80033f2 <WrByte>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	4313      	orrs	r3, r2
 800206c:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f107 020e 	add.w	r2, r7, #14
 8002074:	2109      	movs	r1, #9
 8002076:	4618      	mov	r0, r3
 8002078:	f001 f9a6 	bl	80033c8 <RdByte>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	4313      	orrs	r3, r2
 8002084:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8002086:	7bbb      	ldrb	r3, [r7, #14]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d005      	beq.n	8002098 <vl53l7cx_get_power_mode+0x50>
 800208c:	2b04      	cmp	r3, #4
 800208e:	d107      	bne.n	80020a0 <vl53l7cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L7CX_POWER_MODE_WAKEUP;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
			break;
 8002096:	e009      	b.n	80020ac <vl53l7cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L7CX_POWER_MODE_SLEEP;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]

			break;
 800209e:	e005      	b.n	80020ac <vl53l7cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
			status = VL53L7CX_STATUS_ERROR;
 80020a6:	23ff      	movs	r3, #255	; 0xff
 80020a8:	73fb      	strb	r3, [r7, #15]
			break;
 80020aa:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 f99c 	bl	80033f2 <WrByte>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	73fb      	strb	r3, [r7, #15]

	return status;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <vl53l7cx_set_power_mode>:

uint8_t vl53l7cx_set_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af02      	add	r7, sp, #8
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L7CX_STATUS_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_get_power_mode(p_dev, &current_power_mode);
 80020de:	f107 030e 	add.w	r3, r7, #14
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ffaf 	bl	8002048 <vl53l7cx_get_power_mode>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d061      	beq.n	80021c0 <vl53l7cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d028      	beq.n	8002154 <vl53l7cx_set_power_mode+0x86>
 8002102:	2b01      	cmp	r3, #1
 8002104:	d14d      	bne.n	80021a2 <vl53l7cx_set_power_mode+0xd4>
	{
		case VL53L7CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800210e:	4618      	mov	r0, r3
 8002110:	f001 f96f 	bl	80033f2 <WrByte>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	4313      	orrs	r3, r2
 800211c:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	2109      	movs	r1, #9
 8002124:	4618      	mov	r0, r3
 8002126:	f001 f964 	bl	80033f2 <WrByte>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	4313      	orrs	r3, r2
 8002132:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	2301      	movs	r3, #1
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2306      	movs	r3, #6
 800213e:	2200      	movs	r2, #0
 8002140:	2101      	movs	r1, #1
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe ff67 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	4313      	orrs	r3, r2
 8002150:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 8002152:	e029      	b.n	80021a8 <vl53l7cx_set_power_mode+0xda>

		case VL53L7CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800215c:	4618      	mov	r0, r3
 800215e:	f001 f948 	bl	80033f2 <WrByte>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	4313      	orrs	r3, r2
 800216a:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	2109      	movs	r1, #9
 8002172:	4618      	mov	r0, r3
 8002174:	f001 f93d 	bl	80033f2 <WrByte>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	4313      	orrs	r3, r2
 8002180:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 8002182:	2300      	movs	r3, #0
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	2301      	movs	r3, #1
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2306      	movs	r3, #6
 800218c:	2200      	movs	r2, #0
 800218e:	2101      	movs	r1, #1
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7fe ff40 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	4313      	orrs	r3, r2
 800219e:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 80021a0:	e002      	b.n	80021a8 <vl53l7cx_set_power_mode+0xda>

		default:
			status = VL53L7CX_STATUS_ERROR;
 80021a2:	23ff      	movs	r3, #255	; 0xff
 80021a4:	73fb      	strb	r3, [r7, #15]
			break;
 80021a6:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 f91e 	bl	80033f2 <WrByte>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	4313      	orrs	r3, r2
 80021be:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <vl53l7cx_start_ranging>:

uint8_t vl53l7cx_start_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b09c      	sub	sp, #112	; 0x70
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L7CX_STATUS_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 80021da:	2300      	movs	r3, #0
 80021dc:	653b      	str	r3, [r7, #80]	; 0x50
 80021de:	2300      	movs	r3, #0
 80021e0:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80021e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l7cx_get_resolution(p_dev, &resolution);
 80021e8:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fc52 	bl	8002a98 <vl53l7cx_get_resolution>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	22ff      	movs	r2, #255	; 0xff
 800220c:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800220e:	4ba7      	ldr	r3, [pc, #668]	; (80024ac <vl53l7cx_start_ranging+0x2e0>)
 8002210:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L7CX_START_BH,
 800221a:	4ba5      	ldr	r3, [pc, #660]	; (80024b0 <vl53l7cx_start_ranging+0x2e4>)
 800221c:	f107 040c 	add.w	r4, r7, #12
 8002220:	461d      	mov	r5, r3
 8002222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800222e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L7CX_TARGET_STATUS_BH,
		VL53L7CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8002232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002234:	3308      	adds	r3, #8
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8002238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800223a:	3320      	adds	r3, #32
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 800223e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002240:	3340      	adds	r3, #64	; 0x40
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8002244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002246:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800224a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 800224c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8002254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 800225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002264:	2300      	movs	r3, #0
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
 8002268:	e073      	b.n	8002352 <vl53l7cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 800226a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	3368      	adds	r3, #104	; 0x68
 8002270:	443b      	add	r3, r7
 8002272:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d067      	beq.n	800234a <vl53l7cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 800227a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	3368      	adds	r3, #104	; 0x68
 8002282:	443b      	add	r3, r7
 8002284:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8002288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d057      	beq.n	800234a <vl53l7cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 800229a:	f107 020c 	add.w	r2, r7, #12
 800229e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80022a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d03a      	beq.n	800232a <vl53l7cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80022b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d833      	bhi.n	800232a <vl53l7cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80022c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c4:	885b      	ldrh	r3, [r3, #2]
 80022c6:	f245 42cf 	movw	r2, #21711	; 0x54cf
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d910      	bls.n	80022f0 <vl53l7cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80022ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d0:	885b      	ldrh	r3, [r3, #2]
 80022d2:	f645 028f 	movw	r2, #22671	; 0x588f
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d80a      	bhi.n	80022f0 <vl53l7cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 80022da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e2:	b299      	uxth	r1, r3
 80022e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022e6:	8813      	ldrh	r3, [r2, #0]
 80022e8:	f361 130f 	bfi	r3, r1, #4, #12
 80022ec:	8013      	strh	r3, [r2, #0]
 80022ee:	e009      	b.n	8002304 <vl53l7cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80022f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	b299      	uxth	r1, r3
 80022fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022fc:	8813      	ldrh	r3, [r2, #0]
 80022fe:	f361 130f 	bfi	r3, r1, #4, #12
 8002302:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L7CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	4611      	mov	r1, r2
 8002314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002316:	8812      	ldrh	r2, [r2, #0]
 8002318:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800231c:	b292      	uxth	r2, r2
 800231e:	fb01 f202 	mul.w	r2, r1, r2
 8002322:	441a      	add	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	e009      	b.n	800233e <vl53l7cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002330:	8812      	ldrh	r2, [r2, #0]
 8002332:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002336:	b292      	uxth	r2, r2
 8002338:	441a      	add	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	1d1a      	adds	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	e000      	b.n	800234c <vl53l7cx_start_ranging+0x180>
			continue;
 800234a:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800234c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800234e:	3301      	adds	r3, #1
 8002350:	663b      	str	r3, [r7, #96]	; 0x60
 8002352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002354:	2b0b      	cmp	r3, #11
 8002356:	d988      	bls.n	800226a <vl53l7cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f103 0218 	add.w	r2, r3, #24
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	615a      	str	r2, [r3, #20]

	status |= vl53l7cx_dci_write_data(p_dev,
 8002364:	f107 010c 	add.w	r1, r7, #12
 8002368:	2330      	movs	r3, #48	; 0x30
 800236a:	f64c 5278 	movw	r2, #52600	; 0xcd78
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fdc2 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800237c:	4313      	orrs	r3, r2
 800237e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L7CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 8002388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800238a:	3301      	adds	r3, #1
 800238c:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l7cx_dci_write_data(p_dev,
 800238e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002392:	2308      	movs	r3, #8
 8002394:	f64c 5260 	movw	r2, #52576	; 0xcd60
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fdad 	bl	8002ef8 <vl53l7cx_dci_write_data>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L7CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l7cx_dci_write_data(p_dev,
 80023ac:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80023b0:	2310      	movs	r3, #16
 80023b2:	f64c 5268 	movw	r2, #52584	; 0xcd68
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fd9e 	bl	8002ef8 <vl53l7cx_dci_write_data>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L7CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 f80d 	bl	80033f2 <WrByte>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2205      	movs	r2, #5
 80023ea:	2109      	movs	r1, #9
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 f800 	bl	80033f2 <WrByte>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fff2 	bl	80033f2 <WrByte>
 800240e:	4603      	mov	r3, r0
 8002410:	461a      	mov	r2, r3
 8002412:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002416:	4313      	orrs	r3, r2
 8002418:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L7CX_UI_CMD_END -
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002422:	2304      	movs	r3, #4
 8002424:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8002428:	f000 fff9 	bl	800341e <WrMulti>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002434:	4313      	orrs	r3, r2
 8002436:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 800243a:	2303      	movs	r3, #3
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	23ff      	movs	r3, #255	; 0xff
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002446:	2201      	movs	r2, #1
 8002448:	2104      	movs	r1, #4
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fde3 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002458:	4313      	orrs	r3, r2
 800245a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l7cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l7cx_dci_read_data(p_dev,
 8002464:	230c      	movs	r3, #12
 8002466:	f245 4240 	movw	r2, #21568	; 0x5440
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fcba 	bl	8002de4 <vl53l7cx_dci_read_data>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002478:	4313      	orrs	r3, r2
 800247a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 800248c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002490:	461a      	mov	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	429a      	cmp	r2, r3
 8002498:	d002      	beq.n	80024a0 <vl53l7cx_start_ranging+0x2d4>
	{
		status |= VL53L7CX_STATUS_ERROR;
 800249a:	23ff      	movs	r3, #255	; 0xff
 800249c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 80024a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3768      	adds	r7, #104	; 0x68
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdb0      	pop	{r4, r5, r7, pc}
 80024ac:	08008c8c 	.word	0x08008c8c
 80024b0:	08008c9c 	.word	0x08008c9c

080024b4 <vl53l7cx_stop_ranging>:

uint8_t vl53l7cx_stop_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L7CX_STATUS_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	74fb      	strb	r3, [r7, #19]
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f107 020c 	add.w	r2, r7, #12
 80024d2:	2304      	movs	r3, #4
 80024d4:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 80024d8:	f000 ffb8 	bl	800344c <RdMulti>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f240 42ff 	movw	r2, #1279	; 0x4ff
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d048      	beq.n	8002582 <vl53l7cx_stop_ranging+0xce>
	{
	        status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 ff7a 	bl	80033f2 <WrByte>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	4313      	orrs	r3, r2
 8002506:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2216      	movs	r2, #22
 800250c:	2115      	movs	r1, #21
 800250e:	4618      	mov	r0, r3
 8002510:	f000 ff6f 	bl	80033f2 <WrByte>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	4313      	orrs	r3, r2
 800251c:	75fb      	strb	r3, [r7, #23]
	        status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	2114      	movs	r1, #20
 8002524:	4618      	mov	r0, r3
 8002526:	f000 ff64 	bl	80033f2 <WrByte>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	4313      	orrs	r3, r2
 8002532:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8002534:	e021      	b.n	800257a <vl53l7cx_stop_ranging+0xc6>
	        {
	        	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f107 0213 	add.w	r2, r7, #19
 800253c:	2106      	movs	r1, #6
 800253e:	4618      	mov	r0, r3
 8002540:	f000 ff42 	bl	80033c8 <RdByte>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	4313      	orrs	r3, r2
 800254c:	75fb      	strb	r3, [r7, #23]
	        	status |= WaitMs(&(p_dev->platform), 10);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	210a      	movs	r1, #10
 8002552:	4618      	mov	r0, r3
 8002554:	f000 ffc7 	bl	80034e6 <WaitMs>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	4313      	orrs	r3, r2
 8002560:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8002562:	8abb      	ldrh	r3, [r7, #20]
 8002564:	3301      	adds	r3, #1
 8002566:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8002568:	8abb      	ldrh	r3, [r7, #20]
 800256a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800256e:	d904      	bls.n	800257a <vl53l7cx_stop_ranging+0xc6>
				{
					status |= tmp;
 8002570:	7cfa      	ldrb	r2, [r7, #19]
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	4313      	orrs	r3, r2
 8002576:	75fb      	strb	r3, [r7, #23]
					break;
 8002578:	e003      	b.n	8002582 <vl53l7cx_stop_ranging+0xce>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	b25b      	sxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	dad9      	bge.n	8002536 <vl53l7cx_stop_ranging+0x82>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f107 0213 	add.w	r2, r7, #19
 8002588:	2106      	movs	r1, #6
 800258a:	4618      	mov	r0, r3
 800258c:	f000 ff1c 	bl	80033c8 <RdByte>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	4313      	orrs	r3, r2
 8002598:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	b25b      	sxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da15      	bge.n	80025ce <vl53l7cx_stop_ranging+0x11a>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f107 0213 	add.w	r2, r7, #19
 80025a8:	2107      	movs	r1, #7
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 ff0c 	bl	80033c8 <RdByte>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b84      	cmp	r3, #132	; 0x84
 80025be:	d006      	beq.n	80025ce <vl53l7cx_stop_ranging+0x11a>
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b85      	cmp	r3, #133	; 0x85
 80025c4:	d003      	beq.n	80025ce <vl53l7cx_stop_ranging+0x11a>
		   status |= tmp;
 80025c6:	7cfa      	ldrb	r2, [r7, #19]
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 ff0b 	bl	80033f2 <WrByte>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2114      	movs	r1, #20
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 ff00 	bl	80033f2 <WrByte>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	2115      	movs	r1, #21
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fef5 	bl	80033f2 <WrByte>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	4313      	orrs	r3, r2
 8002610:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2204      	movs	r2, #4
 8002616:	2109      	movs	r1, #9
 8002618:	4618      	mov	r0, r3
 800261a:	f000 feea 	bl	80033f2 <WrByte>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	7dfb      	ldrb	r3, [r7, #23]
 8002624:	4313      	orrs	r3, r2
 8002626:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fede 	bl	80033f2 <WrByte>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	4313      	orrs	r3, r2
 800263e:	75fb      	strb	r3, [r7, #23]

	return status;
 8002640:	7dfb      	ldrb	r3, [r7, #23]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <vl53l7cx_check_data_ready>:

uint8_t vl53l7cx_check_data_ready(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002660:	2304      	movs	r3, #4
 8002662:	2100      	movs	r1, #0
 8002664:	f000 fef2 	bl	800344c <RdMulti>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	4313      	orrs	r3, r2
 8002670:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7c1b      	ldrb	r3, [r3, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d020      	beq.n	80026c2 <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d01b      	beq.n	80026c2 <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8002690:	2b05      	cmp	r3, #5
 8002692:	d116      	bne.n	80026c2 <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800269a:	f003 0305 	and.w	r3, r3, #5
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d10f      	bne.n	80026c2 <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <vl53l7cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	741a      	strb	r2, [r3, #16]
 80026c0:	e00e      	b.n	80026e0 <vl53l7cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da05      	bge.n	80026da <vl53l7cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <vl53l7cx_get_ranging_data>:

uint8_t vl53l7cx_get_ranging_data(
		VL53L7CX_Configuration		*p_dev,
		VL53L7CX_ResultsData		*p_results)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 80026fa:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	2100      	movs	r1, #0
 8002708:	f000 fea0 	bl	800344c <RdMulti>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	7ffb      	ldrb	r3, [r7, #31]
 8002712:	4313      	orrs	r3, r2
 8002714:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	b29b      	uxth	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 fea3 	bl	800347a <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = 16U; i < (uint32_t)p_dev->data_read_size; i+=4U)
 8002734:	2310      	movs	r3, #16
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	e0db      	b.n	80028f2 <vl53l7cx_get_ranging_data+0x206>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > 0x1U) 
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d915      	bls.n	8002780 <vl53l7cx_get_ranging_data+0x94>
                    && (bh_ptr->type < 0xdU))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d80e      	bhi.n	8002780 <vl53l7cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002776:	b29b      	uxth	r3, r3
 8002778:	fb02 f303 	mul.w	r3, r2, r3
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e005      	b.n	800278c <vl53l7cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002788:	b29b      	uxth	r3, r3
 800278a:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	885b      	ldrh	r3, [r3, #2]
 8002790:	f24d 427c 	movw	r2, #54396	; 0xd47c
 8002794:	4293      	cmp	r3, r2
 8002796:	f000 8088 	beq.w	80028aa <vl53l7cx_get_ranging_data+0x1be>
 800279a:	f24d 427c 	movw	r2, #54396	; 0xd47c
 800279e:	4293      	cmp	r3, r2
 80027a0:	f300 809f 	bgt.w	80028e2 <vl53l7cx_get_ranging_data+0x1f6>
 80027a4:	f24d 423c 	movw	r2, #54332	; 0xd43c
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d070      	beq.n	800288e <vl53l7cx_get_ranging_data+0x1a2>
 80027ac:	f24d 423c 	movw	r2, #54332	; 0xd43c
 80027b0:	4293      	cmp	r3, r2
 80027b2:	f300 8096 	bgt.w	80028e2 <vl53l7cx_get_ranging_data+0x1f6>
 80027b6:	f24d 323c 	movw	r2, #54076	; 0xd33c
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d059      	beq.n	8002872 <vl53l7cx_get_ranging_data+0x186>
 80027be:	f24d 323c 	movw	r2, #54076	; 0xd33c
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f300 808d 	bgt.w	80028e2 <vl53l7cx_get_ranging_data+0x1f6>
 80027c8:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d042      	beq.n	8002856 <vl53l7cx_get_ranging_data+0x16a>
 80027d0:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 80027d4:	4293      	cmp	r3, r2
 80027d6:	f300 8084 	bgt.w	80028e2 <vl53l7cx_get_ranging_data+0x1f6>
 80027da:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 80027de:	4293      	cmp	r3, r2
 80027e0:	d02b      	beq.n	800283a <vl53l7cx_get_ranging_data+0x14e>
 80027e2:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 80027e6:	4293      	cmp	r3, r2
 80027e8:	dc7b      	bgt.n	80028e2 <vl53l7cx_get_ranging_data+0x1f6>
 80027ea:	f64c 4250 	movw	r2, #52304	; 0xcc50
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d069      	beq.n	80028c6 <vl53l7cx_get_ranging_data+0x1da>
 80027f2:	f64c 4250 	movw	r2, #52304	; 0xcc50
 80027f6:	4293      	cmp	r3, r2
 80027f8:	dc73      	bgt.n	80028e2 <vl53l7cx_get_ranging_data+0x1f6>
 80027fa:	f245 42b4 	movw	r2, #21684	; 0x54b4
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <vl53l7cx_get_ranging_data+0x120>
 8002802:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8002806:	4293      	cmp	r3, r2
 8002808:	d00a      	beq.n	8002820 <vl53l7cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 800280a:	e06a      	b.n	80028e2 <vl53l7cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	330c      	adds	r3, #12
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002818:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	701a      	strb	r2, [r3, #0]
				break;
 800281e:	e061      	b.n	80028e4 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	3304      	adds	r3, #4
 8002828:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4619      	mov	r1, r3
 8002834:	f005 f996 	bl	8007b64 <memcpy>
				break;
 8002838:	e054      	b.n	80028e4 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	3304      	adds	r3, #4
 8002844:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4619      	mov	r1, r3
 8002850:	f005 f988 	bl	8007b64 <memcpy>
				break;
 8002854:	e046      	b.n	80028e4 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	3304      	adds	r3, #4
 8002860:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4619      	mov	r1, r3
 800286c:	f005 f97a 	bl	8007b64 <memcpy>
				break;
 8002870:	e038      	b.n	80028e4 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	3304      	adds	r3, #4
 800287c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4619      	mov	r1, r3
 8002888:	f005 f96c 	bl	8007b64 <memcpy>
				break;
 800288c:	e02a      	b.n	80028e4 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3304      	adds	r3, #4
 8002898:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4619      	mov	r1, r3
 80028a4:	f005 f95e 	bl	8007b64 <memcpy>
				break;
 80028a8:	e01c      	b.n	80028e4 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	3304      	adds	r3, #4
 80028b4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4619      	mov	r1, r3
 80028c0:	f005 f950 	bl	8007b64 <memcpy>
				break;
 80028c4:	e00e      	b.n	80028e4 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	3304      	adds	r3, #4
 80028d0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4619      	mov	r1, r3
 80028dc:	f005 f942 	bl	8007b64 <memcpy>
				break;
 80028e0:	e000      	b.n	80028e4 <vl53l7cx_get_ranging_data+0x1f8>
				break;
 80028e2:	bf00      	nop
		}
		i += msize;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
	for (i = 16U; i < (uint32_t)p_dev->data_read_size; i+=4U)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	3304      	adds	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	f4ff af1e 	bcc.w	800273a <vl53l7cx_get_ranging_data+0x4e>

#ifndef VL53L7CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	e00d      	b.n	8002920 <vl53l7cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	0ada      	lsrs	r2, r3, #11
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3301      	adds	r3, #1
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b3f      	cmp	r3, #63	; 0x3f
 8002924:	d9ee      	bls.n	8002904 <vl53l7cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e045      	b.n	80029b8 <vl53l7cx_get_ranging_data+0x2cc>
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	da00      	bge.n	8002942 <vl53l7cx_get_ranging_data+0x256>
 8002940:	3303      	adds	r3, #3
 8002942:	109b      	asrs	r3, r3, #2
 8002944:	b219      	sxth	r1, r3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	460a      	mov	r2, r1
 8002954:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	da07      	bge.n	800297a <vl53l7cx_get_ranging_data+0x28e>
		{
			p_results->distance_mm[i] = 0;
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	2200      	movs	r2, #0
 8002978:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	b2d9      	uxtb	r1, r3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002994:	460a      	mov	r2, r1
 8002996:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	3350      	adds	r3, #80	; 0x50
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0ada      	lsrs	r2, r3, #11
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	3350      	adds	r3, #80	; 0x50
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	605a      	str	r2, [r3, #4]
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	3301      	adds	r3, #1
 80029b6:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b3f      	cmp	r3, #63	; 0x3f
 80029bc:	d9b6      	bls.n	800292c <vl53l7cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e01b      	b.n	80029fc <vl53l7cx_get_ranging_data+0x310>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d110      	bne.n	80029f6 <vl53l7cx_get_ranging_data+0x30a>
			for(j = 0; j < (uint32_t)
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e00a      	b.n	80029f0 <vl53l7cx_get_ranging_data+0x304>
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L7CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4413      	add	r3, r2
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f1      	beq.n	80029da <vl53l7cx_get_ranging_data+0x2ee>
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b3f      	cmp	r3, #63	; 0x3f
 8002a00:	d9e0      	bls.n	80029c4 <vl53l7cx_get_ranging_data+0x2d8>
		}
	}
#endif

#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e012      	b.n	8002a2e <vl53l7cx_get_ranging_data+0x342>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	33d2      	adds	r3, #210	; 0xd2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <vl53l7cx_get_ranging_data+0x3a8>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0bda      	lsrs	r2, r3, #15
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	33d2      	adds	r3, #210	; 0xd2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b1f      	cmp	r3, #31
 8002a32:	d9e9      	bls.n	8002a08 <vl53l7cx_get_ranging_data+0x31c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	89fb      	ldrh	r3, [r7, #14]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8002a52:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8002a66:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	89bb      	ldrh	r3, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	81bb      	strh	r3, [r7, #12]
	if(header_id != footer_id)
 8002a78:	89fa      	ldrh	r2, [r7, #14]
 8002a7a:	89bb      	ldrh	r3, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d003      	beq.n	8002a88 <vl53l7cx_get_ranging_data+0x39c>
	{
		status |= VL53L7CX_STATUS_CORRUPTED_FRAME;
 8002a80:	7ffb      	ldrb	r3, [r7, #31]
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8002a88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	80008001 	.word	0x80008001

08002a98 <vl53l7cx_get_resolution>:

uint8_t vl53l7cx_get_resolution(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002aac:	2308      	movs	r3, #8
 8002aae:	f245 4250 	movw	r2, #21584	; 0x5450
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f996 	bl	8002de4 <vl53l7cx_dci_read_data>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8002ace:	fb12 f303 	smulbb	r3, r2, r3
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	701a      	strb	r2, [r3, #0]

	return status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <vl53l7cx_set_resolution>:


uint8_t vl53l7cx_set_resolution(
		VL53L7CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d002      	beq.n	8002afe <vl53l7cx_set_resolution+0x1c>
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d055      	beq.n	8002ba8 <vl53l7cx_set_resolution+0xc6>
 8002afc:	e0a9      	b.n	8002c52 <vl53l7cx_set_resolution+0x170>
		case VL53L7CX_RESOLUTION_4X4:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002b04:	2310      	movs	r3, #16
 8002b06:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f96a 	bl	8002de4 <vl53l7cx_dci_read_data>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2240      	movs	r2, #64	; 0x40
 8002b1e:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002b38:	2310      	movs	r3, #16
 8002b3a:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f9da 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002b54:	2308      	movs	r3, #8
 8002b56:	f245 4250 	movw	r2, #21584	; 0x5450
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f942 	bl	8002de4 <vl53l7cx_dci_read_data>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2204      	movs	r2, #4
 8002b76:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2208      	movs	r2, #8
 8002b86:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002b90:	2308      	movs	r3, #8
 8002b92:	f245 4250 	movw	r2, #21584	; 0x5450
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9ae 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			break;
 8002ba6:	e057      	b.n	8002c58 <vl53l7cx_set_resolution+0x176>

		case VL53L7CX_RESOLUTION_8X8:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002bae:	2310      	movs	r3, #16
 8002bb0:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f915 	bl	8002de4 <vl53l7cx_dci_read_data>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2210      	movs	r2, #16
 8002bd0:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002be2:	2310      	movs	r3, #16
 8002be4:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f985 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002bfe:	2308      	movs	r3, #8
 8002c00:	f245 4250 	movw	r2, #21584	; 0x5450
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f8ed 	bl	8002de4 <vl53l7cx_dci_read_data>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2208      	movs	r2, #8
 8002c18:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2208      	movs	r2, #8
 8002c20:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2204      	movs	r2, #4
 8002c28:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	f245 4250 	movw	r2, #21584	; 0x5450
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f959 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);

			break;
 8002c50:	e002      	b.n	8002c58 <vl53l7cx_set_resolution+0x176>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 8002c52:	237f      	movs	r3, #127	; 0x7f
 8002c54:	73fb      	strb	r3, [r7, #15]
			break;
 8002c56:	bf00      	nop
		}

	status |= _vl53l7cx_send_offset_data(p_dev, resolution);
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7fe fa6b 	bl	8001138 <_vl53l7cx_send_offset_data>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l7cx_send_xtalk_data(p_dev, resolution);
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fe fc2d 	bl	80014d0 <_vl53l7cx_send_xtalk_data>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	73fb      	strb	r3, [r7, #15]

	return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <vl53l7cx_set_ranging_frequency_hz>:
}

uint8_t vl53l7cx_set_ranging_frequency_hz(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b088      	sub	sp, #32
 8002c8e:	af04      	add	r7, sp, #16
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	9302      	str	r3, [sp, #8]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	1cfb      	adds	r3, r7, #3
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2304      	movs	r3, #4
 8002cae:	f245 4258 	movw	r2, #21592	; 0x5458
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9be 	bl	8003034 <vl53l7cx_dci_replace_data>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <vl53l7cx_set_integration_time_ms>:
}

uint8_t vl53l7cx_set_integration_time_ms(
		VL53L7CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d903      	bls.n	8002cec <vl53l7cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cea:	d904      	bls.n	8002cf6 <vl53l7cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L7CX_STATUS_INVALID_PARAM;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e01a      	b.n	8002d2c <vl53l7cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	60bb      	str	r3, [r7, #8]

		status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9302      	str	r3, [sp, #8]
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2314      	movs	r3, #20
 8002d18:	f245 425c 	movw	r2, #21596	; 0x545c
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f989 	bl	8003034 <vl53l7cx_dci_replace_data>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	73fb      	strb	r3, [r7, #15]
				VL53L7CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <vl53l7cx_set_ranging_mode>:
}

uint8_t vl53l7cx_set_ranging_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002d50:	2308      	movs	r3, #8
 8002d52:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f844 	bl	8002de4 <vl53l7cx_dci_read_data>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d002      	beq.n	8002d72 <vl53l7cx_set_ranging_mode+0x3c>
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d00b      	beq.n	8002d88 <vl53l7cx_set_ranging_mode+0x52>
 8002d70:	e015      	b.n	8002d9e <vl53l7cx_set_ranging_mode+0x68>
	{
		case VL53L7CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
			break;
 8002d86:	e00d      	b.n	8002da4 <vl53l7cx_set_ranging_mode+0x6e>

		case VL53L7CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
			break;
 8002d9c:	e002      	b.n	8002da4 <vl53l7cx_set_ranging_mode+0x6e>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 8002d9e:	237f      	movs	r3, #127	; 0x7f
 8002da0:	73fb      	strb	r3, [r7, #15]
			break;
 8002da2:	bf00      	nop
	}

	status |= vl53l7cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002daa:	2308      	movs	r3, #8
 8002dac:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f8a1 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002dc0:	f107 0108 	add.w	r1, r7, #8
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f894 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <vl53l7cx_dci_read_data>:
uint8_t vl53l7cx_dci_read_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L7CX_STATUS_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002dfe:	4a3d      	ldr	r2, [pc, #244]	; (8002ef4 <vl53l7cx_dci_read_data+0x110>)
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8002e10:	d903      	bls.n	8002e1a <vl53l7cx_dci_read_data+0x36>
	{
		status |= VL53L7CX_STATUS_ERROR;
 8002e12:	23ff      	movs	r3, #255	; 0xff
 8002e14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002e18:	e065      	b.n	8002ee6 <vl53l7cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	111b      	asrs	r3, r3, #4
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f107 0214 	add.w	r2, r7, #20
 8002e40:	230c      	movs	r3, #12
 8002e42:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8002e46:	f000 faea 	bl	800341e <WrMulti>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L7CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8002e58:	2303      	movs	r3, #3
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	23ff      	movs	r3, #255	; 0xff
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002e64:	2201      	movs	r2, #1
 8002e66:	2104      	movs	r1, #4
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7fe f8d4 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L7CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8002e7c:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f642 4104 	movw	r1, #11268	; 0x2c04
 8002e8a:	f000 fadf 	bl	800344c <RdMulti>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fae5 	bl	800347a <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002eb4:	e011      	b.n	8002eda <vl53l7cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8002eb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002eba:	1d1a      	adds	r2, r3, #4
 8002ebc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	440b      	add	r3, r1
 8002ec4:	68f9      	ldr	r1, [r7, #12]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8002ecc:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002ece:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002eda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ede:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	dbe7      	blt.n	8002eb6 <vl53l7cx_dci_read_data+0xd2>
		}
	}

	return status;
 8002ee6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3728      	adds	r7, #40	; 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08008ccc 	.word	0x08008ccc

08002ef8 <vl53l7cx_dci_write_data>:
uint8_t vl53l7cx_dci_write_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	; 0x30
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002f10:	2300      	movs	r3, #0
 8002f12:	753b      	strb	r3, [r7, #20]
 8002f14:	2300      	movs	r3, #0
 8002f16:	757b      	strb	r3, [r7, #21]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	75bb      	strb	r3, [r7, #22]
 8002f1c:	230f      	movs	r3, #15
 8002f1e:	75fb      	strb	r3, [r7, #23]
 8002f20:	2305      	movs	r3, #5
 8002f22:	763b      	strb	r3, [r7, #24]
 8002f24:	2301      	movs	r3, #1
 8002f26:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	121b      	asrs	r3, r3, #8
 8002f2e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002f30:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3308      	adds	r3, #8
 8002f38:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002f3a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L7CX_UI_CMD_END -
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8002f42:	3334      	adds	r3, #52	; 0x34
 8002f44:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8002f4c:	d903      	bls.n	8002f56 <vl53l7cx_dci_write_data+0x5e>
           > (uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L7CX_STATUS_ERROR;
 8002f4e:	23ff      	movs	r3, #255	; 0xff
 8002f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f54:	e068      	b.n	8003028 <vl53l7cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	111b      	asrs	r3, r3, #4
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002f6c:	887b      	ldrh	r3, [r7, #2]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	68b8      	ldr	r0, [r7, #8]
 8002f7c:	f000 fa7d 	bl	800347a <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002f88:	e012      	b.n	8002fb0 <vl53l7cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8002f8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	441a      	add	r2, r3
 8002f92:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002f96:	3304      	adds	r3, #4
 8002f98:	7811      	ldrb	r1, [r2, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002fa4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002fb0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	dae8      	bge.n	8002f8a <vl53l7cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	cb03      	ldmia	r3!, {r0, r1}
 8002fd6:	6010      	str	r0, [r2, #0]
 8002fd8:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8002fda:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8002fe2:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002fe8:	f000 fa19 	bl	800341e <WrMulti>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	23ff      	movs	r3, #255	; 0xff
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003006:	2201      	movs	r2, #1
 8003008:	2104      	movs	r1, #4
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7fe f803 	bl	8001016 <_vl53l7cx_poll_for_answer>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003018:	4313      	orrs	r3, r2
 800301a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	4619      	mov	r1, r3
 8003022:	68b8      	ldr	r0, [r7, #8]
 8003024:	f000 fa29 	bl	800347a <SwapBuffer>
	}

	return status;
 8003028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800302c:	4618      	mov	r0, r3
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <vl53l7cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]

	status |= vl53l7cx_dci_read_data(p_dev, data, index, data_size);
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff fec9 	bl	8002de4 <vl53l7cx_dci_read_data>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	4313      	orrs	r3, r2
 800305a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 800305c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	4413      	add	r3, r2
 8003062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003064:	6a39      	ldr	r1, [r7, #32]
 8003066:	4618      	mov	r0, r3
 8003068:	f004 fd7c 	bl	8007b64 <memcpy>
	status |= vl53l7cx_dci_write_data(p_dev, data, index, data_size);
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff40 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	4313      	orrs	r3, r2
 8003080:	75fb      	strb	r3, [r7, #23]

	return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <vl53l7cx_set_detection_thresholds_enable>:
}

uint8_t vl53l7cx_set_detection_thresholds_enable(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af04      	add	r7, sp, #16
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 800309c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80030a0:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d104      	bne.n	80030b2 <vl53l7cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 80030a8:	2301      	movs	r3, #1
 80030aa:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 80030ac:	2304      	movs	r3, #4
 80030ae:	73bb      	strb	r3, [r7, #14]
 80030b0:	e003      	b.n	80030ba <vl53l7cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 80030b2:	2300      	movs	r3, #0
 80030b4:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 80030b6:	230c      	movs	r3, #12
 80030b8:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80030c0:	2300      	movs	r3, #0
 80030c2:	9302      	str	r3, [sp, #8]
 80030c4:	2304      	movs	r3, #4
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	f107 0308 	add.w	r3, r7, #8
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2308      	movs	r3, #8
 80030d0:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ffad 	bl	8003034 <vl53l7cx_dci_replace_data>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80030ea:	2311      	movs	r3, #17
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	2301      	movs	r3, #1
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	f107 030e 	add.w	r3, r7, #14
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2314      	movs	r3, #20
 80030fa:	f245 4288 	movw	r2, #21640	; 0x5488
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ff98 	bl	8003034 <vl53l7cx_dci_replace_data>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	4313      	orrs	r3, r2
 800310c:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <vl53l7cx_set_detection_thresholds>:
}

uint8_t vl53l7cx_set_detection_thresholds(
		VL53L7CX_Configuration			*p_dev,
		VL53L7CX_DetectionThresholds	*p_thresholds)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L7CX_STATUS_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8003126:	4aa7      	ldr	r2, [pc, #668]	; (80033c4 <vl53l7cx_set_detection_thresholds+0x2ac>)
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003130:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]
 8003138:	e120      	b.n	800337c <vl53l7cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	7a1b      	ldrb	r3, [r3, #8]
 800313e:	3b01      	subs	r3, #1
 8003140:	2b12      	cmp	r3, #18
 8003142:	f200 8117 	bhi.w	8003374 <vl53l7cx_set_detection_thresholds+0x25c>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <vl53l7cx_set_detection_thresholds+0x34>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	08003199 	.word	0x08003199
 8003150:	080031e7 	.word	0x080031e7
 8003154:	08003375 	.word	0x08003375
 8003158:	08003235 	.word	0x08003235
 800315c:	08003375 	.word	0x08003375
 8003160:	08003375 	.word	0x08003375
 8003164:	08003375 	.word	0x08003375
 8003168:	08003283 	.word	0x08003283
 800316c:	08003375 	.word	0x08003375
 8003170:	08003375 	.word	0x08003375
 8003174:	08003375 	.word	0x08003375
 8003178:	08003375 	.word	0x08003375
 800317c:	080032d1 	.word	0x080032d1
 8003180:	08003375 	.word	0x08003375
 8003184:	08003375 	.word	0x08003375
 8003188:	08003375 	.word	0x08003375
 800318c:	08003375 	.word	0x08003375
 8003190:	08003375 	.word	0x08003375
 8003194:	0800331f 	.word	0x0800331f
		{
			case VL53L7CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8003198:	7dfa      	ldrb	r2, [r7, #23]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	461a      	mov	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	7dfa      	ldrb	r2, [r7, #23]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	461a      	mov	r2, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	008a      	lsls	r2, r1, #2
 80031bc:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 80031be:	7dfa      	ldrb	r2, [r7, #23]
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	461a      	mov	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	4413      	add	r3, r2
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	7dfa      	ldrb	r2, [r7, #23]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	461a      	mov	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	008a      	lsls	r2, r1, #2
 80031e2:	605a      	str	r2, [r3, #4]
				break;
 80031e4:	e0c7      	b.n	8003376 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80031e6:	7dfa      	ldrb	r2, [r7, #23]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	461a      	mov	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	7dfa      	ldrb	r2, [r7, #23]
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	461a      	mov	r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4413      	add	r3, r2
 8003208:	02ca      	lsls	r2, r1, #11
 800320a:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 800320c:	7dfa      	ldrb	r2, [r7, #23]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4413      	add	r3, r2
 800321c:	6859      	ldr	r1, [r3, #4]
 800321e:	7dfa      	ldrb	r2, [r7, #23]
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	461a      	mov	r2, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4413      	add	r3, r2
 800322e:	02ca      	lsls	r2, r1, #11
 8003230:	605a      	str	r2, [r3, #4]
				break;
 8003232:	e0a0      	b.n	8003376 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8003234:	7dfa      	ldrb	r2, [r7, #23]
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	461a      	mov	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4413      	add	r3, r2
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	7dfa      	ldrb	r2, [r7, #23]
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	461a      	mov	r2, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	4413      	add	r3, r2
 8003256:	01ca      	lsls	r2, r1, #7
 8003258:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 800325a:	7dfa      	ldrb	r2, [r7, #23]
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	461a      	mov	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	4413      	add	r3, r2
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	7dfa      	ldrb	r2, [r7, #23]
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	461a      	mov	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4413      	add	r3, r2
 800327c:	01ca      	lsls	r2, r1, #7
 800327e:	605a      	str	r2, [r3, #4]
				break;
 8003280:	e079      	b.n	8003376 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8003282:	7dfa      	ldrb	r2, [r7, #23]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	461a      	mov	r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	7dfa      	ldrb	r2, [r7, #23]
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	461a      	mov	r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	02ca      	lsls	r2, r1, #11
 80032a6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80032a8:	7dfa      	ldrb	r2, [r7, #23]
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	461a      	mov	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	7dfa      	ldrb	r2, [r7, #23]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	02ca      	lsls	r2, r1, #11
 80032cc:	605a      	str	r2, [r3, #4]
				break;
 80032ce:	e052      	b.n	8003376 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 80032d0:	7dfa      	ldrb	r2, [r7, #23]
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	461a      	mov	r2, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	7dfa      	ldrb	r2, [r7, #23]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	461a      	mov	r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	4413      	add	r3, r2
 80032f2:	020a      	lsls	r2, r1, #8
 80032f4:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 80032f6:	7dfa      	ldrb	r2, [r7, #23]
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	461a      	mov	r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4413      	add	r3, r2
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	7dfa      	ldrb	r2, [r7, #23]
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	461a      	mov	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	4413      	add	r3, r2
 8003318:	020a      	lsls	r2, r1, #8
 800331a:	605a      	str	r2, [r3, #4]
				break;
 800331c:	e02b      	b.n	8003376 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 800331e:	7dfa      	ldrb	r2, [r7, #23]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	461a      	mov	r2, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	4413      	add	r3, r2
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	7df9      	ldrb	r1, [r7, #23]
 8003332:	460b      	mov	r3, r1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	440b      	add	r3, r1
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4619      	mov	r1, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4419      	add	r1, r3
 8003340:	4613      	mov	r3, r2
 8003342:	041b      	lsls	r3, r3, #16
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8003348:	7dfa      	ldrb	r2, [r7, #23]
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	461a      	mov	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4413      	add	r3, r2
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	7df9      	ldrb	r1, [r7, #23]
 800335c:	460b      	mov	r3, r1
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	440b      	add	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4619      	mov	r1, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	4419      	add	r1, r3
 800336a:	4613      	mov	r3, r2
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	604b      	str	r3, [r1, #4]
				break;
 8003372:	e000      	b.n	8003376 <vl53l7cx_set_detection_thresholds+0x25e>
			default:
				break;
 8003374:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	3301      	adds	r3, #1
 800337a:	75fb      	strb	r3, [r7, #23]
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b3f      	cmp	r3, #63	; 0x3f
 8003380:	f67f aedb 	bls.w	800313a <vl53l7cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8003384:	f107 010c 	add.w	r1, r7, #12
 8003388:	2308      	movs	r3, #8
 800338a:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fdb2 	bl	8002ef8 <vl53l7cx_dci_write_data>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	7dbb      	ldrb	r3, [r7, #22]
 800339a:	4313      	orrs	r3, r2
 800339c:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 800339e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033a2:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fda5 	bl	8002ef8 <vl53l7cx_dci_write_data>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	7dbb      	ldrb	r3, [r7, #22]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L7CX_NB_THRESHOLDS
			*sizeof(VL53L7CX_DetectionThresholds)));

	return status;
 80033b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	08008cd8 	.word	0x08008cd8

080033c8 <RdByte>:

uint8_t RdByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	460b      	mov	r3, r1
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689c      	ldr	r4, [r3, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8818      	ldrh	r0, [r3, #0]
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	2301      	movs	r3, #1
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	47a0      	blx	r4
 80033e6:	4603      	mov	r3, r0
 80033e8:	b2db      	uxtb	r3, r3
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}

080033f2 <WrByte>:

uint8_t WrByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80033f2:	b590      	push	{r4, r7, lr}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	807b      	strh	r3, [r7, #2]
 80033fe:	4613      	mov	r3, r2
 8003400:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685c      	ldr	r4, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8818      	ldrh	r0, [r3, #0]
 800340a:	1c7a      	adds	r2, r7, #1
 800340c:	8879      	ldrh	r1, [r7, #2]
 800340e:	2301      	movs	r3, #1
 8003410:	47a0      	blx	r4
 8003412:	4603      	mov	r3, r0
 8003414:	b2db      	uxtb	r3, r3
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}

0800341e <WrMulti>:
uint8_t WrMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800341e:	b590      	push	{r4, r7, lr}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	460b      	mov	r3, r1
 800342c:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685c      	ldr	r4, [r3, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8818      	ldrh	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	8979      	ldrh	r1, [r7, #10]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	47a0      	blx	r4
 8003440:	4603      	mov	r3, r0
 8003442:	b2db      	uxtb	r3, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <RdMulti>:
uint8_t RdMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	460b      	mov	r3, r1
 800345a:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689c      	ldr	r4, [r3, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8818      	ldrh	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	8979      	ldrh	r1, [r7, #10]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	47a0      	blx	r4
 800346e:	4603      	mov	r3, r0
 8003470:	b2db      	uxtb	r3, r3
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}

0800347a <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e021      	b.n	80034d0 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4413      	add	r3, r2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3301      	adds	r3, #1
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	440b      	add	r3, r1
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3302      	adds	r3, #2
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	440b      	add	r3, r1
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	3203      	adds	r2, #3
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	440a      	add	r2, r1
 80034ba:	7812      	ldrb	r2, [r2, #0]
 80034bc:	4313      	orrs	r3, r2
    tmp = (
 80034be:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4413      	add	r3, r2
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3304      	adds	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d3d9      	bcc.n	800348c <SwapBuffer+0x12>
  }
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <WaitMs>:

uint8_t WaitMs(
		VL53L7CX_Platform *p_platform,
		uint32_t TimeMs)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4798      	blx	r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 80034fa:	bf00      	nop
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4798      	blx	r3
 8003502:	4603      	mov	r3, r0
 8003504:	461a      	mov	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d8f5      	bhi.n	80034fc <WaitMs+0x16>

  return 0;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <VL53L7CX_RegisterBusIO>:
  * @param pObj    vl53l7cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_RegisterBusIO(VL53L7CX_Object_t *pObj, VL53L7CX_IO_t *pIO)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <VL53L7CX_RegisterBusIO+0x16>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <VL53L7CX_RegisterBusIO+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003530:	f06f 0301 	mvn.w	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e033      	b.n	80035a0 <VL53L7CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	891a      	ldrh	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	615a      	str	r2, [r3, #20]

    /* fill vl53l7cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	891a      	ldrh	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <VL53L7CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4798      	blx	r3
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	e002      	b.n	80035a0 <VL53L7CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L7CX_ERROR;
 800359a:	f04f 33ff 	mov.w	r3, #4294967295
 800359e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <VL53L7CX_Init>:
  * @brief Initializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Init(VL53L7CX_Object_t *pObj)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <VL53L7CX_Init+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80035b8:	f06f 0301 	mvn.w	r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e02e      	b.n	800361e <VL53L7CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <VL53L7CX_Init+0x28>
  {
    ret =  VL53L7CX_ERROR;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e025      	b.n	800361e <VL53L7CX_Init+0x74>
  }
  else if (vl53l7cx_init(&pObj->Dev) != VL53L7CX_STATUS_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3318      	adds	r3, #24
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe f8c6 	bl	8001768 <vl53l7cx_init>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <VL53L7CX_Init+0x40>
  {
    ret = VL53L7CX_ERROR;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e019      	b.n	800361e <VL53L7CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    pObj->IsBlocking = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
    pObj->IsContinuous = 0U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
    pObj->IsAmbientEnabled = 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = 0U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsInitialized = 1U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
    ret = VL53L7CX_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <VL53L7CX_DeInit>:
  * @brief Deinitializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_DeInit(VL53L7CX_Object_t *pObj)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <VL53L7CX_DeInit+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003636:	f06f 0301 	mvn.w	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e018      	b.n	8003670 <VL53L7CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d110      	bne.n	800366a <VL53L7CX_DeInit+0x42>
  {
    /* De-initialize the vl53l7cx interface */
    if (pObj->IO.DeInit() != 0)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4798      	blx	r3
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <VL53L7CX_DeInit+0x34>
    {
      ret = VL53L7CX_ERROR;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e009      	b.n	8003670 <VL53L7CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L7CX_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8003668:	e002      	b.n	8003670 <VL53L7CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L7CX_ERROR;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <VL53L7CX_ReadID>:
  * @param pObj    vl53l7cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ReadID(VL53L7CX_Object_t *pObj, uint32_t *pId)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L7CX_STATUS_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <VL53L7CX_ReadID+0x22>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <VL53L7CX_ReadID+0x2a>
  {
    ret = VL53L7CX_INVALID_PARAM;
 800369c:	f06f 0301 	mvn.w	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e045      	b.n	8003730 <VL53L7CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3318      	adds	r3, #24
 80036a8:	2200      	movs	r2, #0
 80036aa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fe9f 	bl	80033f2 <WrByte>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3318      	adds	r3, #24
 80036c2:	f107 020a 	add.w	r2, r7, #10
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fe7d 	bl	80033c8 <RdByte>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3318      	adds	r3, #24
 80036dc:	f107 0209 	add.w	r2, r7, #9
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fe70 	bl	80033c8 <RdByte>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461a      	mov	r2, r3
 80036ec:	7afb      	ldrb	r3, [r7, #11]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3318      	adds	r3, #24
 80036f6:	2202      	movs	r2, #2
 80036f8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fe78 	bl	80033f2 <WrByte>
 8003702:	4603      	mov	r3, r0
 8003704:	461a      	mov	r2, r3
 8003706:	7afb      	ldrb	r3, [r7, #11]
 8003708:	4313      	orrs	r3, r2
 800370a:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <VL53L7CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8003712:	7abb      	ldrb	r3, [r7, #10]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	7a7a      	ldrb	r2, [r7, #9]
 8003718:	441a      	add	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e005      	b.n	8003730 <VL53L7CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_ERROR;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003730:	68fb      	ldr	r3, [r7, #12]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <VL53L7CX_GetCapabilities>:
  * @param pObj    vl53l7cx context object.
  * @param pCap    Pointer to the vl53l7cx capabilities.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetCapabilities(VL53L7CX_Object_t *pObj, VL53L7CX_Capabilities_t *pCap)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <VL53L7CX_GetCapabilities+0x16>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d103      	bne.n	8003758 <VL53L7CX_GetCapabilities+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003750:	f06f 0301 	mvn.w	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e00d      	b.n	8003774 <VL53L7CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L7CX_RESOLUTION_8X8;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2240      	movs	r2, #64	; 0x40
 800375c:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L7CX_TARGET_PER_ZONE;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2201      	movs	r2, #1
 8003762:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	60da      	str	r2, [r3, #12]

    ret = VL53L7CX_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <VL53L7CX_ConfigProfile>:
  * @param pObj    vl53l7cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigProfile(VL53L7CX_Object_t *pObj, VL53L7CX_ProfileConfig_t *pConfig)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L7CX_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <VL53L7CX_ConfigProfile+0x4c>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <VL53L7CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L7CX_INVALID_PARAM;
  }

  switch (profile)
 80037b0:	7c7b      	ldrb	r3, [r7, #17]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d822      	bhi.n	80037fe <VL53L7CX_ConfigProfile+0x7a>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <VL53L7CX_ConfigProfile+0x3c>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037d7 	.word	0x080037d7
 80037c4:	080037e1 	.word	0x080037e1
 80037c8:	080037eb 	.word	0x080037eb
 80037cc:	080037f5 	.word	0x080037f5
    return VL53L7CX_INVALID_PARAM;
 80037d0:	f06f 0301 	mvn.w	r3, #1
 80037d4:	e070      	b.n	80038b8 <VL53L7CX_ConfigProfile+0x134>
  {
  case VL53L7CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 80037d6:	2310      	movs	r3, #16
 80037d8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 80037da:	2301      	movs	r3, #1
 80037dc:	74bb      	strb	r3, [r7, #18]
    break;
 80037de:	e016      	b.n	800380e <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 80037e0:	2310      	movs	r3, #16
 80037e2:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 80037e4:	2303      	movs	r3, #3
 80037e6:	74bb      	strb	r3, [r7, #18]
    break;
 80037e8:	e011      	b.n	800380e <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 80037ee:	2301      	movs	r3, #1
 80037f0:	74bb      	strb	r3, [r7, #18]
    break;
 80037f2:	e00c      	b.n	800380e <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 80037f4:	2340      	movs	r3, #64	; 0x40
 80037f6:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 80037f8:	2303      	movs	r3, #3
 80037fa:	74bb      	strb	r3, [r7, #18]
    break;
 80037fc:	e007      	b.n	800380e <VL53L7CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 80037fe:	2300      	movs	r3, #0
 8003800:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8003802:	2300      	movs	r3, #0
 8003804:	74bb      	strb	r3, [r7, #18]
    ret = VL53L7CX_INVALID_PARAM;
 8003806:	f06f 0301 	mvn.w	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
    break;
 800380c:	bf00      	nop
  }

  if (ret != VL53L7CX_OK)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <VL53L7CX_ConfigProfile+0x94>
  {
    return ret;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	e04f      	b.n	80038b8 <VL53L7CX_ConfigProfile+0x134>
  }
  else if (vl53l7cx_set_resolution(&pObj->Dev, resolution) != VL53L7CX_STATUS_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3318      	adds	r3, #24
 800381c:	7cfa      	ldrb	r2, [r7, #19]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f95e 	bl	8002ae2 <vl53l7cx_set_resolution>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <VL53L7CX_ConfigProfile+0xb0>
  {
    ret = VL53L7CX_ERROR;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e040      	b.n	80038b6 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L7CX_STATUS_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3318      	adds	r3, #24
 8003838:	7cba      	ldrb	r2, [r7, #18]
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fa7a 	bl	8002d36 <vl53l7cx_set_ranging_mode>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <VL53L7CX_ConfigProfile+0xcc>
  {
    ret = VL53L7CX_ERROR;
 8003848:	f04f 33ff 	mov.w	r3, #4294967295
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e032      	b.n	80038b6 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L7CX_STATUS_OK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3318      	adds	r3, #24
 8003854:	68f9      	ldr	r1, [r7, #12]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fa38 	bl	8002ccc <vl53l7cx_set_integration_time_ms>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <VL53L7CX_ConfigProfile+0xe6>
  {
    ret = VL53L7CX_ERROR;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e025      	b.n	80038b6 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L7CX_STATUS_OK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3318      	adds	r3, #24
 800386e:	7afa      	ldrb	r2, [r7, #11]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fa09 	bl	8002c8a <vl53l7cx_set_ranging_frequency_hz>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <VL53L7CX_ConfigProfile+0x102>
  {
    ret = VL53L7CX_ERROR;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e017      	b.n	80038b6 <VL53L7CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951

    ret = VL53L7CX_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80038b6:	697b      	ldr	r3, [r7, #20]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <VL53L7CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigROI(VL53L7CX_Object_t *pObj, VL53L7CX_ROIConfig_t *pROIConfig)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L7CX_NOT_IMPLEMENTED;
 80038ca:	f06f 0303 	mvn.w	r3, #3
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <VL53L7CX_ConfigIT>:
  * @param pObj    vl53l7cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigIT(VL53L7CX_Object_t *pObj, VL53L7CX_ITConfig_t *pITConfig)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	72bb      	strb	r3, [r7, #10]
  static VL53L7CX_DetectionThresholds thresholds[VL53L7CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <VL53L7CX_ConfigIT+0x1a>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <VL53L7CX_ConfigIT+0x22>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80038f6:	f06f 0301 	mvn.w	r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e09f      	b.n	8003a3e <VL53L7CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L7CX_IT_DEFAULT)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2bff      	cmp	r3, #255	; 0xff
 8003904:	d113      	bne.n	800392e <VL53L7CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3318      	adds	r3, #24
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fbbd 	bl	800308c <vl53l7cx_set_detection_thresholds_enable>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	7abb      	ldrb	r3, [r7, #10]
 8003918:	4313      	orrs	r3, r2
 800391a:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 800391c:	7abb      	ldrb	r3, [r7, #10]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <VL53L7CX_ConfigIT+0x4c>
 8003922:	f04f 33ff 	mov.w	r3, #4294967295
 8003926:	e000      	b.n	800392a <VL53L7CX_ConfigIT+0x4e>
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e087      	b.n	8003a3e <VL53L7CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l7cx_get_resolution(&pObj->Dev, &res);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3318      	adds	r3, #24
 8003932:	f107 0209 	add.w	r2, r7, #9
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f8ad 	bl	8002a98 <vl53l7cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800393e:	2300      	movs	r3, #0
 8003940:	72fb      	strb	r3, [r7, #11]
 8003942:	e044      	b.n	80039ce <VL53L7CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8003944:	7afa      	ldrb	r2, [r7, #11]
 8003946:	4940      	ldr	r1, [pc, #256]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	330a      	adds	r3, #10
 8003954:	7afa      	ldrb	r2, [r7, #11]
 8003956:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L7CX_DISTANCE_MM;
 8003958:	7afa      	ldrb	r2, [r7, #11]
 800395a:	493b      	ldr	r1, [pc, #236]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	3308      	adds	r3, #8
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	7afa      	ldrb	r2, [r7, #11]
 8003972:	b2d8      	uxtb	r0, r3
 8003974:	4934      	ldr	r1, [pc, #208]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3309      	adds	r3, #9
 8003982:	4602      	mov	r2, r0
 8003984:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L7CX_OPERATION_NONE;
 8003986:	7afa      	ldrb	r2, [r7, #11]
 8003988:	492f      	ldr	r1, [pc, #188]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	330b      	adds	r3, #11
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	7afa      	ldrb	r2, [r7, #11]
 80039a0:	4618      	mov	r0, r3
 80039a2:	4929      	ldr	r1, [pc, #164]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	7afa      	ldrb	r2, [r7, #11]
 80039b6:	4618      	mov	r0, r3
 80039b8:	4923      	ldr	r1, [pc, #140]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	3304      	adds	r3, #4
 80039c6:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 80039c8:	7afb      	ldrb	r3, [r7, #11]
 80039ca:	3301      	adds	r3, #1
 80039cc:	72fb      	strb	r3, [r7, #11]
 80039ce:	7a7b      	ldrb	r3, [r7, #9]
 80039d0:	7afa      	ldrb	r2, [r7, #11]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d3b6      	bcc.n	8003944 <VL53L7CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L7CX_LAST_THRESHOLD;
 80039d6:	7afa      	ldrb	r2, [r7, #11]
 80039d8:	491b      	ldr	r1, [pc, #108]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	330a      	adds	r3, #10
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	7afa      	ldrb	r2, [r7, #11]
 80039ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ee:	b2d8      	uxtb	r0, r3
 80039f0:	4915      	ldr	r1, [pc, #84]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	330a      	adds	r3, #10
 80039fe:	4602      	mov	r2, r0
 8003a00:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l7cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3318      	adds	r3, #24
 8003a06:	4910      	ldr	r1, [pc, #64]	; (8003a48 <VL53L7CX_ConfigIT+0x16c>)
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fb85 	bl	8003118 <vl53l7cx_set_detection_thresholds>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	7abb      	ldrb	r3, [r7, #10]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3318      	adds	r3, #24
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fb34 	bl	800308c <vl53l7cx_set_detection_thresholds_enable>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	7abb      	ldrb	r3, [r7, #10]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 8003a2e:	7abb      	ldrb	r3, [r7, #10]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <VL53L7CX_ConfigIT+0x15e>
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	e000      	b.n	8003a3c <VL53L7CX_ConfigIT+0x160>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000144 	.word	0x20000144

08003a4c <VL53L7CX_GetDistance>:
  * @param pObj    vl53l7cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetDistance(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <VL53L7CX_GetDistance+0x16>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <VL53L7CX_GetDistance+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003a62:	f06f 0301 	mvn.w	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e019      	b.n	8003a9e <VL53L7CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <VL53L7CX_GetDistance+0x30>
  {
    ret = VL53L7CX_ERROR;
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e010      	b.n	8003a9e <VL53L7CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d106      	bne.n	8003a94 <VL53L7CX_GetDistance+0x48>
    {
      ret = vl53l7cx_poll_for_measurement(pObj, V53L7CX_POLL_TIMEOUT);
 8003a86:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f93a 	bl	8003d04 <vl53l7cx_poll_for_measurement>
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	e004      	b.n	8003a9e <VL53L7CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l7cx_poll_for_measurement(pObj, 0U);
 8003a94:	2100      	movs	r1, #0
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f934 	bl	8003d04 <vl53l7cx_poll_for_measurement>
 8003a9c:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L7CX_OK)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <VL53L7CX_GetDistance+0x62>
  {
    ret = vl53l7cx_get_result(pObj, pResult);
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f95f 	bl	8003d6a <vl53l7cx_get_result>
 8003aac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <VL53L7CX_Start>:
  * @param pObj    vl53l7cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Start(VL53L7CX_Object_t *pObj, uint32_t Mode)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <VL53L7CX_Start+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003ac8:	f06f 0301 	mvn.w	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e04c      	b.n	8003b6a <VL53L7CX_Start+0xb2>
  }
  else if (vl53l7cx_start_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fb79 	bl	80021cc <vl53l7cx_start_ranging>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d141      	bne.n	8003b64 <VL53L7CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L7CX_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d82f      	bhi.n	8003b54 <VL53L7CX_Start+0x9c>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <VL53L7CX_Start+0x44>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b0d 	.word	0x08003b0d
 8003b00:	08003b1f 	.word	0x08003b1f
 8003b04:	08003b31 	.word	0x08003b31
 8003b08:	08003b43 	.word	0x08003b43
    {
      case VL53L7CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 8003b1c:	e025      	b.n	8003b6a <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 8003b2e:	e01c      	b.n	8003b6a <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 8003b40:	e013      	b.n	8003b6a <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 8003b52:	e00a      	b.n	8003b6a <VL53L7CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
        ret = VL53L7CX_INVALID_PARAM;
 8003b5c:	f06f 0301 	mvn.w	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
        break;
 8003b62:	e002      	b.n	8003b6a <VL53L7CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <VL53L7CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Stop(VL53L7CX_Object_t *pObj)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <VL53L7CX_Stop+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003b82:	f06f 0301 	mvn.w	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e01a      	b.n	8003bc0 <VL53L7CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d103      	bne.n	8003b9c <VL53L7CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L7CX_ERROR;
 8003b94:	f04f 33ff 	mov.w	r3, #4294967295
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	e011      	b.n	8003bc0 <VL53L7CX_Stop+0x4c>
  }
  else if (vl53l7cx_stop_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3318      	adds	r3, #24
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fc87 	bl	80024b4 <vl53l7cx_stop_ranging>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <VL53L7CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L7CX_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e002      	b.n	8003bc0 <VL53L7CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <VL53L7CX_SetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param Address     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetAddress(VL53L7CX_Object_t *pObj, uint32_t Address)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <VL53L7CX_SetAddress+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003bda:	f06f 0301 	mvn.w	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e016      	b.n	8003c10 <VL53L7CX_SetAddress+0x46>
  }
  else if (vl53l7cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L7CX_STATUS_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3318      	adds	r3, #24
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	b292      	uxth	r2, r2
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe f9f4 	bl	8001fdc <vl53l7cx_set_i2c_address>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <VL53L7CX_SetAddress+0x38>
  {
    ret = VL53L7CX_ERROR;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e006      	b.n	8003c10 <VL53L7CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	811a      	strh	r2, [r3, #8]
    ret = VL53L7CX_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c10:	68fb      	ldr	r3, [r7, #12]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <VL53L7CX_GetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetAddress(VL53L7CX_Object_t *pObj, uint32_t *pAddress)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <VL53L7CX_GetAddress+0x16>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d103      	bne.n	8003c38 <VL53L7CX_GetAddress+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003c30:	f06f 0301 	mvn.w	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e006      	b.n	8003c46 <VL53L7CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	891b      	ldrh	r3, [r3, #8]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <VL53L7CX_SetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetPowerMode(VL53L7CX_Object_t *pObj, uint32_t PowerMode)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <VL53L7CX_SetPowerMode+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003c64:	f06f 0301 	mvn.w	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e01a      	b.n	8003ca2 <VL53L7CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L7CX_POWER_MODE_SLEEP) &&
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d006      	beq.n	8003c80 <VL53L7CX_SetPowerMode+0x2c>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d003      	beq.n	8003c80 <VL53L7CX_SetPowerMode+0x2c>
           (PowerMode != VL53L7CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003c78:	f06f 0301 	mvn.w	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e010      	b.n	8003ca2 <VL53L7CX_SetPowerMode+0x4e>
  }
  else if (vl53l7cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L7CX_STATUS_OK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3318      	adds	r3, #24
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fa1f 	bl	80020ce <vl53l7cx_set_power_mode>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <VL53L7CX_SetPowerMode+0x4a>
  {
    ret = VL53L7CX_ERROR;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e001      	b.n	8003ca2 <VL53L7CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L7CX_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <VL53L7CX_GetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetPowerMode(VL53L7CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <VL53L7CX_GetPowerMode+0x16>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <VL53L7CX_GetPowerMode+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003cc2:	f06f 0301 	mvn.w	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e017      	b.n	8003cfa <VL53L7CX_GetPowerMode+0x4e>
  }
  else if (vl53l7cx_get_power_mode(&pObj->Dev, &powermode) != VL53L7CX_STATUS_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	f107 020b 	add.w	r2, r7, #11
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe f9b7 	bl	8002048 <vl53l7cx_get_power_mode>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <VL53L7CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_ERROR;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e005      	b.n	8003cfa <VL53L7CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <vl53l7cx_poll_for_measurement>:

/** @defgroup VL53L7CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l7cx_poll_for_measurement(VL53L7CX_Object_t *pObj, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <vl53l7cx_poll_for_measurement+0x1c>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003d18:	f06f 0301 	mvn.w	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e01f      	b.n	8003d60 <vl53l7cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L7CX_TIMEOUT;
 8003d20:	f06f 0302 	mvn.w	r3, #2
 8003d24:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4798      	blx	r3
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l7cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3318      	adds	r3, #24
 8003d34:	f107 020f 	add.w	r2, r7, #15
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fc85 	bl	800264a <vl53l7cx_check_data_ready>

      if (NewDataReady == 1U)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d102      	bne.n	8003d4c <vl53l7cx_poll_for_measurement+0x48>
      {
        ret = VL53L7CX_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
        break;
 8003d4a:	e009      	b.n	8003d60 <vl53l7cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	4798      	blx	r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d8e7      	bhi.n	8003d30 <vl53l7cx_poll_for_measurement+0x2c>

  }

  return ret;
 8003d60:	697b      	ldr	r3, [r7, #20]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <vl53l7cx_get_result>:

static int32_t vl53l7cx_get_result(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8003d6a:	b590      	push	{r4, r7, lr}
 8003d6c:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d76:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003d7a:	6018      	str	r0, [r3, #0]
 8003d7c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d80:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003d84:	6019      	str	r1, [r3, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  VL53L7CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8003d86:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d8a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d006      	beq.n	8003da2 <vl53l7cx_get_result+0x38>
 8003d94:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d98:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <vl53l7cx_get_result+0x42>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003da2:	f06f 0301 	mvn.w	r3, #1
 8003da6:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003daa:	e138      	b.n	800401e <vl53l7cx_get_result+0x2b4>
  }
  else if (vl53l7cx_get_resolution(&pObj->Dev, &resolution) != VL53L7CX_STATUS_OK)
 8003dac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003db0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3318      	adds	r3, #24
 8003db8:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fe6a 	bl	8002a98 <vl53l7cx_get_resolution>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <vl53l7cx_get_result+0x6a>
  {
    ret = VL53L7CX_ERROR;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003dd2:	e124      	b.n	800401e <vl53l7cx_get_result+0x2b4>
  }
  else if (vl53l7cx_get_ranging_data(&pObj->Dev, &data) != VL53L7CX_STATUS_OK)
 8003dd4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003dd8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3318      	adds	r3, #24
 8003de0:	f107 0208 	add.w	r2, r7, #8
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fc80 	bl	80026ec <vl53l7cx_get_ranging_data>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <vl53l7cx_get_result+0x92>
  {
    ret = VL53L7CX_ERROR;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003dfa:	e110      	b.n	800401e <vl53l7cx_get_result+0x2b4>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8003dfc:	f897 33d8 	ldrb.w	r3, [r7, #984]	; 0x3d8
 8003e00:	461a      	mov	r2, r3
 8003e02:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003e06:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
 8003e14:	e0f9      	b.n	800400a <vl53l7cx_get_result+0x2a0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8003e16:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003e1a:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003e1e:	f507 7178 	add.w	r1, r7, #992	; 0x3e0
 8003e22:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8003e26:	440b      	add	r3, r1
 8003e28:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 8003e2c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003e30:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	3304      	adds	r3, #4
 8003e42:	4602      	mov	r2, r0
 8003e44:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 33da 	strb.w	r3, [r7, #986]	; 0x3da
 8003e4c:	e0ca      	b.n	8003fe4 <vl53l7cx_get_result+0x27a>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003e4e:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003e52:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003e56:	4413      	add	r3, r2
 8003e58:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003e5c:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003e60:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e6c:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003e70:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003e74:	461c      	mov	r4, r3
 8003e76:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003e7a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	4403      	add	r3, r0
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8003e8e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003e92:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d120      	bne.n	8003ee2 <vl53l7cx_get_result+0x178>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8003ea0:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003ea4:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003ea8:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003eb6:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ec6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003eca:	6819      	ldr	r1, [r3, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	4403      	add	r3, r0
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3308      	adds	r3, #8
 8003edc:	edc3 7a00 	vstr	s15, [r3]
 8003ee0:	e013      	b.n	8003f0a <vl53l7cx_get_result+0x1a0>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8003ee2:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003ee6:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003eea:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003eee:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	4403      	add	r3, r0
 8003efc:	3302      	adds	r3, #2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3308      	adds	r3, #8
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8003f0a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003f0e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d124      	bne.n	8003f66 <vl53l7cx_get_result+0x1fc>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003f1c:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003f20:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003f24:	4413      	add	r3, r2
 8003f26:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003f2a:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003f2e:	3350      	adds	r3, #80	; 0x50
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8003f36:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003f3a:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8003f46:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003f4a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	4403      	add	r3, r0
 8003f58:	3304      	adds	r3, #4
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3304      	adds	r3, #4
 8003f60:	edc3 7a00 	vstr	s15, [r3]
 8003f64:	e013      	b.n	8003f8e <vl53l7cx_get_result+0x224>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8003f66:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003f6a:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003f6e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003f72:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003f76:	6819      	ldr	r1, [r3, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4403      	add	r3, r0
 8003f80:	3304      	adds	r3, #4
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	3304      	adds	r3, #4
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003f8e:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003f92:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003f96:	4413      	add	r3, r2
 8003f98:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003f9c:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8003fa6:	f887 33d9 	strb.w	r3, [r7, #985]	; 0x3d9
        pResult->ZoneResult[i].Status[j] = vl53l7cx_map_target_status(target_status);
 8003faa:	f897 33d9 	ldrb.w	r3, [r7, #985]	; 0x3d9
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f83c 	bl	800402c <vl53l7cx_map_target_status>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003fba:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003fbe:	461c      	mov	r4, r3
 8003fc0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003fc4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003fc8:	6819      	ldr	r1, [r3, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	4403      	add	r3, r0
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003fda:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f887 33da 	strb.w	r3, [r7, #986]	; 0x3da
 8003fe4:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003fe8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003fec:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003ff6:	f897 23da 	ldrb.w	r2, [r7, #986]	; 0x3da
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	f4ff af27 	bcc.w	8003e4e <vl53l7cx_get_result+0xe4>
    for (i = 0; i < resolution; i++)
 8004000:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8004004:	3301      	adds	r3, #1
 8004006:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
 800400a:	f897 33d8 	ldrb.w	r3, [r7, #984]	; 0x3d8
 800400e:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8004012:	429a      	cmp	r2, r3
 8004014:	f4ff aeff 	bcc.w	8003e16 <vl53l7cx_get_result+0xac>
      }
    }

    ret = VL53L7CX_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
  }

  return ret;
 800401e:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
}
 8004022:	4618      	mov	r0, r3
 8004024:	f507 7779 	add.w	r7, r7, #996	; 0x3e4
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}

0800402c <vl53l7cx_map_target_status>:

static uint8_t vl53l7cx_map_target_status(uint8_t status)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d002      	beq.n	8004042 <vl53l7cx_map_target_status+0x16>
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	2b09      	cmp	r3, #9
 8004040:	d102      	bne.n	8004048 <vl53l7cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e007      	b.n	8004058 <vl53l7cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <vl53l7cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800404e:	23ff      	movs	r3, #255	; 0xff
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	e001      	b.n	8004058 <vl53l7cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d903      	bls.n	8004084 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800407c:	f06f 0301 	mvn.w	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e025      	b.n	80040d0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	79fa      	ldrb	r2, [r7, #7]
 8004088:	4914      	ldr	r1, [pc, #80]	; (80040dc <BSP_COM_Init+0x74>)
 800408a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800408e:	4814      	ldr	r0, [pc, #80]	; (80040e0 <BSP_COM_Init+0x78>)
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4403      	add	r3, r0
 800409a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800409c:	79fa      	ldrb	r2, [r7, #7]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <BSP_COM_Init+0x78>)
 80040a8:	4413      	add	r3, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f864 	bl	8004178 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80040b0:	79fa      	ldrb	r2, [r7, #7]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <BSP_COM_Init+0x78>)
 80040bc:	4413      	add	r3, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f810 	bl	80040e4 <MX_USART2_UART_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80040ca:	f06f 0303 	mvn.w	r3, #3
 80040ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80040d0:	68fb      	ldr	r3, [r7, #12]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	2000003c 	.word	0x2000003c
 80040e0:	20000444 	.word	0x20000444

080040e4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <MX_USART2_UART_Init+0x58>)
 80040f4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 460800;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80040fc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	220c      	movs	r2, #12
 8004114:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f002 fc77 	bl	8006a16 <HAL_UART_Init>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40004400 	.word	0x40004400

08004140 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <__io_putchar+0x30>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4a07      	ldr	r2, [pc, #28]	; (8004174 <__io_putchar+0x34>)
 8004158:	1898      	adds	r0, r3, r2
 800415a:	1d39      	adds	r1, r7, #4
 800415c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004160:	2201      	movs	r2, #1
 8004162:	f002 fcaf 	bl	8006ac4 <HAL_UART_Transmit>
  return ch;
 8004166:	687b      	ldr	r3, [r7, #4]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000488 	.word	0x20000488
 8004174:	20000444 	.word	0x20000444

08004178 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <USART2_MspInit+0x88>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <USART2_MspInit+0x88>)
 800418a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418e:	6413      	str	r3, [r2, #64]	; 0x40
 8004190:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <USART2_MspInit+0x88>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <USART2_MspInit+0x88>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	4a16      	ldr	r2, [pc, #88]	; (8004200 <USART2_MspInit+0x88>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6313      	str	r3, [r2, #48]	; 0x30
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <USART2_MspInit+0x88>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80041b8:	2304      	movs	r3, #4
 80041ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80041c8:	2307      	movs	r3, #7
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4619      	mov	r1, r3
 80041d2:	480c      	ldr	r0, [pc, #48]	; (8004204 <USART2_MspInit+0x8c>)
 80041d4:	f000 f9c0 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80041d8:	2308      	movs	r3, #8
 80041da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041dc:	2302      	movs	r3, #2
 80041de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e4:	2300      	movs	r3, #0
 80041e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80041e8:	2307      	movs	r3, #7
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4619      	mov	r1, r3
 80041f2:	4804      	ldr	r0, [pc, #16]	; (8004204 <USART2_MspInit+0x8c>)
 80041f4:	f000 f9b0 	bl	8004558 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80041f8:	bf00      	nop
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	40020000 	.word	0x40020000

08004208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_Init+0x40>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <HAL_Init+0x40>)
 8004212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_Init+0x40>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <HAL_Init+0x40>)
 800421e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_Init+0x40>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_Init+0x40>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004230:	2003      	movs	r0, #3
 8004232:	f000 f94f 	bl	80044d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004236:	2000      	movs	r0, #0
 8004238:	f000 f808 	bl	800424c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800423c:	f7fc fb34 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023c00 	.word	0x40023c00

0800424c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_InitTick+0x54>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_InitTick+0x58>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004262:	fbb3 f3f1 	udiv	r3, r3, r1
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f967 	bl	800453e <HAL_SYSTICK_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e00e      	b.n	8004298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d80a      	bhi.n	8004296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004280:	2200      	movs	r2, #0
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	f000 f92f 	bl	80044ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800428c:	4a06      	ldr	r2, [pc, #24]	; (80042a8 <HAL_InitTick+0x5c>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000000 	.word	0x20000000
 80042a4:	20000044 	.word	0x20000044
 80042a8:	20000040 	.word	0x20000040

080042ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_IncTick+0x20>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_IncTick+0x24>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_IncTick+0x24>)
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000044 	.word	0x20000044
 80042d0:	2000048c 	.word	0x2000048c

080042d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return uwTick;
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_GetTick+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	2000048c 	.word	0x2000048c

080042ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7ff ffee 	bl	80042d4 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d005      	beq.n	8004312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_Delay+0x44>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004312:	bf00      	nop
 8004314:	f7ff ffde 	bl	80042d4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d8f7      	bhi.n	8004314 <HAL_Delay+0x28>
  {
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000044 	.word	0x20000044

08004334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004350:	4013      	ands	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800435c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004366:	4a04      	ldr	r2, [pc, #16]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	60d3      	str	r3, [r2, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <__NVIC_GetPriorityGrouping+0x18>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 0307 	and.w	r3, r3, #7
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db0b      	blt.n	80043c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <__NVIC_EnableIRQ+0x38>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db0a      	blt.n	80043fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	490c      	ldr	r1, [pc, #48]	; (8004420 <__NVIC_SetPriority+0x4c>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440b      	add	r3, r1
 80043f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043fc:	e00a      	b.n	8004414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <__NVIC_SetPriority+0x50>)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	3b04      	subs	r3, #4
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	440b      	add	r3, r1
 8004412:	761a      	strb	r2, [r3, #24]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000e100 	.word	0xe000e100
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf28      	it	cs
 8004446:	2304      	movcs	r3, #4
 8004448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3304      	adds	r3, #4
 800444e:	2b06      	cmp	r3, #6
 8004450:	d902      	bls.n	8004458 <NVIC_EncodePriority+0x30>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3b03      	subs	r3, #3
 8004456:	e000      	b.n	800445a <NVIC_EncodePriority+0x32>
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 32ff 	mov.w	r2, #4294967295
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	401a      	ands	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	f04f 31ff 	mov.w	r1, #4294967295
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43d9      	mvns	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	4313      	orrs	r3, r2
         );
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a0:	d301      	bcc.n	80044a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00f      	b.n	80044c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <SysTick_Config+0x40>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ae:	210f      	movs	r1, #15
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	f7ff ff8e 	bl	80043d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <SysTick_Config+0x40>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <SysTick_Config+0x40>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010

080044d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff29 	bl	8004334 <__NVIC_SetPriorityGrouping>
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4603      	mov	r3, r0
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044fc:	f7ff ff3e 	bl	800437c <__NVIC_GetPriorityGrouping>
 8004500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	6978      	ldr	r0, [r7, #20]
 8004508:	f7ff ff8e 	bl	8004428 <NVIC_EncodePriority>
 800450c:	4602      	mov	r2, r0
 800450e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff5d 	bl	80043d4 <__NVIC_SetPriority>
}
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800452c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff31 	bl	8004398 <__NVIC_EnableIRQ>
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ffa2 	bl	8004490 <SysTick_Config>
 800454c:	4603      	mov	r3, r0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	; 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	e159      	b.n	8004828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004574:	2201      	movs	r2, #1
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	429a      	cmp	r2, r3
 800458e:	f040 8148 	bne.w	8004822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d005      	beq.n	80045aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d130      	bne.n	800460c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e0:	2201      	movs	r2, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 0201 	and.w	r2, r3, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b03      	cmp	r3, #3
 8004616:	d017      	beq.n	8004648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2203      	movs	r2, #3
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d123      	bne.n	800469c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	08da      	lsrs	r2, r3, #3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3208      	adds	r2, #8
 800465c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	220f      	movs	r2, #15
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	08da      	lsrs	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3208      	adds	r2, #8
 8004696:	69b9      	ldr	r1, [r7, #24]
 8004698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 0203 	and.w	r2, r3, #3
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80a2 	beq.w	8004822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	4b57      	ldr	r3, [pc, #348]	; (8004840 <HAL_GPIO_Init+0x2e8>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	4a56      	ldr	r2, [pc, #344]	; (8004840 <HAL_GPIO_Init+0x2e8>)
 80046e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ec:	6453      	str	r3, [r2, #68]	; 0x44
 80046ee:	4b54      	ldr	r3, [pc, #336]	; (8004840 <HAL_GPIO_Init+0x2e8>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046fa:	4a52      	ldr	r2, [pc, #328]	; (8004844 <HAL_GPIO_Init+0x2ec>)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	3302      	adds	r3, #2
 8004702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	220f      	movs	r2, #15
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a49      	ldr	r2, [pc, #292]	; (8004848 <HAL_GPIO_Init+0x2f0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d019      	beq.n	800475a <HAL_GPIO_Init+0x202>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a48      	ldr	r2, [pc, #288]	; (800484c <HAL_GPIO_Init+0x2f4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_GPIO_Init+0x1fe>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a47      	ldr	r2, [pc, #284]	; (8004850 <HAL_GPIO_Init+0x2f8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00d      	beq.n	8004752 <HAL_GPIO_Init+0x1fa>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a46      	ldr	r2, [pc, #280]	; (8004854 <HAL_GPIO_Init+0x2fc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <HAL_GPIO_Init+0x1f6>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a45      	ldr	r2, [pc, #276]	; (8004858 <HAL_GPIO_Init+0x300>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_GPIO_Init+0x1f2>
 8004746:	2304      	movs	r3, #4
 8004748:	e008      	b.n	800475c <HAL_GPIO_Init+0x204>
 800474a:	2307      	movs	r3, #7
 800474c:	e006      	b.n	800475c <HAL_GPIO_Init+0x204>
 800474e:	2303      	movs	r3, #3
 8004750:	e004      	b.n	800475c <HAL_GPIO_Init+0x204>
 8004752:	2302      	movs	r3, #2
 8004754:	e002      	b.n	800475c <HAL_GPIO_Init+0x204>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_GPIO_Init+0x204>
 800475a:	2300      	movs	r3, #0
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	f002 0203 	and.w	r2, r2, #3
 8004762:	0092      	lsls	r2, r2, #2
 8004764:	4093      	lsls	r3, r2
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800476c:	4935      	ldr	r1, [pc, #212]	; (8004844 <HAL_GPIO_Init+0x2ec>)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	3302      	adds	r3, #2
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800477a:	4b38      	ldr	r3, [pc, #224]	; (800485c <HAL_GPIO_Init+0x304>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800479e:	4a2f      	ldr	r2, [pc, #188]	; (800485c <HAL_GPIO_Init+0x304>)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_GPIO_Init+0x304>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047c8:	4a24      	ldr	r2, [pc, #144]	; (800485c <HAL_GPIO_Init+0x304>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ce:	4b23      	ldr	r3, [pc, #140]	; (800485c <HAL_GPIO_Init+0x304>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047f2:	4a1a      	ldr	r2, [pc, #104]	; (800485c <HAL_GPIO_Init+0x304>)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047f8:	4b18      	ldr	r3, [pc, #96]	; (800485c <HAL_GPIO_Init+0x304>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800481c:	4a0f      	ldr	r2, [pc, #60]	; (800485c <HAL_GPIO_Init+0x304>)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b0f      	cmp	r3, #15
 800482c:	f67f aea2 	bls.w	8004574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3724      	adds	r7, #36	; 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800
 8004844:	40013800 	.word	0x40013800
 8004848:	40020000 	.word	0x40020000
 800484c:	40020400 	.word	0x40020400
 8004850:	40020800 	.word	0x40020800
 8004854:	40020c00 	.word	0x40020c00
 8004858:	40021000 	.word	0x40021000
 800485c:	40013c00 	.word	0x40013c00

08004860 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e0bb      	b.n	80049f4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800487c:	2201      	movs	r2, #1
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	f040 80ab 	bne.w	80049ee <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004898:	4a5c      	ldr	r2, [pc, #368]	; (8004a0c <HAL_GPIO_DeInit+0x1ac>)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	3302      	adds	r3, #2
 80048a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	220f      	movs	r2, #15
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a54      	ldr	r2, [pc, #336]	; (8004a10 <HAL_GPIO_DeInit+0x1b0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d019      	beq.n	80048f6 <HAL_GPIO_DeInit+0x96>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a53      	ldr	r2, [pc, #332]	; (8004a14 <HAL_GPIO_DeInit+0x1b4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_GPIO_DeInit+0x92>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_GPIO_DeInit+0x1b8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00d      	beq.n	80048ee <HAL_GPIO_DeInit+0x8e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a51      	ldr	r2, [pc, #324]	; (8004a1c <HAL_GPIO_DeInit+0x1bc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <HAL_GPIO_DeInit+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a50      	ldr	r2, [pc, #320]	; (8004a20 <HAL_GPIO_DeInit+0x1c0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_GPIO_DeInit+0x86>
 80048e2:	2304      	movs	r3, #4
 80048e4:	e008      	b.n	80048f8 <HAL_GPIO_DeInit+0x98>
 80048e6:	2307      	movs	r3, #7
 80048e8:	e006      	b.n	80048f8 <HAL_GPIO_DeInit+0x98>
 80048ea:	2303      	movs	r3, #3
 80048ec:	e004      	b.n	80048f8 <HAL_GPIO_DeInit+0x98>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e002      	b.n	80048f8 <HAL_GPIO_DeInit+0x98>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_GPIO_DeInit+0x98>
 80048f6:	2300      	movs	r3, #0
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	f002 0203 	and.w	r2, r2, #3
 80048fe:	0092      	lsls	r2, r2, #2
 8004900:	4093      	lsls	r3, r2
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	d132      	bne.n	800496e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004908:	4b46      	ldr	r3, [pc, #280]	; (8004a24 <HAL_GPIO_DeInit+0x1c4>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	43db      	mvns	r3, r3
 8004910:	4944      	ldr	r1, [pc, #272]	; (8004a24 <HAL_GPIO_DeInit+0x1c4>)
 8004912:	4013      	ands	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004916:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_GPIO_DeInit+0x1c4>)
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	43db      	mvns	r3, r3
 800491e:	4941      	ldr	r1, [pc, #260]	; (8004a24 <HAL_GPIO_DeInit+0x1c4>)
 8004920:	4013      	ands	r3, r2
 8004922:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004924:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_GPIO_DeInit+0x1c4>)
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43db      	mvns	r3, r3
 800492c:	493d      	ldr	r1, [pc, #244]	; (8004a24 <HAL_GPIO_DeInit+0x1c4>)
 800492e:	4013      	ands	r3, r2
 8004930:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004932:	4b3c      	ldr	r3, [pc, #240]	; (8004a24 <HAL_GPIO_DeInit+0x1c4>)
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	43db      	mvns	r3, r3
 800493a:	493a      	ldr	r1, [pc, #232]	; (8004a24 <HAL_GPIO_DeInit+0x1c4>)
 800493c:	4013      	ands	r3, r2
 800493e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	220f      	movs	r2, #15
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004950:	4a2e      	ldr	r2, [pc, #184]	; (8004a0c <HAL_GPIO_DeInit+0x1ac>)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	3302      	adds	r3, #2
 8004958:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	43da      	mvns	r2, r3
 8004960:	482a      	ldr	r0, [pc, #168]	; (8004a0c <HAL_GPIO_DeInit+0x1ac>)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	400a      	ands	r2, r1
 8004968:	3302      	adds	r3, #2
 800496a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	2103      	movs	r1, #3
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	401a      	ands	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	220f      	movs	r2, #15
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	08d2      	lsrs	r2, r2, #3
 80049a4:	4019      	ands	r1, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3208      	adds	r2, #8
 80049aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	2103      	movs	r1, #3
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	401a      	ands	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	2101      	movs	r1, #1
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	fa01 f303 	lsl.w	r3, r1, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	401a      	ands	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2103      	movs	r1, #3
 80049e2:	fa01 f303 	lsl.w	r3, r1, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	401a      	ands	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3301      	adds	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b0f      	cmp	r3, #15
 80049f8:	f67f af40 	bls.w	800487c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40013800 	.word	0x40013800
 8004a10:	40020000 	.word	0x40020000
 8004a14:	40020400 	.word	0x40020400
 8004a18:	40020800 	.word	0x40020800
 8004a1c:	40020c00 	.word	0x40020c00
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40013c00 	.word	0x40013c00

08004a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a38:	787b      	ldrb	r3, [r7, #1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a44:	e003      	b.n	8004a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	041a      	lsls	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a72:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f002 fe34 	bl	80076e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40013c00 	.word	0x40013c00

08004a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e12b      	b.n	8004cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fb ff20 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	; 0x24
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004af0:	f001 fc46 	bl	8006380 <HAL_RCC_GetPCLK1Freq>
 8004af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4a81      	ldr	r2, [pc, #516]	; (8004d00 <HAL_I2C_Init+0x274>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d807      	bhi.n	8004b10 <HAL_I2C_Init+0x84>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a80      	ldr	r2, [pc, #512]	; (8004d04 <HAL_I2C_Init+0x278>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bf94      	ite	ls
 8004b08:	2301      	movls	r3, #1
 8004b0a:	2300      	movhi	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e006      	b.n	8004b1e <HAL_I2C_Init+0x92>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a7d      	ldr	r2, [pc, #500]	; (8004d08 <HAL_I2C_Init+0x27c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bf94      	ite	ls
 8004b18:	2301      	movls	r3, #1
 8004b1a:	2300      	movhi	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0e7      	b.n	8004cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a78      	ldr	r2, [pc, #480]	; (8004d0c <HAL_I2C_Init+0x280>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	0c9b      	lsrs	r3, r3, #18
 8004b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a6a      	ldr	r2, [pc, #424]	; (8004d00 <HAL_I2C_Init+0x274>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d802      	bhi.n	8004b60 <HAL_I2C_Init+0xd4>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	e009      	b.n	8004b74 <HAL_I2C_Init+0xe8>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	4a69      	ldr	r2, [pc, #420]	; (8004d10 <HAL_I2C_Init+0x284>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	3301      	adds	r3, #1
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	495c      	ldr	r1, [pc, #368]	; (8004d00 <HAL_I2C_Init+0x274>)
 8004b90:	428b      	cmp	r3, r1
 8004b92:	d819      	bhi.n	8004bc8 <HAL_I2C_Init+0x13c>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1e59      	subs	r1, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba2:	1c59      	adds	r1, r3, #1
 8004ba4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ba8:	400b      	ands	r3, r1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_I2C_Init+0x138>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1e59      	subs	r1, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc2:	e051      	b.n	8004c68 <HAL_I2C_Init+0x1dc>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	e04f      	b.n	8004c68 <HAL_I2C_Init+0x1dc>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d111      	bne.n	8004bf4 <HAL_I2C_Init+0x168>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1e58      	subs	r0, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6859      	ldr	r1, [r3, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	440b      	add	r3, r1
 8004bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be2:	3301      	adds	r3, #1
 8004be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	e012      	b.n	8004c1a <HAL_I2C_Init+0x18e>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1e58      	subs	r0, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6859      	ldr	r1, [r3, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	0099      	lsls	r1, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Init+0x196>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e022      	b.n	8004c68 <HAL_I2C_Init+0x1dc>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10e      	bne.n	8004c48 <HAL_I2C_Init+0x1bc>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1e58      	subs	r0, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	440b      	add	r3, r1
 8004c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	e00f      	b.n	8004c68 <HAL_I2C_Init+0x1dc>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1e58      	subs	r0, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	0099      	lsls	r1, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	6809      	ldr	r1, [r1, #0]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6911      	ldr	r1, [r2, #16]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68d2      	ldr	r2, [r2, #12]
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	000186a0 	.word	0x000186a0
 8004d04:	001e847f 	.word	0x001e847f
 8004d08:	003d08ff 	.word	0x003d08ff
 8004d0c:	431bde83 	.word	0x431bde83
 8004d10:	10624dd3 	.word	0x10624dd3

08004d14 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e021      	b.n	8004d6a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2224      	movs	r2, #36	; 0x24
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fb fe88 	bl	8000a54 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	817b      	strh	r3, [r7, #10]
 8004d86:	460b      	mov	r3, r1
 8004d88:	813b      	strh	r3, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d8e:	f7ff faa1 	bl	80042d4 <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	f040 80d9 	bne.w	8004f54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2319      	movs	r3, #25
 8004da8:	2201      	movs	r2, #1
 8004daa:	496d      	ldr	r1, [pc, #436]	; (8004f60 <HAL_I2C_Mem_Write+0x1ec>)
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fc99 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
 8004dba:	e0cc      	b.n	8004f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_I2C_Mem_Write+0x56>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e0c5      	b.n	8004f56 <HAL_I2C_Mem_Write+0x1e2>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d007      	beq.n	8004df0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2221      	movs	r2, #33	; 0x21
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2240      	movs	r2, #64	; 0x40
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4a4d      	ldr	r2, [pc, #308]	; (8004f64 <HAL_I2C_Mem_Write+0x1f0>)
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e32:	88f8      	ldrh	r0, [r7, #6]
 8004e34:	893a      	ldrh	r2, [r7, #8]
 8004e36:	8979      	ldrh	r1, [r7, #10]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4603      	mov	r3, r0
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fad0 	bl	80053e8 <I2C_RequestMemoryWrite>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d052      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e081      	b.n	8004f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fd1a 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d107      	bne.n	8004e7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e06b      	b.n	8004f56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	781a      	ldrb	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d11b      	bne.n	8004ef4 <HAL_I2C_Mem_Write+0x180>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d017      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1aa      	bne.n	8004e52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fd06 	bl	8005912 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00d      	beq.n	8004f28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d107      	bne.n	8004f24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e016      	b.n	8004f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e000      	b.n	8004f56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	00100002 	.word	0x00100002
 8004f64:	ffff0000 	.word	0xffff0000

08004f68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	817b      	strh	r3, [r7, #10]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	813b      	strh	r3, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f82:	f7ff f9a7 	bl	80042d4 <HAL_GetTick>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	f040 8208 	bne.w	80053a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2319      	movs	r3, #25
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	497b      	ldr	r1, [pc, #492]	; (800518c <HAL_I2C_Mem_Read+0x224>)
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fb9f 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
 8004fae:	e1fb      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_I2C_Mem_Read+0x56>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e1f4      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d007      	beq.n	8004fe4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2222      	movs	r2, #34	; 0x22
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2240      	movs	r2, #64	; 0x40
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a5b      	ldr	r2, [pc, #364]	; (8005190 <HAL_I2C_Mem_Read+0x228>)
 8005024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005026:	88f8      	ldrh	r0, [r7, #6]
 8005028:	893a      	ldrh	r2, [r7, #8]
 800502a:	8979      	ldrh	r1, [r7, #10]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	4603      	mov	r3, r0
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fa6c 	bl	8005514 <I2C_RequestMemoryRead>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e1b0      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d113      	bne.n	8005076 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504e:	2300      	movs	r3, #0
 8005050:	623b      	str	r3, [r7, #32]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e184      	b.n	8005380 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	2b01      	cmp	r3, #1
 800507c:	d11b      	bne.n	80050b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e164      	b.n	8005380 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d11b      	bne.n	80050f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	e144      	b.n	8005380 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800510c:	e138      	b.n	8005380 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	2b03      	cmp	r3, #3
 8005114:	f200 80f1 	bhi.w	80052fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511c:	2b01      	cmp	r3, #1
 800511e:	d123      	bne.n	8005168 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fc35 	bl	8005994 <I2C_WaitOnRXNEFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e139      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005166:	e10b      	b.n	8005380 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	2b02      	cmp	r3, #2
 800516e:	d14e      	bne.n	800520e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	2200      	movs	r2, #0
 8005178:	4906      	ldr	r1, [pc, #24]	; (8005194 <HAL_I2C_Mem_Read+0x22c>)
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fab2 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e10e      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
 800518a:	bf00      	nop
 800518c:	00100002 	.word	0x00100002
 8005190:	ffff0000 	.word	0xffff0000
 8005194:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800520c:	e0b8      	b.n	8005380 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2200      	movs	r2, #0
 8005216:	4966      	ldr	r1, [pc, #408]	; (80053b0 <HAL_I2C_Mem_Read+0x448>)
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fa63 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0bf      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	2200      	movs	r2, #0
 8005272:	494f      	ldr	r1, [pc, #316]	; (80053b0 <HAL_I2C_Mem_Read+0x448>)
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fa35 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e091      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052f8:	e042      	b.n	8005380 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fb48 	bl	8005994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e04c      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d118      	bne.n	8005380 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005384:	2b00      	cmp	r3, #0
 8005386:	f47f aec2 	bne.w	800510e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3728      	adds	r7, #40	; 0x28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	00010004 	.word	0x00010004

080053b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c2:	b2db      	uxtb	r3, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	4608      	mov	r0, r1
 80053f2:	4611      	mov	r1, r2
 80053f4:	461a      	mov	r2, r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	817b      	strh	r3, [r7, #10]
 80053fa:	460b      	mov	r3, r1
 80053fc:	813b      	strh	r3, [r7, #8]
 80053fe:	4613      	mov	r3, r2
 8005400:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	2200      	movs	r2, #0
 800541a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f960 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005438:	d103      	bne.n	8005442 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e05f      	b.n	8005506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	492d      	ldr	r1, [pc, #180]	; (8005510 <I2C_RequestMemoryWrite+0x128>)
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f998 	bl	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e04c      	b.n	8005506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	6a39      	ldr	r1, [r7, #32]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fa02 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b04      	cmp	r3, #4
 8005498:	d107      	bne.n	80054aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e02b      	b.n	8005506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]
 80054be:	e021      	b.n	8005504 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054c0:	893b      	ldrh	r3, [r7, #8]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d0:	6a39      	ldr	r1, [r7, #32]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f9dc 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d107      	bne.n	80054f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e005      	b.n	8005506 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054fa:	893b      	ldrh	r3, [r7, #8]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	00010002 	.word	0x00010002

08005514 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	461a      	mov	r2, r3
 8005522:	4603      	mov	r3, r0
 8005524:	817b      	strh	r3, [r7, #10]
 8005526:	460b      	mov	r3, r1
 8005528:	813b      	strh	r3, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800553c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800554c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	2200      	movs	r2, #0
 8005556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f8c2 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00d      	beq.n	8005582 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005574:	d103      	bne.n	800557e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e0aa      	b.n	80056d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005582:	897b      	ldrh	r3, [r7, #10]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	4952      	ldr	r1, [pc, #328]	; (80056e0 <I2C_RequestMemoryRead+0x1cc>)
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f8fa 	bl	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e097      	b.n	80056d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c0:	6a39      	ldr	r1, [r7, #32]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f964 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d107      	bne.n	80055e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e076      	b.n	80056d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d105      	bne.n	80055fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055f0:	893b      	ldrh	r3, [r7, #8]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	611a      	str	r2, [r3, #16]
 80055fa:	e021      	b.n	8005640 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055fc:	893b      	ldrh	r3, [r7, #8]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	b29b      	uxth	r3, r3
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	6a39      	ldr	r1, [r7, #32]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f93e 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	2b04      	cmp	r3, #4
 8005620:	d107      	bne.n	8005632 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e050      	b.n	80056d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005636:	893b      	ldrh	r3, [r7, #8]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005642:	6a39      	ldr	r1, [r7, #32]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f923 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00d      	beq.n	800566c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	2b04      	cmp	r3, #4
 8005656:	d107      	bne.n	8005668 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e035      	b.n	80056d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	2200      	movs	r2, #0
 8005684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f82b 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a2:	d103      	bne.n	80056ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e013      	b.n	80056d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056b0:	897b      	ldrh	r3, [r7, #10]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	6a3a      	ldr	r2, [r7, #32]
 80056c4:	4906      	ldr	r1, [pc, #24]	; (80056e0 <I2C_RequestMemoryRead+0x1cc>)
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f863 	bl	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	00010002 	.word	0x00010002

080056e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4613      	mov	r3, r2
 80056f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f4:	e025      	b.n	8005742 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d021      	beq.n	8005742 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fe fde9 	bl	80042d4 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e023      	b.n	800578a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d10d      	bne.n	8005768 <I2C_WaitOnFlagUntilTimeout+0x84>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	43da      	mvns	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	e00c      	b.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	43da      	mvns	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	429a      	cmp	r2, r3
 8005786:	d0b6      	beq.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057a0:	e051      	b.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b0:	d123      	bne.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f043 0204 	orr.w	r2, r3, #4
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e046      	b.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005800:	d021      	beq.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005802:	f7fe fd67 	bl	80042d4 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	429a      	cmp	r2, r3
 8005810:	d302      	bcc.n	8005818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d116      	bne.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f043 0220 	orr.w	r2, r3, #32
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e020      	b.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d10c      	bne.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	43da      	mvns	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4013      	ands	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	bf14      	ite	ne
 8005862:	2301      	movne	r3, #1
 8005864:	2300      	moveq	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e00b      	b.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	43da      	mvns	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d18d      	bne.n	80057a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800589c:	e02d      	b.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f8ce 	bl	8005a40 <I2C_IsAcknowledgeFailed>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e02d      	b.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d021      	beq.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b6:	f7fe fd0d 	bl	80042d4 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d116      	bne.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e007      	b.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d1ca      	bne.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800591e:	e02d      	b.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f88d 	bl	8005a40 <I2C_IsAcknowledgeFailed>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e02d      	b.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d021      	beq.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005938:	f7fe fccc 	bl	80042d4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	d302      	bcc.n	800594e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d116      	bne.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	f043 0220 	orr.w	r2, r3, #32
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e007      	b.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b04      	cmp	r3, #4
 8005988:	d1ca      	bne.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059a0:	e042      	b.n	8005a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d119      	bne.n	80059e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0210 	mvn.w	r2, #16
 80059b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e029      	b.n	8005a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e4:	f7fe fc76 	bl	80042d4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d116      	bne.n	8005a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e007      	b.n	8005a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d1b5      	bne.n	80059a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a56:	d11b      	bne.n	8005a90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f043 0204 	orr.w	r2, r3, #4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e267      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d075      	beq.n	8005baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005abe:	4b88      	ldr	r3, [pc, #544]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aca:	4b85      	ldr	r3, [pc, #532]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d112      	bne.n	8005afc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ad6:	4b82      	ldr	r3, [pc, #520]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae2:	d10b      	bne.n	8005afc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae4:	4b7e      	ldr	r3, [pc, #504]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05b      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x108>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d157      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e242      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d106      	bne.n	8005b14 <HAL_RCC_OscConfig+0x74>
 8005b06:	4b76      	ldr	r3, [pc, #472]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a75      	ldr	r2, [pc, #468]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e01d      	b.n	8005b50 <HAL_RCC_OscConfig+0xb0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RCC_OscConfig+0x98>
 8005b1e:	4b70      	ldr	r3, [pc, #448]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a6f      	ldr	r2, [pc, #444]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	4b6d      	ldr	r3, [pc, #436]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a6c      	ldr	r2, [pc, #432]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e00b      	b.n	8005b50 <HAL_RCC_OscConfig+0xb0>
 8005b38:	4b69      	ldr	r3, [pc, #420]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a68      	ldr	r2, [pc, #416]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	4b66      	ldr	r3, [pc, #408]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a65      	ldr	r2, [pc, #404]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d013      	beq.n	8005b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b58:	f7fe fbbc 	bl	80042d4 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b60:	f7fe fbb8 	bl	80042d4 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b64      	cmp	r3, #100	; 0x64
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e207      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b72:	4b5b      	ldr	r3, [pc, #364]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0xc0>
 8005b7e:	e014      	b.n	8005baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fe fba8 	bl	80042d4 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b88:	f7fe fba4 	bl	80042d4 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b64      	cmp	r3, #100	; 0x64
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e1f3      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9a:	4b51      	ldr	r3, [pc, #324]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0xe8>
 8005ba6:	e000      	b.n	8005baa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d063      	beq.n	8005c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bb6:	4b4a      	ldr	r3, [pc, #296]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d11c      	bne.n	8005c08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bce:	4b44      	ldr	r3, [pc, #272]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d116      	bne.n	8005c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bda:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x152>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d001      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e1c7      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf2:	4b3b      	ldr	r3, [pc, #236]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4937      	ldr	r1, [pc, #220]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c06:	e03a      	b.n	8005c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d020      	beq.n	8005c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c10:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <HAL_RCC_OscConfig+0x244>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c16:	f7fe fb5d 	bl	80042d4 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c1e:	f7fe fb59 	bl	80042d4 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e1a8      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c30:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3c:	4b28      	ldr	r3, [pc, #160]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4925      	ldr	r1, [pc, #148]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	600b      	str	r3, [r1, #0]
 8005c50:	e015      	b.n	8005c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c52:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <HAL_RCC_OscConfig+0x244>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fe fb3c 	bl	80042d4 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c60:	f7fe fb38 	bl	80042d4 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e187      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c72:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d036      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d016      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <HAL_RCC_OscConfig+0x248>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c98:	f7fe fb1c 	bl	80042d4 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca0:	f7fe fb18 	bl	80042d4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e167      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x200>
 8005cbe:	e01b      	b.n	8005cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_RCC_OscConfig+0x248>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc6:	f7fe fb05 	bl	80042d4 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ccc:	e00e      	b.n	8005cec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cce:	f7fe fb01 	bl	80042d4 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d907      	bls.n	8005cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e150      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	42470000 	.word	0x42470000
 8005ce8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cec:	4b88      	ldr	r3, [pc, #544]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1ea      	bne.n	8005cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8097 	beq.w	8005e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0a:	4b81      	ldr	r3, [pc, #516]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10f      	bne.n	8005d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	2300      	movs	r3, #0
 8005d18:	60bb      	str	r3, [r7, #8]
 8005d1a:	4b7d      	ldr	r3, [pc, #500]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	4a7c      	ldr	r2, [pc, #496]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6413      	str	r3, [r2, #64]	; 0x40
 8005d26:	4b7a      	ldr	r3, [pc, #488]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d32:	2301      	movs	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d36:	4b77      	ldr	r3, [pc, #476]	; (8005f14 <HAL_RCC_OscConfig+0x474>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d118      	bne.n	8005d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d42:	4b74      	ldr	r3, [pc, #464]	; (8005f14 <HAL_RCC_OscConfig+0x474>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a73      	ldr	r2, [pc, #460]	; (8005f14 <HAL_RCC_OscConfig+0x474>)
 8005d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d4e:	f7fe fac1 	bl	80042d4 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d56:	f7fe fabd 	bl	80042d4 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e10c      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d68:	4b6a      	ldr	r3, [pc, #424]	; (8005f14 <HAL_RCC_OscConfig+0x474>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d106      	bne.n	8005d8a <HAL_RCC_OscConfig+0x2ea>
 8005d7c:	4b64      	ldr	r3, [pc, #400]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	4a63      	ldr	r2, [pc, #396]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	6713      	str	r3, [r2, #112]	; 0x70
 8005d88:	e01c      	b.n	8005dc4 <HAL_RCC_OscConfig+0x324>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b05      	cmp	r3, #5
 8005d90:	d10c      	bne.n	8005dac <HAL_RCC_OscConfig+0x30c>
 8005d92:	4b5f      	ldr	r3, [pc, #380]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	4a5e      	ldr	r2, [pc, #376]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005d98:	f043 0304 	orr.w	r3, r3, #4
 8005d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9e:	4b5c      	ldr	r3, [pc, #368]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	4a5b      	ldr	r2, [pc, #364]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	6713      	str	r3, [r2, #112]	; 0x70
 8005daa:	e00b      	b.n	8005dc4 <HAL_RCC_OscConfig+0x324>
 8005dac:	4b58      	ldr	r3, [pc, #352]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	4a57      	ldr	r2, [pc, #348]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	6713      	str	r3, [r2, #112]	; 0x70
 8005db8:	4b55      	ldr	r3, [pc, #340]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	4a54      	ldr	r2, [pc, #336]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005dbe:	f023 0304 	bic.w	r3, r3, #4
 8005dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d015      	beq.n	8005df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dcc:	f7fe fa82 	bl	80042d4 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd4:	f7fe fa7e 	bl	80042d4 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0cb      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dea:	4b49      	ldr	r3, [pc, #292]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0ee      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x334>
 8005df6:	e014      	b.n	8005e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df8:	f7fe fa6c 	bl	80042d4 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dfe:	e00a      	b.n	8005e16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e00:	f7fe fa68 	bl	80042d4 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e0b5      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e16:	4b3e      	ldr	r3, [pc, #248]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1ee      	bne.n	8005e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d105      	bne.n	8005e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e28:	4b39      	ldr	r3, [pc, #228]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	4a38      	ldr	r2, [pc, #224]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80a1 	beq.w	8005f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e3e:	4b34      	ldr	r3, [pc, #208]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 030c 	and.w	r3, r3, #12
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d05c      	beq.n	8005f04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d141      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e52:	4b31      	ldr	r3, [pc, #196]	; (8005f18 <HAL_RCC_OscConfig+0x478>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fe fa3c 	bl	80042d4 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fe fa38 	bl	80042d4 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e087      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e72:	4b27      	ldr	r3, [pc, #156]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69da      	ldr	r2, [r3, #28]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	019b      	lsls	r3, r3, #6
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	3b01      	subs	r3, #1
 8005e98:	041b      	lsls	r3, r3, #16
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	061b      	lsls	r3, r3, #24
 8005ea2:	491b      	ldr	r1, [pc, #108]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <HAL_RCC_OscConfig+0x478>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eae:	f7fe fa11 	bl	80042d4 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eb6:	f7fe fa0d 	bl	80042d4 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e05c      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec8:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x416>
 8005ed4:	e054      	b.n	8005f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <HAL_RCC_OscConfig+0x478>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005edc:	f7fe f9fa 	bl	80042d4 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee4:	f7fe f9f6 	bl	80042d4 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e045      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_OscConfig+0x470>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x444>
 8005f02:	e03d      	b.n	8005f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e038      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
 8005f10:	40023800 	.word	0x40023800
 8005f14:	40007000 	.word	0x40007000
 8005f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <HAL_RCC_OscConfig+0x4ec>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d028      	beq.n	8005f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d121      	bne.n	8005f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d11a      	bne.n	8005f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d111      	bne.n	8005f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	3b01      	subs	r3, #1
 8005f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40023800 	.word	0x40023800

08005f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0cc      	b.n	800613e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa4:	4b68      	ldr	r3, [pc, #416]	; (8006148 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d90c      	bls.n	8005fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb2:	4b65      	ldr	r3, [pc, #404]	; (8006148 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fba:	4b63      	ldr	r3, [pc, #396]	; (8006148 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0b8      	b.n	800613e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d020      	beq.n	800601a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fe4:	4b59      	ldr	r3, [pc, #356]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	4a58      	ldr	r2, [pc, #352]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ffc:	4b53      	ldr	r3, [pc, #332]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	4a52      	ldr	r2, [pc, #328]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006008:	4b50      	ldr	r3, [pc, #320]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	494d      	ldr	r1, [pc, #308]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d044      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d107      	bne.n	800603e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	4b47      	ldr	r3, [pc, #284]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d119      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e07f      	b.n	800613e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d003      	beq.n	800604e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800604a:	2b03      	cmp	r3, #3
 800604c:	d107      	bne.n	800605e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604e:	4b3f      	ldr	r3, [pc, #252]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e06f      	b.n	800613e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605e:	4b3b      	ldr	r3, [pc, #236]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e067      	b.n	800613e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800606e:	4b37      	ldr	r3, [pc, #220]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f023 0203 	bic.w	r2, r3, #3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4934      	ldr	r1, [pc, #208]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	4313      	orrs	r3, r2
 800607e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006080:	f7fe f928 	bl	80042d4 <HAL_GetTick>
 8006084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006086:	e00a      	b.n	800609e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006088:	f7fe f924 	bl	80042d4 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	; 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e04f      	b.n	800613e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609e:	4b2b      	ldr	r3, [pc, #172]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 020c 	and.w	r2, r3, #12
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1eb      	bne.n	8006088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b0:	4b25      	ldr	r3, [pc, #148]	; (8006148 <HAL_RCC_ClockConfig+0x1b8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d20c      	bcs.n	80060d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b22      	ldr	r3, [pc, #136]	; (8006148 <HAL_RCC_ClockConfig+0x1b8>)
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c6:	4b20      	ldr	r3, [pc, #128]	; (8006148 <HAL_RCC_ClockConfig+0x1b8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e032      	b.n	800613e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e4:	4b19      	ldr	r3, [pc, #100]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4916      	ldr	r1, [pc, #88]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	490e      	ldr	r1, [pc, #56]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006116:	f000 f821 	bl	800615c <HAL_RCC_GetSysClockFreq>
 800611a:	4602      	mov	r2, r0
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	490a      	ldr	r1, [pc, #40]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8006128:	5ccb      	ldrb	r3, [r1, r3]
 800612a:	fa22 f303 	lsr.w	r3, r2, r3
 800612e:	4a09      	ldr	r2, [pc, #36]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_RCC_ClockConfig+0x1c8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe f888 	bl	800424c <HAL_InitTick>

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40023c00 	.word	0x40023c00
 800614c:	40023800 	.word	0x40023800
 8006150:	08008e30 	.word	0x08008e30
 8006154:	20000000 	.word	0x20000000
 8006158:	20000040 	.word	0x20000040

0800615c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800615c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006160:	b094      	sub	sp, #80	; 0x50
 8006162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	647b      	str	r3, [r7, #68]	; 0x44
 8006168:	2300      	movs	r3, #0
 800616a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800616c:	2300      	movs	r3, #0
 800616e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006174:	4b79      	ldr	r3, [pc, #484]	; (800635c <HAL_RCC_GetSysClockFreq+0x200>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 030c 	and.w	r3, r3, #12
 800617c:	2b08      	cmp	r3, #8
 800617e:	d00d      	beq.n	800619c <HAL_RCC_GetSysClockFreq+0x40>
 8006180:	2b08      	cmp	r3, #8
 8006182:	f200 80e1 	bhi.w	8006348 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0x34>
 800618a:	2b04      	cmp	r3, #4
 800618c:	d003      	beq.n	8006196 <HAL_RCC_GetSysClockFreq+0x3a>
 800618e:	e0db      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006190:	4b73      	ldr	r3, [pc, #460]	; (8006360 <HAL_RCC_GetSysClockFreq+0x204>)
 8006192:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006194:	e0db      	b.n	800634e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006196:	4b73      	ldr	r3, [pc, #460]	; (8006364 <HAL_RCC_GetSysClockFreq+0x208>)
 8006198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800619a:	e0d8      	b.n	800634e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800619c:	4b6f      	ldr	r3, [pc, #444]	; (800635c <HAL_RCC_GetSysClockFreq+0x200>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061a6:	4b6d      	ldr	r3, [pc, #436]	; (800635c <HAL_RCC_GetSysClockFreq+0x200>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d063      	beq.n	800627a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061b2:	4b6a      	ldr	r3, [pc, #424]	; (800635c <HAL_RCC_GetSysClockFreq+0x200>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	099b      	lsrs	r3, r3, #6
 80061b8:	2200      	movs	r2, #0
 80061ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80061bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c4:	633b      	str	r3, [r7, #48]	; 0x30
 80061c6:	2300      	movs	r3, #0
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061ce:	4622      	mov	r2, r4
 80061d0:	462b      	mov	r3, r5
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	0159      	lsls	r1, r3, #5
 80061dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061e0:	0150      	lsls	r0, r2, #5
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4621      	mov	r1, r4
 80061e8:	1a51      	subs	r1, r2, r1
 80061ea:	6139      	str	r1, [r7, #16]
 80061ec:	4629      	mov	r1, r5
 80061ee:	eb63 0301 	sbc.w	r3, r3, r1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006200:	4659      	mov	r1, fp
 8006202:	018b      	lsls	r3, r1, #6
 8006204:	4651      	mov	r1, sl
 8006206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800620a:	4651      	mov	r1, sl
 800620c:	018a      	lsls	r2, r1, #6
 800620e:	4651      	mov	r1, sl
 8006210:	ebb2 0801 	subs.w	r8, r2, r1
 8006214:	4659      	mov	r1, fp
 8006216:	eb63 0901 	sbc.w	r9, r3, r1
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800622a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800622e:	4690      	mov	r8, r2
 8006230:	4699      	mov	r9, r3
 8006232:	4623      	mov	r3, r4
 8006234:	eb18 0303 	adds.w	r3, r8, r3
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	462b      	mov	r3, r5
 800623c:	eb49 0303 	adc.w	r3, r9, r3
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800624e:	4629      	mov	r1, r5
 8006250:	024b      	lsls	r3, r1, #9
 8006252:	4621      	mov	r1, r4
 8006254:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006258:	4621      	mov	r1, r4
 800625a:	024a      	lsls	r2, r1, #9
 800625c:	4610      	mov	r0, r2
 800625e:	4619      	mov	r1, r3
 8006260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006262:	2200      	movs	r2, #0
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
 8006266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800626c:	f7fa f808 	bl	8000280 <__aeabi_uldivmod>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4613      	mov	r3, r2
 8006276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006278:	e058      	b.n	800632c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800627a:	4b38      	ldr	r3, [pc, #224]	; (800635c <HAL_RCC_GetSysClockFreq+0x200>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	099b      	lsrs	r3, r3, #6
 8006280:	2200      	movs	r2, #0
 8006282:	4618      	mov	r0, r3
 8006284:	4611      	mov	r1, r2
 8006286:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800628a:	623b      	str	r3, [r7, #32]
 800628c:	2300      	movs	r3, #0
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006294:	4642      	mov	r2, r8
 8006296:	464b      	mov	r3, r9
 8006298:	f04f 0000 	mov.w	r0, #0
 800629c:	f04f 0100 	mov.w	r1, #0
 80062a0:	0159      	lsls	r1, r3, #5
 80062a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062a6:	0150      	lsls	r0, r2, #5
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4641      	mov	r1, r8
 80062ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80062b2:	4649      	mov	r1, r9
 80062b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062cc:	ebb2 040a 	subs.w	r4, r2, sl
 80062d0:	eb63 050b 	sbc.w	r5, r3, fp
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	00eb      	lsls	r3, r5, #3
 80062de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062e2:	00e2      	lsls	r2, r4, #3
 80062e4:	4614      	mov	r4, r2
 80062e6:	461d      	mov	r5, r3
 80062e8:	4643      	mov	r3, r8
 80062ea:	18e3      	adds	r3, r4, r3
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	464b      	mov	r3, r9
 80062f0:	eb45 0303 	adc.w	r3, r5, r3
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006302:	4629      	mov	r1, r5
 8006304:	028b      	lsls	r3, r1, #10
 8006306:	4621      	mov	r1, r4
 8006308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800630c:	4621      	mov	r1, r4
 800630e:	028a      	lsls	r2, r1, #10
 8006310:	4610      	mov	r0, r2
 8006312:	4619      	mov	r1, r3
 8006314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006316:	2200      	movs	r2, #0
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	61fa      	str	r2, [r7, #28]
 800631c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006320:	f7f9 ffae 	bl	8000280 <__aeabi_uldivmod>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4613      	mov	r3, r2
 800632a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <HAL_RCC_GetSysClockFreq+0x200>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	3301      	adds	r3, #1
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800633c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800633e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006340:	fbb2 f3f3 	udiv	r3, r2, r3
 8006344:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006346:	e002      	b.n	800634e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_RCC_GetSysClockFreq+0x204>)
 800634a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800634c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800634e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006350:	4618      	mov	r0, r3
 8006352:	3750      	adds	r7, #80	; 0x50
 8006354:	46bd      	mov	sp, r7
 8006356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800635a:	bf00      	nop
 800635c:	40023800 	.word	0x40023800
 8006360:	00f42400 	.word	0x00f42400
 8006364:	007a1200 	.word	0x007a1200

08006368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <HAL_RCC_GetHCLKFreq+0x14>)
 800636e:	681b      	ldr	r3, [r3, #0]
}
 8006370:	4618      	mov	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000000 	.word	0x20000000

08006380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006384:	f7ff fff0 	bl	8006368 <HAL_RCC_GetHCLKFreq>
 8006388:	4602      	mov	r2, r0
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	0a9b      	lsrs	r3, r3, #10
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	4903      	ldr	r1, [pc, #12]	; (80063a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006396:	5ccb      	ldrb	r3, [r1, r3]
 8006398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40023800 	.word	0x40023800
 80063a4:	08008e40 	.word	0x08008e40

080063a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063ac:	f7ff ffdc 	bl	8006368 <HAL_RCC_GetHCLKFreq>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	0b5b      	lsrs	r3, r3, #13
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	4903      	ldr	r1, [pc, #12]	; (80063cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80063be:	5ccb      	ldrb	r3, [r1, r3]
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40023800 	.word	0x40023800
 80063cc:	08008e40 	.word	0x08008e40

080063d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d035      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063f8:	4b67      	ldr	r3, [pc, #412]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063fe:	f7fd ff69 	bl	80042d4 <HAL_GetTick>
 8006402:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006404:	e008      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006406:	f7fd ff65 	bl	80042d4 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e0ba      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006418:	4b60      	ldr	r3, [pc, #384]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f0      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	019a      	lsls	r2, r3, #6
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	071b      	lsls	r3, r3, #28
 8006430:	495a      	ldr	r1, [pc, #360]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006438:	4b57      	ldr	r3, [pc, #348]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800643a:	2201      	movs	r2, #1
 800643c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800643e:	f7fd ff49 	bl	80042d4 <HAL_GetTick>
 8006442:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006444:	e008      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006446:	f7fd ff45 	bl	80042d4 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e09a      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006458:	4b50      	ldr	r3, [pc, #320]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0f0      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8083 	beq.w	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	4b49      	ldr	r3, [pc, #292]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	4a48      	ldr	r2, [pc, #288]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800647c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006480:	6413      	str	r3, [r2, #64]	; 0x40
 8006482:	4b46      	ldr	r3, [pc, #280]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800648e:	4b44      	ldr	r3, [pc, #272]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a43      	ldr	r2, [pc, #268]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006498:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800649a:	f7fd ff1b 	bl	80042d4 <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064a0:	e008      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064a2:	f7fd ff17 	bl	80042d4 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e06c      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064b4:	4b3a      	ldr	r3, [pc, #232]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0f0      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064c0:	4b36      	ldr	r3, [pc, #216]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d02f      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d028      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064de:	4b2f      	ldr	r3, [pc, #188]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064e8:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064ee:	4b2d      	ldr	r3, [pc, #180]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064f4:	4a29      	ldr	r2, [pc, #164]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064fa:	4b28      	ldr	r3, [pc, #160]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d114      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006506:	f7fd fee5 	bl	80042d4 <HAL_GetTick>
 800650a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650c:	e00a      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650e:	f7fd fee1 	bl	80042d4 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f241 3288 	movw	r2, #5000	; 0x1388
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e034      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006524:	4b1d      	ldr	r3, [pc, #116]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0ee      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653c:	d10d      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800653e:	4b17      	ldr	r3, [pc, #92]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800654e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006552:	4912      	ldr	r1, [pc, #72]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006554:	4313      	orrs	r3, r2
 8006556:	608b      	str	r3, [r1, #8]
 8006558:	e005      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	4a0f      	ldr	r2, [pc, #60]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006560:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006564:	6093      	str	r3, [r2, #8]
 8006566:	4b0d      	ldr	r3, [pc, #52]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006568:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006572:	490a      	ldr	r1, [pc, #40]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006574:	4313      	orrs	r3, r2
 8006576:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	7c1a      	ldrb	r2, [r3, #16]
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800658a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	42470068 	.word	0x42470068
 800659c:	40023800 	.word	0x40023800
 80065a0:	40007000 	.word	0x40007000
 80065a4:	42470e40 	.word	0x42470e40
 80065a8:	424711e0 	.word	0x424711e0

080065ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e066      	b.n	8006690 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7f5b      	ldrb	r3, [r3, #29]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fa fa7a 	bl	8000acc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	22ca      	movs	r2, #202	; 0xca
 80065e4:	625a      	str	r2, [r3, #36]	; 0x24
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2253      	movs	r2, #83	; 0x53
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f998 	bl	8006924 <RTC_EnterInitMode>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d12c      	bne.n	8006658 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6899      	ldr	r1, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68d2      	ldr	r2, [r2, #12]
 8006638:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6919      	ldr	r1, [r3, #16]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	041a      	lsls	r2, r3, #16
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f99f 	bl	8006992 <RTC_ExitInitMode>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d113      	bne.n	8006686 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800666c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	22ff      	movs	r2, #255	; 0xff
 800668c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	7f1b      	ldrb	r3, [r3, #28]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_RTC_SetTime+0x1c>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e087      	b.n	80067c4 <HAL_RTC_SetTime+0x12c>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2202      	movs	r2, #2
 80066be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d126      	bne.n	8006714 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f97c 	bl	80069dc <RTC_ByteToBcd2>
 80066e4:	4603      	mov	r3, r0
 80066e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f975 	bl	80069dc <RTC_ByteToBcd2>
 80066f2:	4603      	mov	r3, r0
 80066f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	789b      	ldrb	r3, [r3, #2]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f96d 	bl	80069dc <RTC_ByteToBcd2>
 8006702:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006704:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e018      	b.n	8006746 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006734:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800673a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	78db      	ldrb	r3, [r3, #3]
 8006740:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	22ca      	movs	r2, #202	; 0xca
 800674c:	625a      	str	r2, [r3, #36]	; 0x24
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2253      	movs	r2, #83	; 0x53
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f8e4 	bl	8006924 <RTC_EnterInitMode>
 800675c:	4603      	mov	r3, r0
 800675e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006760:	7cfb      	ldrb	r3, [r7, #19]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d120      	bne.n	80067a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006770:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006774:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006784:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6899      	ldr	r1, [r3, #8]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f8f7 	bl	8006992 <RTC_ExitInitMode>
 80067a4:	4603      	mov	r3, r0
 80067a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80067a8:	7cfb      	ldrb	r3, [r7, #19]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	22ff      	movs	r2, #255	; 0xff
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	771a      	strb	r2, [r3, #28]

  return status;
 80067c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd90      	pop	{r4, r7, pc}

080067cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80067cc:	b590      	push	{r4, r7, lr}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	7f1b      	ldrb	r3, [r3, #28]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_RTC_SetDate+0x1c>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e071      	b.n	80068cc <HAL_RTC_SetDate+0x100>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2202      	movs	r2, #2
 80067f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10e      	bne.n	8006818 <HAL_RTC_SetDate+0x4c>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	f023 0310 	bic.w	r3, r3, #16
 800680e:	b2db      	uxtb	r3, r3
 8006810:	330a      	adds	r3, #10
 8006812:	b2da      	uxtb	r2, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d11c      	bne.n	8006858 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	78db      	ldrb	r3, [r3, #3]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 f8da 	bl	80069dc <RTC_ByteToBcd2>
 8006828:	4603      	mov	r3, r0
 800682a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f8d3 	bl	80069dc <RTC_ByteToBcd2>
 8006836:	4603      	mov	r3, r0
 8006838:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800683a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	789b      	ldrb	r3, [r3, #2]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f8cb 	bl	80069dc <RTC_ByteToBcd2>
 8006846:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006848:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	e00e      	b.n	8006876 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	78db      	ldrb	r3, [r3, #3]
 800685c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006864:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800686a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	22ca      	movs	r2, #202	; 0xca
 800687c:	625a      	str	r2, [r3, #36]	; 0x24
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2253      	movs	r2, #83	; 0x53
 8006884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f84c 	bl	8006924 <RTC_EnterInitMode>
 800688c:	4603      	mov	r3, r0
 800688e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006890:	7cfb      	ldrb	r3, [r7, #19]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10c      	bne.n	80068b0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80068a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 f873 	bl	8006992 <RTC_ExitInitMode>
 80068ac:	4603      	mov	r3, r0
 80068ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80068b0:	7cfb      	ldrb	r3, [r7, #19]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	771a      	strb	r2, [r3, #28]

  return status;
 80068ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd90      	pop	{r4, r7, pc}

080068d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068f0:	f7fd fcf0 	bl	80042d4 <HAL_GetTick>
 80068f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068f6:	e009      	b.n	800690c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068f8:	f7fd fcec 	bl	80042d4 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006906:	d901      	bls.n	800690c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e007      	b.n	800691c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0ee      	beq.n	80068f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d122      	bne.n	8006988 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006950:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006952:	f7fd fcbf 	bl	80042d4 <HAL_GetTick>
 8006956:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006958:	e00c      	b.n	8006974 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800695a:	f7fd fcbb 	bl	80042d4 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006968:	d904      	bls.n	8006974 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2204      	movs	r2, #4
 800696e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <RTC_EnterInitMode+0x64>
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d1e8      	bne.n	800695a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ff89 	bl	80068d4 <HAL_RTC_WaitForSynchro>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2204      	movs	r2, #4
 80069cc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80069ea:	e005      	b.n	80069f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	3301      	adds	r3, #1
 80069f0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	3b0a      	subs	r3, #10
 80069f6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80069f8:	79fb      	ldrb	r3, [r7, #7]
 80069fa:	2b09      	cmp	r3, #9
 80069fc:	d8f6      	bhi.n	80069ec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	b2db      	uxtb	r3, r3
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e03f      	b.n	8006aa8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f837 	bl	8006ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2224      	movs	r2, #36	; 0x24
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9d4 	bl	8006e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d17c      	bne.n	8006bde <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_UART_Transmit+0x2c>
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e075      	b.n	8006be0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_UART_Transmit+0x3e>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e06e      	b.n	8006be0 <HAL_UART_Transmit+0x11c>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2221      	movs	r2, #33	; 0x21
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b18:	f7fd fbdc 	bl	80042d4 <HAL_GetTick>
 8006b1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	88fa      	ldrh	r2, [r7, #6]
 8006b28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b32:	d108      	bne.n	8006b46 <HAL_UART_Transmit+0x82>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e003      	b.n	8006b4e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b56:	e02a      	b.n	8006bae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2180      	movs	r1, #128	; 0x80
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f8e2 	bl	8006d2c <UART_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e036      	b.n	8006be0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10b      	bne.n	8006b90 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b86:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	e007      	b.n	8006ba0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1cf      	bne.n	8006b58 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2140      	movs	r1, #64	; 0x40
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f8b2 	bl	8006d2c <UART_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e006      	b.n	8006be0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e000      	b.n	8006be0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bde:	2302      	movs	r3, #2
  }
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	f040 808c 	bne.w	8006d22 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_UART_Receive+0x2e>
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e084      	b.n	8006d24 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_UART_Receive+0x40>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e07d      	b.n	8006d24 <HAL_UART_Receive+0x13c>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2222      	movs	r2, #34	; 0x22
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c44:	f7fd fb46 	bl	80042d4 <HAL_GetTick>
 8006c48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	88fa      	ldrh	r2, [r7, #6]
 8006c4e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5e:	d108      	bne.n	8006c72 <HAL_UART_Receive+0x8a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d104      	bne.n	8006c72 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	e003      	b.n	8006c7a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006c82:	e043      	b.n	8006d0c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2120      	movs	r1, #32
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f84c 	bl	8006d2c <UART_WaitOnFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e042      	b.n	8006d24 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10c      	bne.n	8006cbe <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	3302      	adds	r3, #2
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e01f      	b.n	8006cfe <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc6:	d007      	beq.n	8006cd8 <HAL_UART_Receive+0xf0>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <HAL_UART_Receive+0xfe>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	e008      	b.n	8006cf8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1b6      	bne.n	8006c84 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e000      	b.n	8006d24 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006d22:	2302      	movs	r3, #2
  }
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3720      	adds	r7, #32
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b090      	sub	sp, #64	; 0x40
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d3c:	e050      	b.n	8006de0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d04c      	beq.n	8006de0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d4c:	f7fd fac2 	bl	80042d4 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d241      	bcs.n	8006de0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	330c      	adds	r3, #12
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d7c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e5      	bne.n	8006d5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3314      	adds	r3, #20
 8006d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f023 0301 	bic.w	r3, r3, #1
 8006da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3314      	adds	r3, #20
 8006dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db0:	623a      	str	r2, [r7, #32]
 8006db2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	69f9      	ldr	r1, [r7, #28]
 8006db6:	6a3a      	ldr	r2, [r7, #32]
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e5      	bne.n	8006d90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e00f      	b.n	8006e00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	4013      	ands	r3, r2
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	bf0c      	ite	eq
 8006df0:	2301      	moveq	r3, #1
 8006df2:	2300      	movne	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d09f      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3740      	adds	r7, #64	; 0x40
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e0c:	b0c0      	sub	sp, #256	; 0x100
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e24:	68d9      	ldr	r1, [r3, #12]
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	ea40 0301 	orr.w	r3, r0, r1
 8006e30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e60:	f021 010c 	bic.w	r1, r1, #12
 8006e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e82:	6999      	ldr	r1, [r3, #24]
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	ea40 0301 	orr.w	r3, r0, r1
 8006e8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b8f      	ldr	r3, [pc, #572]	; (80070d4 <UART_SetConfig+0x2cc>)
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d005      	beq.n	8006ea8 <UART_SetConfig+0xa0>
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b8d      	ldr	r3, [pc, #564]	; (80070d8 <UART_SetConfig+0x2d0>)
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d104      	bne.n	8006eb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ea8:	f7ff fa7e 	bl	80063a8 <HAL_RCC_GetPCLK2Freq>
 8006eac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006eb0:	e003      	b.n	8006eba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006eb2:	f7ff fa65 	bl	8006380 <HAL_RCC_GetPCLK1Freq>
 8006eb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec4:	f040 810c 	bne.w	80070e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ed2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ed6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006eda:	4622      	mov	r2, r4
 8006edc:	462b      	mov	r3, r5
 8006ede:	1891      	adds	r1, r2, r2
 8006ee0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ee2:	415b      	adcs	r3, r3
 8006ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006eea:	4621      	mov	r1, r4
 8006eec:	eb12 0801 	adds.w	r8, r2, r1
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	eb43 0901 	adc.w	r9, r3, r1
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f0a:	4690      	mov	r8, r2
 8006f0c:	4699      	mov	r9, r3
 8006f0e:	4623      	mov	r3, r4
 8006f10:	eb18 0303 	adds.w	r3, r8, r3
 8006f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f18:	462b      	mov	r3, r5
 8006f1a:	eb49 0303 	adc.w	r3, r9, r3
 8006f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f36:	460b      	mov	r3, r1
 8006f38:	18db      	adds	r3, r3, r3
 8006f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	eb42 0303 	adc.w	r3, r2, r3
 8006f42:	657b      	str	r3, [r7, #84]	; 0x54
 8006f44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f4c:	f7f9 f998 	bl	8000280 <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4b61      	ldr	r3, [pc, #388]	; (80070dc <UART_SetConfig+0x2d4>)
 8006f56:	fba3 2302 	umull	r2, r3, r3, r2
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	011c      	lsls	r4, r3, #4
 8006f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	1891      	adds	r1, r2, r2
 8006f76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f78:	415b      	adcs	r3, r3
 8006f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f80:	4641      	mov	r1, r8
 8006f82:	eb12 0a01 	adds.w	sl, r2, r1
 8006f86:	4649      	mov	r1, r9
 8006f88:	eb43 0b01 	adc.w	fp, r3, r1
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fa0:	4692      	mov	sl, r2
 8006fa2:	469b      	mov	fp, r3
 8006fa4:	4643      	mov	r3, r8
 8006fa6:	eb1a 0303 	adds.w	r3, sl, r3
 8006faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fae:	464b      	mov	r3, r9
 8006fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8006fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006fc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	18db      	adds	r3, r3, r3
 8006fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	eb42 0303 	adc.w	r3, r2, r3
 8006fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fe2:	f7f9 f94d 	bl	8000280 <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4611      	mov	r1, r2
 8006fec:	4b3b      	ldr	r3, [pc, #236]	; (80070dc <UART_SetConfig+0x2d4>)
 8006fee:	fba3 2301 	umull	r2, r3, r3, r1
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	2264      	movs	r2, #100	; 0x64
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
 8006ffa:	1acb      	subs	r3, r1, r3
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007002:	4b36      	ldr	r3, [pc, #216]	; (80070dc <UART_SetConfig+0x2d4>)
 8007004:	fba3 2302 	umull	r2, r3, r3, r2
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007010:	441c      	add	r4, r3
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800701c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007020:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	63b9      	str	r1, [r7, #56]	; 0x38
 800702c:	415b      	adcs	r3, r3
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007030:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007034:	4641      	mov	r1, r8
 8007036:	1851      	adds	r1, r2, r1
 8007038:	6339      	str	r1, [r7, #48]	; 0x30
 800703a:	4649      	mov	r1, r9
 800703c:	414b      	adcs	r3, r1
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800704c:	4659      	mov	r1, fp
 800704e:	00cb      	lsls	r3, r1, #3
 8007050:	4651      	mov	r1, sl
 8007052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007056:	4651      	mov	r1, sl
 8007058:	00ca      	lsls	r2, r1, #3
 800705a:	4610      	mov	r0, r2
 800705c:	4619      	mov	r1, r3
 800705e:	4603      	mov	r3, r0
 8007060:	4642      	mov	r2, r8
 8007062:	189b      	adds	r3, r3, r2
 8007064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007068:	464b      	mov	r3, r9
 800706a:	460a      	mov	r2, r1
 800706c:	eb42 0303 	adc.w	r3, r2, r3
 8007070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007080:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007088:	460b      	mov	r3, r1
 800708a:	18db      	adds	r3, r3, r3
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
 800708e:	4613      	mov	r3, r2
 8007090:	eb42 0303 	adc.w	r3, r2, r3
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007096:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800709a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800709e:	f7f9 f8ef 	bl	8000280 <__aeabi_uldivmod>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <UART_SetConfig+0x2d4>)
 80070a8:	fba3 1302 	umull	r1, r3, r3, r2
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	2164      	movs	r1, #100	; 0x64
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	3332      	adds	r3, #50	; 0x32
 80070ba:	4a08      	ldr	r2, [pc, #32]	; (80070dc <UART_SetConfig+0x2d4>)
 80070bc:	fba2 2303 	umull	r2, r3, r2, r3
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	f003 0207 	and.w	r2, r3, #7
 80070c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4422      	add	r2, r4
 80070ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070d0:	e105      	b.n	80072de <UART_SetConfig+0x4d6>
 80070d2:	bf00      	nop
 80070d4:	40011000 	.word	0x40011000
 80070d8:	40011400 	.word	0x40011400
 80070dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070f2:	4642      	mov	r2, r8
 80070f4:	464b      	mov	r3, r9
 80070f6:	1891      	adds	r1, r2, r2
 80070f8:	6239      	str	r1, [r7, #32]
 80070fa:	415b      	adcs	r3, r3
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
 80070fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007102:	4641      	mov	r1, r8
 8007104:	1854      	adds	r4, r2, r1
 8007106:	4649      	mov	r1, r9
 8007108:	eb43 0501 	adc.w	r5, r3, r1
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	00eb      	lsls	r3, r5, #3
 8007116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800711a:	00e2      	lsls	r2, r4, #3
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	4643      	mov	r3, r8
 8007122:	18e3      	adds	r3, r4, r3
 8007124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007128:	464b      	mov	r3, r9
 800712a:	eb45 0303 	adc.w	r3, r5, r3
 800712e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800713e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800714e:	4629      	mov	r1, r5
 8007150:	008b      	lsls	r3, r1, #2
 8007152:	4621      	mov	r1, r4
 8007154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007158:	4621      	mov	r1, r4
 800715a:	008a      	lsls	r2, r1, #2
 800715c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007160:	f7f9 f88e 	bl	8000280 <__aeabi_uldivmod>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4b60      	ldr	r3, [pc, #384]	; (80072ec <UART_SetConfig+0x4e4>)
 800716a:	fba3 2302 	umull	r2, r3, r3, r2
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	011c      	lsls	r4, r3, #4
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007176:	2200      	movs	r2, #0
 8007178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800717c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007180:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007184:	4642      	mov	r2, r8
 8007186:	464b      	mov	r3, r9
 8007188:	1891      	adds	r1, r2, r2
 800718a:	61b9      	str	r1, [r7, #24]
 800718c:	415b      	adcs	r3, r3
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007194:	4641      	mov	r1, r8
 8007196:	1851      	adds	r1, r2, r1
 8007198:	6139      	str	r1, [r7, #16]
 800719a:	4649      	mov	r1, r9
 800719c:	414b      	adcs	r3, r1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071ac:	4659      	mov	r1, fp
 80071ae:	00cb      	lsls	r3, r1, #3
 80071b0:	4651      	mov	r1, sl
 80071b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b6:	4651      	mov	r1, sl
 80071b8:	00ca      	lsls	r2, r1, #3
 80071ba:	4610      	mov	r0, r2
 80071bc:	4619      	mov	r1, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	4642      	mov	r2, r8
 80071c2:	189b      	adds	r3, r3, r2
 80071c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071c8:	464b      	mov	r3, r9
 80071ca:	460a      	mov	r2, r1
 80071cc:	eb42 0303 	adc.w	r3, r2, r3
 80071d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80071de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071ec:	4649      	mov	r1, r9
 80071ee:	008b      	lsls	r3, r1, #2
 80071f0:	4641      	mov	r1, r8
 80071f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f6:	4641      	mov	r1, r8
 80071f8:	008a      	lsls	r2, r1, #2
 80071fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071fe:	f7f9 f83f 	bl	8000280 <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4b39      	ldr	r3, [pc, #228]	; (80072ec <UART_SetConfig+0x4e4>)
 8007208:	fba3 1302 	umull	r1, r3, r3, r2
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	2164      	movs	r1, #100	; 0x64
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	3332      	adds	r3, #50	; 0x32
 800721a:	4a34      	ldr	r2, [pc, #208]	; (80072ec <UART_SetConfig+0x4e4>)
 800721c:	fba2 2303 	umull	r2, r3, r2, r3
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007226:	441c      	add	r4, r3
 8007228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722c:	2200      	movs	r2, #0
 800722e:	673b      	str	r3, [r7, #112]	; 0x70
 8007230:	677a      	str	r2, [r7, #116]	; 0x74
 8007232:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	1891      	adds	r1, r2, r2
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	415b      	adcs	r3, r3
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007246:	4641      	mov	r1, r8
 8007248:	1851      	adds	r1, r2, r1
 800724a:	6039      	str	r1, [r7, #0]
 800724c:	4649      	mov	r1, r9
 800724e:	414b      	adcs	r3, r1
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800725e:	4659      	mov	r1, fp
 8007260:	00cb      	lsls	r3, r1, #3
 8007262:	4651      	mov	r1, sl
 8007264:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007268:	4651      	mov	r1, sl
 800726a:	00ca      	lsls	r2, r1, #3
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	4603      	mov	r3, r0
 8007272:	4642      	mov	r2, r8
 8007274:	189b      	adds	r3, r3, r2
 8007276:	66bb      	str	r3, [r7, #104]	; 0x68
 8007278:	464b      	mov	r3, r9
 800727a:	460a      	mov	r2, r1
 800727c:	eb42 0303 	adc.w	r3, r2, r3
 8007280:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	663b      	str	r3, [r7, #96]	; 0x60
 800728c:	667a      	str	r2, [r7, #100]	; 0x64
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800729a:	4649      	mov	r1, r9
 800729c:	008b      	lsls	r3, r1, #2
 800729e:	4641      	mov	r1, r8
 80072a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072a4:	4641      	mov	r1, r8
 80072a6:	008a      	lsls	r2, r1, #2
 80072a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072ac:	f7f8 ffe8 	bl	8000280 <__aeabi_uldivmod>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <UART_SetConfig+0x4e4>)
 80072b6:	fba3 1302 	umull	r1, r3, r3, r2
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	2164      	movs	r1, #100	; 0x64
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	3332      	adds	r3, #50	; 0x32
 80072c8:	4a08      	ldr	r2, [pc, #32]	; (80072ec <UART_SetConfig+0x4e4>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	f003 020f 	and.w	r2, r3, #15
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4422      	add	r2, r4
 80072dc:	609a      	str	r2, [r3, #8]
}
 80072de:	bf00      	nop
 80072e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072e4:	46bd      	mov	sp, r7
 80072e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ea:	bf00      	nop
 80072ec:	51eb851f 	.word	0x51eb851f

080072f0 <MX_TOF_Init>:
static void handle_cmd(uint8_t cmd);
static uint8_t get_key(void);
static uint32_t com_has_data(void);

void MX_TOF_Init(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_VL53L7CX_SimpleRanging_Init();
 80072f4:	f000 f808 	bl	8007308 <MX_VL53L7CX_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80072f8:	bf00      	nop
 80072fa:	bd80      	pop	{r7, pc}

080072fc <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_VL53L7CX_SimpleRanging_Process();
 8007300:	f000 f81c 	bl	800733c <MX_VL53L7CX_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8007304:	bf00      	nop
 8007306:	bd80      	pop	{r7, pc}

08007308 <MX_VL53L7CX_SimpleRanging_Init>:

static void MX_VL53L7CX_SimpleRanging_Init(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800730c:	2000      	movs	r0, #0
 800730e:	f7fc feab 	bl	8004068 <BSP_COM_Init>

  status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L7CX);
 8007312:	2000      	movs	r0, #0
 8007314:	f000 f9fc 	bl	8007710 <CUSTOM_RANGING_SENSOR_Init>
 8007318:	4603      	mov	r3, r0
 800731a:	4a06      	ldr	r2, [pc, #24]	; (8007334 <MX_VL53L7CX_SimpleRanging_Init+0x2c>)
 800731c:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 800731e:	4b05      	ldr	r3, [pc, #20]	; (8007334 <MX_VL53L7CX_SimpleRanging_Init+0x2c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <MX_VL53L7CX_SimpleRanging_Init+0x26>
  {
    printf("CUSTOM_RANGING_SENSOR_Init failed\n");
 8007326:	4804      	ldr	r0, [pc, #16]	; (8007338 <MX_VL53L7CX_SimpleRanging_Init+0x30>)
 8007328:	f000 fcce 	bl	8007cc8 <puts>
    while(1);
 800732c:	e7fe      	b.n	800732c <MX_VL53L7CX_SimpleRanging_Init+0x24>
  }
}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	200004b4 	.word	0x200004b4
 8007338:	08008ce0 	.word	0x08008ce0

0800733c <MX_VL53L7CX_SimpleRanging_Process>:
    HAL_Delay(POLLING_PERIOD);
  }
}
#else
static void MX_VL53L7CX_SimpleRanging_Process(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8007342:	af00      	add	r7, sp, #0
  uint32_t Id;
  RANGING_SENSOR_Result_t Result;

  CUSTOM_RANGING_SENSOR_ReadID(CUSTOM_VL53L7CX, &Id);
 8007344:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8007348:	4619      	mov	r1, r3
 800734a:	2000      	movs	r0, #0
 800734c:	f000 fa0c 	bl	8007768 <CUSTOM_RANGING_SENSOR_ReadID>
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L7CX, &Cap);
 8007350:	491e      	ldr	r1, [pc, #120]	; (80073cc <MX_VL53L7CX_SimpleRanging_Process+0x90>)
 8007352:	2000      	movs	r0, #0
 8007354:	f000 fa32 	bl	80077bc <CUSTOM_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8007358:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 800735a:	2203      	movs	r2, #3
 800735c:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 800735e:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 8007360:	221e      	movs	r2, #30
 8007362:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8007364:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 8007366:	2205      	movs	r2, #5
 8007368:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 800736a:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 800736c:	2200      	movs	r2, #0
 800736e:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8007370:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 8007372:	2201      	movs	r2, #1
 8007374:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L7CX, &Profile);
 8007376:	4916      	ldr	r1, [pc, #88]	; (80073d0 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 8007378:	2000      	movs	r0, #0
 800737a:	f000 fa49 	bl	8007810 <CUSTOM_RANGING_SENSOR_ConfigProfile>

  status = CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L7CX, RS_MODE_BLOCKING_CONTINUOUS);
 800737e:	2101      	movs	r1, #1
 8007380:	2000      	movs	r0, #0
 8007382:	f000 fa99 	bl	80078b8 <CUSTOM_RANGING_SENSOR_Start>
 8007386:	4603      	mov	r3, r0
 8007388:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <MX_VL53L7CX_SimpleRanging_Process+0x98>)
 800738a:	6013      	str	r3, [r2, #0]

  while (1)
  {
    /* polling mode */
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L7CX, &Result);
 800738c:	463b      	mov	r3, r7
 800738e:	4619      	mov	r1, r3
 8007390:	2000      	movs	r0, #0
 8007392:	f000 fa67 	bl	8007864 <CUSTOM_RANGING_SENSOR_GetDistance>
 8007396:	4603      	mov	r3, r0
 8007398:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <MX_VL53L7CX_SimpleRanging_Process+0x98>)
 800739a:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <MX_VL53L7CX_SimpleRanging_Process+0x98>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d103      	bne.n	80073ac <MX_VL53L7CX_SimpleRanging_Process+0x70>
    {
      print_result(&Result);
 80073a4:	463b      	mov	r3, r7
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 f816 	bl	80073d8 <print_result>
    }

    if (com_has_data())
 80073ac:	f000 f988 	bl	80076c0 <com_has_data>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d005      	beq.n	80073c2 <MX_VL53L7CX_SimpleRanging_Process+0x86>
    {
      handle_cmd(get_key());
 80073b6:	f000 f96f 	bl	8007698 <get_key>
 80073ba:	4603      	mov	r3, r0
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 f921 	bl	8007604 <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 80073c2:	20c8      	movs	r0, #200	; 0xc8
 80073c4:	f7fc ff92 	bl	80042ec <HAL_Delay>
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L7CX, &Result);
 80073c8:	e7e0      	b.n	800738c <MX_VL53L7CX_SimpleRanging_Process+0x50>
 80073ca:	bf00      	nop
 80073cc:	20000490 	.word	0x20000490
 80073d0:	200004a0 	.word	0x200004a0
 80073d4:	200004b4 	.word	0x200004b4

080073d8 <print_result>:
  }
}
#endif /* USE_BARE_DRIVER */

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 80073d8:	b5b0      	push	{r4, r5, r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  int8_t i, j, k, l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80073e0:	4b49      	ldr	r3, [pc, #292]	; (8007508 <print_result+0x130>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d003      	beq.n	80073f0 <print_result+0x18>
         (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 80073e8:	4b47      	ldr	r3, [pc, #284]	; (8007508 <print_result+0x130>)
 80073ea:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d101      	bne.n	80073f4 <print_result+0x1c>
 80073f0:	2308      	movs	r3, #8
 80073f2:	e000      	b.n	80073f6 <print_result+0x1e>
 80073f4:	2304      	movs	r3, #4
 80073f6:	733b      	strb	r3, [r7, #12]
  /* clear screen */
//  printf("%c[2H", 27);

//  printf("Cell Format : %20s %20s %20s\n","Distance[mm]","Status","Signal[kcps/spad]\n\n");

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
 80073fc:	e076      	b.n	80074ec <print_result+0x114>
  {
	for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80073fe:	2300      	movs	r3, #0
 8007400:	737b      	strb	r3, [r7, #13]
 8007402:	e06a      	b.n	80074da <print_result+0x102>
	{
		/* Print distance and status */
		for (k = (zones_per_line - 1); k >= 0; k--)
 8007404:	7b3b      	ldrb	r3, [r7, #12]
 8007406:	3b01      	subs	r3, #1
 8007408:	b2db      	uxtb	r3, r3
 800740a:	73bb      	strb	r3, [r7, #14]
 800740c:	e05b      	b.n	80074c6 <print_result+0xee>
		{
		  if (k == 4){ // ****** only print middle top line ******* (zones_per_line/2-1) * 8
 800740e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d151      	bne.n	80074ba <print_result+0xe2>
			  if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 8007416:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800741a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800741e:	441a      	add	r2, r3
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	440b      	add	r3, r1
 800742c:	3304      	adds	r3, #4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d03c      	beq.n	80074ae <print_result+0xd6>
			  {
				printf("%5ld %5ld %5ld|",
					(long)Result->ZoneResult[j+k].Distance[l],
 8007434:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800743c:	441a      	add	r2, r3
 800743e:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	4403      	add	r3, r0
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	689b      	ldr	r3, [r3, #8]
				printf("%5ld %5ld %5ld|",
 8007452:	461c      	mov	r4, r3
					(long)Result->ZoneResult[j+k].Status[l],
 8007454:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800745c:	441a      	add	r2, r3
 800745e:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	4613      	mov	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	4403      	add	r3, r0
 800746c:	3302      	adds	r3, #2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	440b      	add	r3, r1
 8007472:	685b      	ldr	r3, [r3, #4]
				printf("%5ld %5ld %5ld|",
 8007474:	461d      	mov	r5, r3
					(long)Result->ZoneResult[j+k].Signal[l] );
 8007476:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800747a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800747e:	441a      	add	r2, r3
 8007480:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	4403      	add	r3, r0
 800748e:	3304      	adds	r3, #4
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	3304      	adds	r3, #4
 8007496:	edd3 7a00 	vldr	s15, [r3]
				printf("%5ld %5ld %5ld|",
 800749a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800749e:	ee17 3a90 	vmov	r3, s15
 80074a2:	462a      	mov	r2, r5
 80074a4:	4621      	mov	r1, r4
 80074a6:	4819      	ldr	r0, [pc, #100]	; (800750c <print_result+0x134>)
 80074a8:	f000 fb72 	bl	8007b90 <iprintf>
 80074ac:	e005      	b.n	80074ba <print_result+0xe2>
			  }
				else
				  printf("%5s %5s %5s|", "X", "X","X");
 80074ae:	4b18      	ldr	r3, [pc, #96]	; (8007510 <print_result+0x138>)
 80074b0:	4a17      	ldr	r2, [pc, #92]	; (8007510 <print_result+0x138>)
 80074b2:	4917      	ldr	r1, [pc, #92]	; (8007510 <print_result+0x138>)
 80074b4:	4817      	ldr	r0, [pc, #92]	; (8007514 <print_result+0x13c>)
 80074b6:	f000 fb6b 	bl	8007b90 <iprintf>
		for (k = (zones_per_line - 1); k >= 0; k--)
 80074ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	73bb      	strb	r3, [r7, #14]
 80074c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da9f      	bge.n	800740e <print_result+0x36>
	for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80074ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	3301      	adds	r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	737b      	strb	r3, [r7, #13]
 80074da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d090      	beq.n	8007404 <print_result+0x2c>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 80074e2:	7bfa      	ldrb	r2, [r7, #15]
 80074e4:	7b3b      	ldrb	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	73fb      	strb	r3, [r7, #15]
 80074ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d382      	bcc.n	80073fe <print_result+0x26>
		  }
		}
	}
  }
  printf("\n");
 80074f8:	200a      	movs	r0, #10
 80074fa:	f000 fb61 	bl	8007bc0 <putchar>
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bdb0      	pop	{r4, r5, r7, pc}
 8007506:	bf00      	nop
 8007508:	200004a0 	.word	0x200004a0
 800750c:	08008d04 	.word	0x08008d04
 8007510:	08008d14 	.word	0x08008d14
 8007514:	08008d18 	.word	0x08008d18

08007518 <toggle_resolution>:
static void toggle_resolution(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L7CX);
 800751c:	2000      	movs	r0, #0
 800751e:	f000 f9f7 	bl	8007910 <CUSTOM_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 8007522:	4b16      	ldr	r3, [pc, #88]	; (800757c <toggle_resolution+0x64>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3b01      	subs	r3, #1
 8007528:	2b03      	cmp	r3, #3
 800752a:	d81b      	bhi.n	8007564 <toggle_resolution+0x4c>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <toggle_resolution+0x1c>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	0800754d 	.word	0x0800754d
 8007538:	08007545 	.word	0x08007545
 800753c:	0800755d 	.word	0x0800755d
 8007540:	08007555 	.word	0x08007555
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8007544:	4b0d      	ldr	r3, [pc, #52]	; (800757c <toggle_resolution+0x64>)
 8007546:	2204      	movs	r2, #4
 8007548:	601a      	str	r2, [r3, #0]
      break;
 800754a:	e00c      	b.n	8007566 <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <toggle_resolution+0x64>)
 800754e:	2203      	movs	r2, #3
 8007550:	601a      	str	r2, [r3, #0]
      break;
 8007552:	e008      	b.n	8007566 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8007554:	4b09      	ldr	r3, [pc, #36]	; (800757c <toggle_resolution+0x64>)
 8007556:	2202      	movs	r2, #2
 8007558:	601a      	str	r2, [r3, #0]
      break;
 800755a:	e004      	b.n	8007566 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 800755c:	4b07      	ldr	r3, [pc, #28]	; (800757c <toggle_resolution+0x64>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
      break;
 8007562:	e000      	b.n	8007566 <toggle_resolution+0x4e>

    default:
      break;
 8007564:	bf00      	nop
  }

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L7CX, &Profile);
 8007566:	4905      	ldr	r1, [pc, #20]	; (800757c <toggle_resolution+0x64>)
 8007568:	2000      	movs	r0, #0
 800756a:	f000 f951 	bl	8007810 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L7CX, RS_MODE_BLOCKING_CONTINUOUS);
 800756e:	2101      	movs	r1, #1
 8007570:	2000      	movs	r0, #0
 8007572:	f000 f9a1 	bl	80078b8 <CUSTOM_RANGING_SENSOR_Start>
}
 8007576:	bf00      	nop
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	200004a0 	.word	0x200004a0

08007580 <toggle_signal>:

static void toggle_signal(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L7CX);
 8007584:	2000      	movs	r0, #0
 8007586:	f000 f9c3 	bl	8007910 <CUSTOM_RANGING_SENSOR_Stop>

  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 800758a:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <toggle_signal+0x34>)
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	bf0c      	ite	eq
 8007592:	2301      	moveq	r3, #1
 8007594:	2300      	movne	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <toggle_signal+0x34>)
 800759c:	611a      	str	r2, [r3, #16]

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L7CX, &Profile);
 800759e:	4905      	ldr	r1, [pc, #20]	; (80075b4 <toggle_signal+0x34>)
 80075a0:	2000      	movs	r0, #0
 80075a2:	f000 f935 	bl	8007810 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L7CX, RS_MODE_BLOCKING_CONTINUOUS);
 80075a6:	2101      	movs	r1, #1
 80075a8:	2000      	movs	r0, #0
 80075aa:	f000 f985 	bl	80078b8 <CUSTOM_RANGING_SENSOR_Start>
}
 80075ae:	bf00      	nop
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	200004a0 	.word	0x200004a0

080075b8 <toggle_ambient>:

static void toggle_ambient(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L7CX);
 80075bc:	2000      	movs	r0, #0
 80075be:	f000 f9a7 	bl	8007910 <CUSTOM_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <toggle_ambient+0x34>)
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bf0c      	ite	eq
 80075ca:	2301      	moveq	r3, #1
 80075cc:	2300      	movne	r3, #0
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <toggle_ambient+0x34>)
 80075d4:	60da      	str	r2, [r3, #12]

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L7CX, &Profile);
 80075d6:	4905      	ldr	r1, [pc, #20]	; (80075ec <toggle_ambient+0x34>)
 80075d8:	2000      	movs	r0, #0
 80075da:	f000 f919 	bl	8007810 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L7CX, RS_MODE_BLOCKING_CONTINUOUS);
 80075de:	2101      	movs	r1, #1
 80075e0:	2000      	movs	r0, #0
 80075e2:	f000 f969 	bl	80078b8 <CUSTOM_RANGING_SENSOR_Start>
}
 80075e6:	bf00      	nop
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	200004a0 	.word	0x200004a0

080075f0 <clear_screen>:

static void clear_screen(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* clear Screen : 27 is ESC command */
  printf("%c[2J", 27);
 80075f4:	211b      	movs	r1, #27
 80075f6:	4802      	ldr	r0, [pc, #8]	; (8007600 <clear_screen+0x10>)
 80075f8:	f000 faca 	bl	8007b90 <iprintf>
}
 80075fc:	bf00      	nop
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	08008d28 	.word	0x08008d28

08007604 <handle_cmd>:
  printf(" 'c' : clear screen\n");
  printf("\n");
}

static void handle_cmd(uint8_t cmd)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	3b61      	subs	r3, #97	; 0x61
 8007612:	2b12      	cmp	r3, #18
 8007614:	d83a      	bhi.n	800768c <handle_cmd+0x88>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <handle_cmd+0x18>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	0800767d 	.word	0x0800767d
 8007620:	0800768d 	.word	0x0800768d
 8007624:	08007687 	.word	0x08007687
 8007628:	0800768d 	.word	0x0800768d
 800762c:	0800768d 	.word	0x0800768d
 8007630:	0800768d 	.word	0x0800768d
 8007634:	0800768d 	.word	0x0800768d
 8007638:	0800768d 	.word	0x0800768d
 800763c:	0800768d 	.word	0x0800768d
 8007640:	0800768d 	.word	0x0800768d
 8007644:	0800768d 	.word	0x0800768d
 8007648:	0800768d 	.word	0x0800768d
 800764c:	0800768d 	.word	0x0800768d
 8007650:	0800768d 	.word	0x0800768d
 8007654:	0800768d 	.word	0x0800768d
 8007658:	0800768d 	.word	0x0800768d
 800765c:	0800768d 	.word	0x0800768d
 8007660:	08007669 	.word	0x08007669
 8007664:	08007673 	.word	0x08007673
  {
    case 'r':
      toggle_resolution();
 8007668:	f7ff ff56 	bl	8007518 <toggle_resolution>
      clear_screen();
 800766c:	f7ff ffc0 	bl	80075f0 <clear_screen>
      break;
 8007670:	e00d      	b.n	800768e <handle_cmd+0x8a>

    case 's':
      toggle_signal();
 8007672:	f7ff ff85 	bl	8007580 <toggle_signal>
      clear_screen();
 8007676:	f7ff ffbb 	bl	80075f0 <clear_screen>
      break;
 800767a:	e008      	b.n	800768e <handle_cmd+0x8a>

    case 'a':
	  toggle_ambient();
 800767c:	f7ff ff9c 	bl	80075b8 <toggle_ambient>
	  clear_screen();
 8007680:	f7ff ffb6 	bl	80075f0 <clear_screen>
	  break;
 8007684:	e003      	b.n	800768e <handle_cmd+0x8a>

    case 'c':
      clear_screen();
 8007686:	f7ff ffb3 	bl	80075f0 <clear_screen>
      break;
 800768a:	e000      	b.n	800768e <handle_cmd+0x8a>

    default:
      break;
 800768c:	bf00      	nop
  }
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop

08007698 <get_key>:

static uint8_t get_key(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 80076a2:	1df9      	adds	r1, r7, #7
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295
 80076a8:	2201      	movs	r2, #1
 80076aa:	4804      	ldr	r0, [pc, #16]	; (80076bc <get_key+0x24>)
 80076ac:	f7ff fa9c 	bl	8006be8 <HAL_UART_Receive>

  return cmd;
 80076b0:	79fb      	ldrb	r3, [r7, #7]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000444 	.word	0x20000444

080076c0 <com_has_data>:

static uint32_t com_has_data(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <com_has_data+0x24>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
}
 80076d8:	4618      	mov	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000444 	.word	0x20000444

080076e8 <HAL_GPIO_EXTI_Callback>:
#include "app_tof_pin_conf.h"

extern volatile uint8_t ToF_EventDetected;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	d102      	bne.n	80076fe <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <HAL_GPIO_EXTI_Callback+0x24>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	701a      	strb	r2, [r3, #0]
  }
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	200004b8 	.word	0x200004b8

08007710 <CUSTOM_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Init(uint32_t Instance)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <CUSTOM_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800771e:	f06f 0301 	mvn.w	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e01b      	b.n	800775e <CUSTOM_RANGING_SENSOR_Init+0x4e>
  }
  else
  {
    CUSTOM_RANGING_SENSOR_SetPowerMode(Instance, CUSTOM_RANGING_POWERMODE_OFF);
 8007726:	2101      	movs	r1, #1
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f919 	bl	8007960 <CUSTOM_RANGING_SENSOR_SetPowerMode>
    CUSTOM_RANGING_SENSOR_SetPowerMode(Instance, CUSTOM_RANGING_POWERMODE_ON);
 800772e:	2100      	movs	r1, #0
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f915 	bl	8007960 <CUSTOM_RANGING_SENSOR_SetPowerMode>

    switch (Instance)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10c      	bne.n	8007756 <CUSTOM_RANGING_SENSOR_Init+0x46>
    {
#if (USE_CUSTOM_RANGING_VL53L7CX == 1U)
      case CUSTOM_VL53L7CX:
          if (VL53L7CX_Probe(Instance) != BSP_ERROR_NONE)
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f967 	bl	8007a10 <VL53L7CX_Probe>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <CUSTOM_RANGING_SENSOR_Init+0x40>
          {
            ret = BSP_ERROR_NO_INIT;
 8007748:	f04f 33ff 	mov.w	r3, #4294967295
 800774c:	60fb      	str	r3, [r7, #12]
          }
          else
          {
            ret = BSP_ERROR_NONE;
          }
          break;
 800774e:	e006      	b.n	800775e <CUSTOM_RANGING_SENSOR_Init+0x4e>
            ret = BSP_ERROR_NONE;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
          break;
 8007754:	e003      	b.n	800775e <CUSTOM_RANGING_SENSOR_Init+0x4e>
#endif
      default:
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007756:	f06f 0306 	mvn.w	r3, #6
 800775a:	60fb      	str	r3, [r7, #12]
          break;
 800775c:	bf00      	nop
    }
  }

  return ret;
 800775e:	68fb      	ldr	r3, [r7, #12]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <CUSTOM_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <CUSTOM_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007778:	f06f 0301 	mvn.w	r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	e014      	b.n	80077aa <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ReadID(CUSTOM_RANGING_CompObj[Instance], pId) < 0)
 8007780:	4a0c      	ldr	r2, [pc, #48]	; (80077b4 <CUSTOM_RANGING_SENSOR_ReadID+0x4c>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	490b      	ldr	r1, [pc, #44]	; (80077b8 <CUSTOM_RANGING_SENSOR_ReadID+0x50>)
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	da03      	bge.n	80077a6 <CUSTOM_RANGING_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800779e:	f06f 0304 	mvn.w	r3, #4
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e001      	b.n	80077aa <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80077aa:	68fb      	ldr	r3, [r7, #12]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	200004c0 	.word	0x200004c0
 80077b8:	200004bc 	.word	0x200004bc

080077bc <CUSTOM_RANGING_SENSOR_GetCapabilities>:
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @note This function should be called after the init.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
    int32_t ret;

    if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x18>
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80077cc:	f06f 0301 	mvn.w	r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e014      	b.n	80077fe <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], pCapabilities) < 0)
 80077d4:	4a0c      	ldr	r2, [pc, #48]	; (8007808 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x4c>)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	490b      	ldr	r1, [pc, #44]	; (800780c <CUSTOM_RANGING_SENSOR_GetCapabilities+0x50>)
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da03      	bge.n	80077fa <CUSTOM_RANGING_SENSOR_GetCapabilities+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80077f2:	f06f 0304 	mvn.w	r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	e001      	b.n	80077fe <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	200004c0 	.word	0x200004c0
 800780c:	200004bc 	.word	0x200004bc

08007810 <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007820:	f06f 0301 	mvn.w	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	e014      	b.n	8007852 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 8007828:	4a0c      	ldr	r2, [pc, #48]	; (800785c <CUSTOM_RANGING_SENSOR_ConfigProfile+0x4c>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	490b      	ldr	r1, [pc, #44]	; (8007860 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x50>)
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	da03      	bge.n	800784e <CUSTOM_RANGING_SENSOR_ConfigProfile+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007846:	f06f 0304 	mvn.w	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200004c0 	.word	0x200004c0
 8007860:	200004bc 	.word	0x200004bc

08007864 <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007874:	f06f 0301 	mvn.w	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e014      	b.n	80078a6 <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 800787c:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	490b      	ldr	r1, [pc, #44]	; (80078b4 <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	da03      	bge.n	80078a2 <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800789a:	f06f 0304 	mvn.w	r3, #4
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	e001      	b.n	80078a6 <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80078a6:	68fb      	ldr	r3, [r7, #12]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200004c0 	.word	0x200004c0
 80078b4:	200004bc 	.word	0x200004bc

080078b8 <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80078ca:	f06f 0301 	mvn.w	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e014      	b.n	80078fc <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 80078d2:	4a0d      	ldr	r2, [pc, #52]	; (8007908 <CUSTOM_RANGING_SENSOR_Start+0x50>)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	490b      	ldr	r1, [pc, #44]	; (800790c <CUSTOM_RANGING_SENSOR_Start+0x54>)
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80078e4:	78f9      	ldrb	r1, [r7, #3]
 80078e6:	4610      	mov	r0, r2
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	da03      	bge.n	80078f8 <CUSTOM_RANGING_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80078f0:	f06f 0304 	mvn.w	r3, #4
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	e001      	b.n	80078fc <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80078fc:	68fb      	ldr	r3, [r7, #12]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	200004c0 	.word	0x200004c0
 800790c:	200004bc 	.word	0x200004bc

08007910 <CUSTOM_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <CUSTOM_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800791e:	f06f 0301 	mvn.w	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e013      	b.n	800794e <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Stop(CUSTOM_RANGING_CompObj[Instance]) < 0)
 8007926:	4a0c      	ldr	r2, [pc, #48]	; (8007958 <CUSTOM_RANGING_SENSOR_Stop+0x48>)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	490a      	ldr	r1, [pc, #40]	; (800795c <CUSTOM_RANGING_SENSOR_Stop+0x4c>)
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007938:	4610      	mov	r0, r2
 800793a:	4798      	blx	r3
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	da03      	bge.n	800794a <CUSTOM_RANGING_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007942:	f06f 0304 	mvn.w	r3, #4
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	e001      	b.n	800794e <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800794e:	68fb      	ldr	r3, [r7, #12]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	200004c0 	.word	0x200004c0
 800795c:	200004bc 	.word	0x200004bc

08007960 <CUSTOM_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007970:	f06f 0301 	mvn.w	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	e042      	b.n	80079fe <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
  }
  else if (PowerMode == CUSTOM_RANGING_POWERMODE_ON)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d11c      	bne.n	80079b8 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x58>
  {
       switch (Instance)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d115      	bne.n	80079b0 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x50>
        {
#if (USE_CUSTOM_RANGING_VL53L7CX == 1U)
          case CUSTOM_VL53L7CX:
            if (CUSTOM_RANGING_Drv[Instance]->SetPowerMode(CUSTOM_RANGING_CompObj[Instance], VL53L7CX_POWER_MODE_WAKEUP) < 0)
 8007984:	4a20      	ldr	r2, [pc, #128]	; (8007a08 <CUSTOM_RANGING_SENSOR_SetPowerMode+0xa8>)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	491f      	ldr	r1, [pc, #124]	; (8007a0c <CUSTOM_RANGING_SENSOR_SetPowerMode+0xac>)
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007996:	2101      	movs	r1, #1
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da03      	bge.n	80079aa <CUSTOM_RANGING_SENSOR_SetPowerMode+0x4a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80079a2:	f06f 0304 	mvn.w	r3, #4
 80079a6:	60fb      	str	r3, [r7, #12]
            else
            {
              ret = BSP_ERROR_NONE;
            }

            break;
 80079a8:	e029      	b.n	80079fe <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
              ret = BSP_ERROR_NONE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
            break;
 80079ae:	e026      	b.n	80079fe <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
#endif
          default:
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80079b0:	f06f 0306 	mvn.w	r3, #6
 80079b4:	60fb      	str	r3, [r7, #12]
              break;
 80079b6:	e022      	b.n	80079fe <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
    }
  }
  else if (PowerMode == CUSTOM_RANGING_POWERMODE_OFF)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d11c      	bne.n	80079f8 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x98>
  {
        switch (Instance)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d115      	bne.n	80079f0 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x90>
        {
#if (USE_CUSTOM_RANGING_VL53L7CX == 1U)
          case CUSTOM_VL53L7CX:
            if (CUSTOM_RANGING_Drv[Instance]->SetPowerMode(CUSTOM_RANGING_CompObj[Instance], VL53L7CX_POWER_MODE_SLEEP) < 0)
 80079c4:	4a10      	ldr	r2, [pc, #64]	; (8007a08 <CUSTOM_RANGING_SENSOR_SetPowerMode+0xa8>)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	490f      	ldr	r1, [pc, #60]	; (8007a0c <CUSTOM_RANGING_SENSOR_SetPowerMode+0xac>)
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80079d6:	2100      	movs	r1, #0
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da03      	bge.n	80079ea <CUSTOM_RANGING_SENSOR_SetPowerMode+0x8a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80079e2:	f06f 0304 	mvn.w	r3, #4
 80079e6:	60fb      	str	r3, [r7, #12]
            else
            {
              ret = BSP_ERROR_NONE;
            }

            break;
 80079e8:	e009      	b.n	80079fe <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
              ret = BSP_ERROR_NONE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
            break;
 80079ee:	e006      	b.n	80079fe <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
#endif
          default:
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80079f0:	f06f 0306 	mvn.w	r3, #6
 80079f4:	60fb      	str	r3, [r7, #12]
              break;
 80079f6:	e002      	b.n	80079fe <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80079f8:	f06f 0301 	mvn.w	r3, #1
 80079fc:	60fb      	str	r3, [r7, #12]
  }

    return ret;
 80079fe:	68fb      	ldr	r3, [r7, #12]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	200004c0 	.word	0x200004c0
 8007a0c:	200004bc 	.word	0x200004bc

08007a10 <VL53L7CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L7CX_Probe(uint32_t Instance)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08a      	sub	sp, #40	; 0x28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  VL53L7CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L7CX_Object_t   VL53L7CXObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L7CX_ADDRESS;
 8007a18:	2352      	movs	r3, #82	; 0x52
 8007a1a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = CUSTOM_VL53L7CX_I2C_Init;
 8007a1c:	4b32      	ldr	r3, [pc, #200]	; (8007ae8 <VL53L7CX_Probe+0xd8>)
 8007a1e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = CUSTOM_VL53L7CX_I2C_DeInit;
 8007a20:	4b32      	ldr	r3, [pc, #200]	; (8007aec <VL53L7CX_Probe+0xdc>)
 8007a22:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = CUSTOM_VL53L7CX_I2C_WriteReg;
 8007a24:	4b32      	ldr	r3, [pc, #200]	; (8007af0 <VL53L7CX_Probe+0xe0>)
 8007a26:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = CUSTOM_VL53L7CX_I2C_ReadReg;
 8007a28:	4b32      	ldr	r3, [pc, #200]	; (8007af4 <VL53L7CX_Probe+0xe4>)
 8007a2a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8007a2c:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <VL53L7CX_Probe+0xe8>)
 8007a2e:	623b      	str	r3, [r7, #32]

  if (VL53L7CX_RegisterBusIO(&VL53L7CXObj, &IOCtx) != VL53L7CX_OK)
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	4619      	mov	r1, r3
 8007a36:	4831      	ldr	r0, [pc, #196]	; (8007afc <VL53L7CX_Probe+0xec>)
 8007a38:	f7fb fd6f 	bl	800351a <VL53L7CX_RegisterBusIO>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <VL53L7CX_Probe+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a42:	f06f 0304 	mvn.w	r3, #4
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
 8007a48:	e049      	b.n	8007ade <VL53L7CX_Probe+0xce>
  }
  else
  {
    CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L7CX_RANGING_SENSOR_Driver;
 8007a4a:	4a2d      	ldr	r2, [pc, #180]	; (8007b00 <VL53L7CX_Probe+0xf0>)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	492d      	ldr	r1, [pc, #180]	; (8007b04 <VL53L7CX_Probe+0xf4>)
 8007a50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CUSTOM_RANGING_CompObj[Instance] = &VL53L7CXObj;
 8007a54:	4a2c      	ldr	r2, [pc, #176]	; (8007b08 <VL53L7CX_Probe+0xf8>)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4928      	ldr	r1, [pc, #160]	; (8007afc <VL53L7CX_Probe+0xec>)
 8007a5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if (VL53L7CX_ReadID(&VL53L7CXObj, &id) != VL53L7CX_OK)
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	4619      	mov	r1, r3
 8007a64:	4825      	ldr	r0, [pc, #148]	; (8007afc <VL53L7CX_Probe+0xec>)
 8007a66:	f7fb fe08 	bl	800367a <VL53L7CX_ReadID>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <VL53L7CX_Probe+0x68>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a70:	f06f 0304 	mvn.w	r3, #4
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
 8007a76:	e032      	b.n	8007ade <VL53L7CX_Probe+0xce>
    }
    else if (id != VL53L7CX_ID)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f24f 0202 	movw	r2, #61442	; 0xf002
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d003      	beq.n	8007a8a <VL53L7CX_Probe+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007a82:	f06f 0306 	mvn.w	r3, #6
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
 8007a88:	e029      	b.n	8007ade <VL53L7CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L7CX_OK)
 8007a8a:	4a1d      	ldr	r2, [pc, #116]	; (8007b00 <VL53L7CX_Probe+0xf0>)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	491c      	ldr	r1, [pc, #112]	; (8007b08 <VL53L7CX_Probe+0xf8>)
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <VL53L7CX_Probe+0x9e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007aa6:	f06f 0304 	mvn.w	r3, #4
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8007aac:	e017      	b.n	8007ade <VL53L7CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8007aae:	4a14      	ldr	r2, [pc, #80]	; (8007b00 <VL53L7CX_Probe+0xf0>)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4913      	ldr	r1, [pc, #76]	; (8007b08 <VL53L7CX_Probe+0xf8>)
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
              &RANGING_SENSOR_Cap[Instance]) != VL53L7CX_OK)
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	0112      	lsls	r2, r2, #4
 8007ac4:	4911      	ldr	r1, [pc, #68]	; (8007b0c <VL53L7CX_Probe+0xfc>)
 8007ac6:	440a      	add	r2, r1
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4798      	blx	r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <VL53L7CX_Probe+0xca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ad2:	f06f 0304 	mvn.w	r3, #4
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad8:	e001      	b.n	8007ade <VL53L7CX_Probe+0xce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3728      	adds	r7, #40	; 0x28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	08000b99 	.word	0x08000b99
 8007aec:	08000bfd 	.word	0x08000bfd
 8007af0:	08000c4d 	.word	0x08000c4d
 8007af4:	08000cb1 	.word	0x08000cb1
 8007af8:	08000d15 	.word	0x08000d15
 8007afc:	200004d4 	.word	0x200004d4
 8007b00:	200004c0 	.word	0x200004c0
 8007b04:	20000004 	.word	0x20000004
 8007b08:	200004bc 	.word	0x200004bc
 8007b0c:	200004c4 	.word	0x200004c4

08007b10 <__errno>:
 8007b10:	4b01      	ldr	r3, [pc, #4]	; (8007b18 <__errno+0x8>)
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	20000048 	.word	0x20000048

08007b1c <__libc_init_array>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	4d0d      	ldr	r5, [pc, #52]	; (8007b54 <__libc_init_array+0x38>)
 8007b20:	4c0d      	ldr	r4, [pc, #52]	; (8007b58 <__libc_init_array+0x3c>)
 8007b22:	1b64      	subs	r4, r4, r5
 8007b24:	10a4      	asrs	r4, r4, #2
 8007b26:	2600      	movs	r6, #0
 8007b28:	42a6      	cmp	r6, r4
 8007b2a:	d109      	bne.n	8007b40 <__libc_init_array+0x24>
 8007b2c:	4d0b      	ldr	r5, [pc, #44]	; (8007b5c <__libc_init_array+0x40>)
 8007b2e:	4c0c      	ldr	r4, [pc, #48]	; (8007b60 <__libc_init_array+0x44>)
 8007b30:	f001 f890 	bl	8008c54 <_init>
 8007b34:	1b64      	subs	r4, r4, r5
 8007b36:	10a4      	asrs	r4, r4, #2
 8007b38:	2600      	movs	r6, #0
 8007b3a:	42a6      	cmp	r6, r4
 8007b3c:	d105      	bne.n	8007b4a <__libc_init_array+0x2e>
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b44:	4798      	blx	r3
 8007b46:	3601      	adds	r6, #1
 8007b48:	e7ee      	b.n	8007b28 <__libc_init_array+0xc>
 8007b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4e:	4798      	blx	r3
 8007b50:	3601      	adds	r6, #1
 8007b52:	e7f2      	b.n	8007b3a <__libc_init_array+0x1e>
 8007b54:	0801e5e4 	.word	0x0801e5e4
 8007b58:	0801e5e4 	.word	0x0801e5e4
 8007b5c:	0801e5e4 	.word	0x0801e5e4
 8007b60:	0801e5e8 	.word	0x0801e5e8

08007b64 <memcpy>:
 8007b64:	440a      	add	r2, r1
 8007b66:	4291      	cmp	r1, r2
 8007b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b6c:	d100      	bne.n	8007b70 <memcpy+0xc>
 8007b6e:	4770      	bx	lr
 8007b70:	b510      	push	{r4, lr}
 8007b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	d1f9      	bne.n	8007b72 <memcpy+0xe>
 8007b7e:	bd10      	pop	{r4, pc}

08007b80 <memset>:
 8007b80:	4402      	add	r2, r0
 8007b82:	4603      	mov	r3, r0
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d100      	bne.n	8007b8a <memset+0xa>
 8007b88:	4770      	bx	lr
 8007b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8e:	e7f9      	b.n	8007b84 <memset+0x4>

08007b90 <iprintf>:
 8007b90:	b40f      	push	{r0, r1, r2, r3}
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <iprintf+0x2c>)
 8007b94:	b513      	push	{r0, r1, r4, lr}
 8007b96:	681c      	ldr	r4, [r3, #0]
 8007b98:	b124      	cbz	r4, 8007ba4 <iprintf+0x14>
 8007b9a:	69a3      	ldr	r3, [r4, #24]
 8007b9c:	b913      	cbnz	r3, 8007ba4 <iprintf+0x14>
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 fa74 	bl	800808c <__sinit>
 8007ba4:	ab05      	add	r3, sp, #20
 8007ba6:	9a04      	ldr	r2, [sp, #16]
 8007ba8:	68a1      	ldr	r1, [r4, #8]
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 fc7d 	bl	80084ac <_vfiprintf_r>
 8007bb2:	b002      	add	sp, #8
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	b004      	add	sp, #16
 8007bba:	4770      	bx	lr
 8007bbc:	20000048 	.word	0x20000048

08007bc0 <putchar>:
 8007bc0:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <putchar+0x28>)
 8007bc2:	b513      	push	{r0, r1, r4, lr}
 8007bc4:	681c      	ldr	r4, [r3, #0]
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	b134      	cbz	r4, 8007bd8 <putchar+0x18>
 8007bca:	69a3      	ldr	r3, [r4, #24]
 8007bcc:	b923      	cbnz	r3, 8007bd8 <putchar+0x18>
 8007bce:	9001      	str	r0, [sp, #4]
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 fa5b 	bl	800808c <__sinit>
 8007bd6:	9901      	ldr	r1, [sp, #4]
 8007bd8:	68a2      	ldr	r2, [r4, #8]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	b002      	add	sp, #8
 8007bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be2:	f000 bf27 	b.w	8008a34 <_putc_r>
 8007be6:	bf00      	nop
 8007be8:	20000048 	.word	0x20000048

08007bec <_puts_r>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	460e      	mov	r6, r1
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	b118      	cbz	r0, 8007bfc <_puts_r+0x10>
 8007bf4:	6983      	ldr	r3, [r0, #24]
 8007bf6:	b90b      	cbnz	r3, 8007bfc <_puts_r+0x10>
 8007bf8:	f000 fa48 	bl	800808c <__sinit>
 8007bfc:	69ab      	ldr	r3, [r5, #24]
 8007bfe:	68ac      	ldr	r4, [r5, #8]
 8007c00:	b913      	cbnz	r3, 8007c08 <_puts_r+0x1c>
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 fa42 	bl	800808c <__sinit>
 8007c08:	4b2c      	ldr	r3, [pc, #176]	; (8007cbc <_puts_r+0xd0>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d120      	bne.n	8007c50 <_puts_r+0x64>
 8007c0e:	686c      	ldr	r4, [r5, #4]
 8007c10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c12:	07db      	lsls	r3, r3, #31
 8007c14:	d405      	bmi.n	8007c22 <_puts_r+0x36>
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	0598      	lsls	r0, r3, #22
 8007c1a:	d402      	bmi.n	8007c22 <_puts_r+0x36>
 8007c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c1e:	f000 fad3 	bl	80081c8 <__retarget_lock_acquire_recursive>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	0719      	lsls	r1, r3, #28
 8007c26:	d51d      	bpl.n	8007c64 <_puts_r+0x78>
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	b1db      	cbz	r3, 8007c64 <_puts_r+0x78>
 8007c2c:	3e01      	subs	r6, #1
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c34:	3b01      	subs	r3, #1
 8007c36:	60a3      	str	r3, [r4, #8]
 8007c38:	bb39      	cbnz	r1, 8007c8a <_puts_r+0x9e>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da38      	bge.n	8007cb0 <_puts_r+0xc4>
 8007c3e:	4622      	mov	r2, r4
 8007c40:	210a      	movs	r1, #10
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 f848 	bl	8007cd8 <__swbuf_r>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d011      	beq.n	8007c70 <_puts_r+0x84>
 8007c4c:	250a      	movs	r5, #10
 8007c4e:	e011      	b.n	8007c74 <_puts_r+0x88>
 8007c50:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <_puts_r+0xd4>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d101      	bne.n	8007c5a <_puts_r+0x6e>
 8007c56:	68ac      	ldr	r4, [r5, #8]
 8007c58:	e7da      	b.n	8007c10 <_puts_r+0x24>
 8007c5a:	4b1a      	ldr	r3, [pc, #104]	; (8007cc4 <_puts_r+0xd8>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	bf08      	it	eq
 8007c60:	68ec      	ldreq	r4, [r5, #12]
 8007c62:	e7d5      	b.n	8007c10 <_puts_r+0x24>
 8007c64:	4621      	mov	r1, r4
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 f888 	bl	8007d7c <__swsetup_r>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d0dd      	beq.n	8007c2c <_puts_r+0x40>
 8007c70:	f04f 35ff 	mov.w	r5, #4294967295
 8007c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c76:	07da      	lsls	r2, r3, #31
 8007c78:	d405      	bmi.n	8007c86 <_puts_r+0x9a>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	059b      	lsls	r3, r3, #22
 8007c7e:	d402      	bmi.n	8007c86 <_puts_r+0x9a>
 8007c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c82:	f000 faa2 	bl	80081ca <__retarget_lock_release_recursive>
 8007c86:	4628      	mov	r0, r5
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da04      	bge.n	8007c98 <_puts_r+0xac>
 8007c8e:	69a2      	ldr	r2, [r4, #24]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	dc06      	bgt.n	8007ca2 <_puts_r+0xb6>
 8007c94:	290a      	cmp	r1, #10
 8007c96:	d004      	beq.n	8007ca2 <_puts_r+0xb6>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	7019      	strb	r1, [r3, #0]
 8007ca0:	e7c5      	b.n	8007c2e <_puts_r+0x42>
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f000 f817 	bl	8007cd8 <__swbuf_r>
 8007caa:	3001      	adds	r0, #1
 8007cac:	d1bf      	bne.n	8007c2e <_puts_r+0x42>
 8007cae:	e7df      	b.n	8007c70 <_puts_r+0x84>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	250a      	movs	r5, #10
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	6022      	str	r2, [r4, #0]
 8007cb8:	701d      	strb	r5, [r3, #0]
 8007cba:	e7db      	b.n	8007c74 <_puts_r+0x88>
 8007cbc:	0801e568 	.word	0x0801e568
 8007cc0:	0801e588 	.word	0x0801e588
 8007cc4:	0801e548 	.word	0x0801e548

08007cc8 <puts>:
 8007cc8:	4b02      	ldr	r3, [pc, #8]	; (8007cd4 <puts+0xc>)
 8007cca:	4601      	mov	r1, r0
 8007ccc:	6818      	ldr	r0, [r3, #0]
 8007cce:	f7ff bf8d 	b.w	8007bec <_puts_r>
 8007cd2:	bf00      	nop
 8007cd4:	20000048 	.word	0x20000048

08007cd8 <__swbuf_r>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	460e      	mov	r6, r1
 8007cdc:	4614      	mov	r4, r2
 8007cde:	4605      	mov	r5, r0
 8007ce0:	b118      	cbz	r0, 8007cea <__swbuf_r+0x12>
 8007ce2:	6983      	ldr	r3, [r0, #24]
 8007ce4:	b90b      	cbnz	r3, 8007cea <__swbuf_r+0x12>
 8007ce6:	f000 f9d1 	bl	800808c <__sinit>
 8007cea:	4b21      	ldr	r3, [pc, #132]	; (8007d70 <__swbuf_r+0x98>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d12b      	bne.n	8007d48 <__swbuf_r+0x70>
 8007cf0:	686c      	ldr	r4, [r5, #4]
 8007cf2:	69a3      	ldr	r3, [r4, #24]
 8007cf4:	60a3      	str	r3, [r4, #8]
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	071a      	lsls	r2, r3, #28
 8007cfa:	d52f      	bpl.n	8007d5c <__swbuf_r+0x84>
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	b36b      	cbz	r3, 8007d5c <__swbuf_r+0x84>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	6820      	ldr	r0, [r4, #0]
 8007d04:	1ac0      	subs	r0, r0, r3
 8007d06:	6963      	ldr	r3, [r4, #20]
 8007d08:	b2f6      	uxtb	r6, r6
 8007d0a:	4283      	cmp	r3, r0
 8007d0c:	4637      	mov	r7, r6
 8007d0e:	dc04      	bgt.n	8007d1a <__swbuf_r+0x42>
 8007d10:	4621      	mov	r1, r4
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 f926 	bl	8007f64 <_fflush_r>
 8007d18:	bb30      	cbnz	r0, 8007d68 <__swbuf_r+0x90>
 8007d1a:	68a3      	ldr	r3, [r4, #8]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	60a3      	str	r3, [r4, #8]
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	6022      	str	r2, [r4, #0]
 8007d26:	701e      	strb	r6, [r3, #0]
 8007d28:	6963      	ldr	r3, [r4, #20]
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	4283      	cmp	r3, r0
 8007d2e:	d004      	beq.n	8007d3a <__swbuf_r+0x62>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	07db      	lsls	r3, r3, #31
 8007d34:	d506      	bpl.n	8007d44 <__swbuf_r+0x6c>
 8007d36:	2e0a      	cmp	r6, #10
 8007d38:	d104      	bne.n	8007d44 <__swbuf_r+0x6c>
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f911 	bl	8007f64 <_fflush_r>
 8007d42:	b988      	cbnz	r0, 8007d68 <__swbuf_r+0x90>
 8007d44:	4638      	mov	r0, r7
 8007d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <__swbuf_r+0x9c>)
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	d101      	bne.n	8007d52 <__swbuf_r+0x7a>
 8007d4e:	68ac      	ldr	r4, [r5, #8]
 8007d50:	e7cf      	b.n	8007cf2 <__swbuf_r+0x1a>
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <__swbuf_r+0xa0>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	bf08      	it	eq
 8007d58:	68ec      	ldreq	r4, [r5, #12]
 8007d5a:	e7ca      	b.n	8007cf2 <__swbuf_r+0x1a>
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 f80c 	bl	8007d7c <__swsetup_r>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d0cb      	beq.n	8007d00 <__swbuf_r+0x28>
 8007d68:	f04f 37ff 	mov.w	r7, #4294967295
 8007d6c:	e7ea      	b.n	8007d44 <__swbuf_r+0x6c>
 8007d6e:	bf00      	nop
 8007d70:	0801e568 	.word	0x0801e568
 8007d74:	0801e588 	.word	0x0801e588
 8007d78:	0801e548 	.word	0x0801e548

08007d7c <__swsetup_r>:
 8007d7c:	4b32      	ldr	r3, [pc, #200]	; (8007e48 <__swsetup_r+0xcc>)
 8007d7e:	b570      	push	{r4, r5, r6, lr}
 8007d80:	681d      	ldr	r5, [r3, #0]
 8007d82:	4606      	mov	r6, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	b125      	cbz	r5, 8007d92 <__swsetup_r+0x16>
 8007d88:	69ab      	ldr	r3, [r5, #24]
 8007d8a:	b913      	cbnz	r3, 8007d92 <__swsetup_r+0x16>
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	f000 f97d 	bl	800808c <__sinit>
 8007d92:	4b2e      	ldr	r3, [pc, #184]	; (8007e4c <__swsetup_r+0xd0>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	d10f      	bne.n	8007db8 <__swsetup_r+0x3c>
 8007d98:	686c      	ldr	r4, [r5, #4]
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da0:	0719      	lsls	r1, r3, #28
 8007da2:	d42c      	bmi.n	8007dfe <__swsetup_r+0x82>
 8007da4:	06dd      	lsls	r5, r3, #27
 8007da6:	d411      	bmi.n	8007dcc <__swsetup_r+0x50>
 8007da8:	2309      	movs	r3, #9
 8007daa:	6033      	str	r3, [r6, #0]
 8007dac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	f04f 30ff 	mov.w	r0, #4294967295
 8007db6:	e03e      	b.n	8007e36 <__swsetup_r+0xba>
 8007db8:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <__swsetup_r+0xd4>)
 8007dba:	429c      	cmp	r4, r3
 8007dbc:	d101      	bne.n	8007dc2 <__swsetup_r+0x46>
 8007dbe:	68ac      	ldr	r4, [r5, #8]
 8007dc0:	e7eb      	b.n	8007d9a <__swsetup_r+0x1e>
 8007dc2:	4b24      	ldr	r3, [pc, #144]	; (8007e54 <__swsetup_r+0xd8>)
 8007dc4:	429c      	cmp	r4, r3
 8007dc6:	bf08      	it	eq
 8007dc8:	68ec      	ldreq	r4, [r5, #12]
 8007dca:	e7e6      	b.n	8007d9a <__swsetup_r+0x1e>
 8007dcc:	0758      	lsls	r0, r3, #29
 8007dce:	d512      	bpl.n	8007df6 <__swsetup_r+0x7a>
 8007dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd2:	b141      	cbz	r1, 8007de6 <__swsetup_r+0x6a>
 8007dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd8:	4299      	cmp	r1, r3
 8007dda:	d002      	beq.n	8007de2 <__swsetup_r+0x66>
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 fa5b 	bl	8008298 <_free_r>
 8007de2:	2300      	movs	r3, #0
 8007de4:	6363      	str	r3, [r4, #52]	; 0x34
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	2300      	movs	r3, #0
 8007df0:	6063      	str	r3, [r4, #4]
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	f043 0308 	orr.w	r3, r3, #8
 8007dfc:	81a3      	strh	r3, [r4, #12]
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	b94b      	cbnz	r3, 8007e16 <__swsetup_r+0x9a>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0c:	d003      	beq.n	8007e16 <__swsetup_r+0x9a>
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 fa01 	bl	8008218 <__smakebuf_r>
 8007e16:	89a0      	ldrh	r0, [r4, #12]
 8007e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e1c:	f010 0301 	ands.w	r3, r0, #1
 8007e20:	d00a      	beq.n	8007e38 <__swsetup_r+0xbc>
 8007e22:	2300      	movs	r3, #0
 8007e24:	60a3      	str	r3, [r4, #8]
 8007e26:	6963      	ldr	r3, [r4, #20]
 8007e28:	425b      	negs	r3, r3
 8007e2a:	61a3      	str	r3, [r4, #24]
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	b943      	cbnz	r3, 8007e42 <__swsetup_r+0xc6>
 8007e30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e34:	d1ba      	bne.n	8007dac <__swsetup_r+0x30>
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	0781      	lsls	r1, r0, #30
 8007e3a:	bf58      	it	pl
 8007e3c:	6963      	ldrpl	r3, [r4, #20]
 8007e3e:	60a3      	str	r3, [r4, #8]
 8007e40:	e7f4      	b.n	8007e2c <__swsetup_r+0xb0>
 8007e42:	2000      	movs	r0, #0
 8007e44:	e7f7      	b.n	8007e36 <__swsetup_r+0xba>
 8007e46:	bf00      	nop
 8007e48:	20000048 	.word	0x20000048
 8007e4c:	0801e568 	.word	0x0801e568
 8007e50:	0801e588 	.word	0x0801e588
 8007e54:	0801e548 	.word	0x0801e548

08007e58 <__sflush_r>:
 8007e58:	898a      	ldrh	r2, [r1, #12]
 8007e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5e:	4605      	mov	r5, r0
 8007e60:	0710      	lsls	r0, r2, #28
 8007e62:	460c      	mov	r4, r1
 8007e64:	d458      	bmi.n	8007f18 <__sflush_r+0xc0>
 8007e66:	684b      	ldr	r3, [r1, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	dc05      	bgt.n	8007e78 <__sflush_r+0x20>
 8007e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dc02      	bgt.n	8007e78 <__sflush_r+0x20>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e7a:	2e00      	cmp	r6, #0
 8007e7c:	d0f9      	beq.n	8007e72 <__sflush_r+0x1a>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e84:	682f      	ldr	r7, [r5, #0]
 8007e86:	602b      	str	r3, [r5, #0]
 8007e88:	d032      	beq.n	8007ef0 <__sflush_r+0x98>
 8007e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	075a      	lsls	r2, r3, #29
 8007e90:	d505      	bpl.n	8007e9e <__sflush_r+0x46>
 8007e92:	6863      	ldr	r3, [r4, #4]
 8007e94:	1ac0      	subs	r0, r0, r3
 8007e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e98:	b10b      	cbz	r3, 8007e9e <__sflush_r+0x46>
 8007e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e9c:	1ac0      	subs	r0, r0, r3
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ea4:	6a21      	ldr	r1, [r4, #32]
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	47b0      	blx	r6
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	d106      	bne.n	8007ebe <__sflush_r+0x66>
 8007eb0:	6829      	ldr	r1, [r5, #0]
 8007eb2:	291d      	cmp	r1, #29
 8007eb4:	d82c      	bhi.n	8007f10 <__sflush_r+0xb8>
 8007eb6:	4a2a      	ldr	r2, [pc, #168]	; (8007f60 <__sflush_r+0x108>)
 8007eb8:	40ca      	lsrs	r2, r1
 8007eba:	07d6      	lsls	r6, r2, #31
 8007ebc:	d528      	bpl.n	8007f10 <__sflush_r+0xb8>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	6062      	str	r2, [r4, #4]
 8007ec2:	04d9      	lsls	r1, r3, #19
 8007ec4:	6922      	ldr	r2, [r4, #16]
 8007ec6:	6022      	str	r2, [r4, #0]
 8007ec8:	d504      	bpl.n	8007ed4 <__sflush_r+0x7c>
 8007eca:	1c42      	adds	r2, r0, #1
 8007ecc:	d101      	bne.n	8007ed2 <__sflush_r+0x7a>
 8007ece:	682b      	ldr	r3, [r5, #0]
 8007ed0:	b903      	cbnz	r3, 8007ed4 <__sflush_r+0x7c>
 8007ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ed6:	602f      	str	r7, [r5, #0]
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	d0ca      	beq.n	8007e72 <__sflush_r+0x1a>
 8007edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ee0:	4299      	cmp	r1, r3
 8007ee2:	d002      	beq.n	8007eea <__sflush_r+0x92>
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f000 f9d7 	bl	8008298 <_free_r>
 8007eea:	2000      	movs	r0, #0
 8007eec:	6360      	str	r0, [r4, #52]	; 0x34
 8007eee:	e7c1      	b.n	8007e74 <__sflush_r+0x1c>
 8007ef0:	6a21      	ldr	r1, [r4, #32]
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	47b0      	blx	r6
 8007ef8:	1c41      	adds	r1, r0, #1
 8007efa:	d1c7      	bne.n	8007e8c <__sflush_r+0x34>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0c4      	beq.n	8007e8c <__sflush_r+0x34>
 8007f02:	2b1d      	cmp	r3, #29
 8007f04:	d001      	beq.n	8007f0a <__sflush_r+0xb2>
 8007f06:	2b16      	cmp	r3, #22
 8007f08:	d101      	bne.n	8007f0e <__sflush_r+0xb6>
 8007f0a:	602f      	str	r7, [r5, #0]
 8007f0c:	e7b1      	b.n	8007e72 <__sflush_r+0x1a>
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f14:	81a3      	strh	r3, [r4, #12]
 8007f16:	e7ad      	b.n	8007e74 <__sflush_r+0x1c>
 8007f18:	690f      	ldr	r7, [r1, #16]
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	d0a9      	beq.n	8007e72 <__sflush_r+0x1a>
 8007f1e:	0793      	lsls	r3, r2, #30
 8007f20:	680e      	ldr	r6, [r1, #0]
 8007f22:	bf08      	it	eq
 8007f24:	694b      	ldreq	r3, [r1, #20]
 8007f26:	600f      	str	r7, [r1, #0]
 8007f28:	bf18      	it	ne
 8007f2a:	2300      	movne	r3, #0
 8007f2c:	eba6 0807 	sub.w	r8, r6, r7
 8007f30:	608b      	str	r3, [r1, #8]
 8007f32:	f1b8 0f00 	cmp.w	r8, #0
 8007f36:	dd9c      	ble.n	8007e72 <__sflush_r+0x1a>
 8007f38:	6a21      	ldr	r1, [r4, #32]
 8007f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f3c:	4643      	mov	r3, r8
 8007f3e:	463a      	mov	r2, r7
 8007f40:	4628      	mov	r0, r5
 8007f42:	47b0      	blx	r6
 8007f44:	2800      	cmp	r0, #0
 8007f46:	dc06      	bgt.n	8007f56 <__sflush_r+0xfe>
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4e:	81a3      	strh	r3, [r4, #12]
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295
 8007f54:	e78e      	b.n	8007e74 <__sflush_r+0x1c>
 8007f56:	4407      	add	r7, r0
 8007f58:	eba8 0800 	sub.w	r8, r8, r0
 8007f5c:	e7e9      	b.n	8007f32 <__sflush_r+0xda>
 8007f5e:	bf00      	nop
 8007f60:	20400001 	.word	0x20400001

08007f64 <_fflush_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	690b      	ldr	r3, [r1, #16]
 8007f68:	4605      	mov	r5, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	b913      	cbnz	r3, 8007f74 <_fflush_r+0x10>
 8007f6e:	2500      	movs	r5, #0
 8007f70:	4628      	mov	r0, r5
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	b118      	cbz	r0, 8007f7e <_fflush_r+0x1a>
 8007f76:	6983      	ldr	r3, [r0, #24]
 8007f78:	b90b      	cbnz	r3, 8007f7e <_fflush_r+0x1a>
 8007f7a:	f000 f887 	bl	800808c <__sinit>
 8007f7e:	4b14      	ldr	r3, [pc, #80]	; (8007fd0 <_fflush_r+0x6c>)
 8007f80:	429c      	cmp	r4, r3
 8007f82:	d11b      	bne.n	8007fbc <_fflush_r+0x58>
 8007f84:	686c      	ldr	r4, [r5, #4]
 8007f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0ef      	beq.n	8007f6e <_fflush_r+0xa>
 8007f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f90:	07d0      	lsls	r0, r2, #31
 8007f92:	d404      	bmi.n	8007f9e <_fflush_r+0x3a>
 8007f94:	0599      	lsls	r1, r3, #22
 8007f96:	d402      	bmi.n	8007f9e <_fflush_r+0x3a>
 8007f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f9a:	f000 f915 	bl	80081c8 <__retarget_lock_acquire_recursive>
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	f7ff ff59 	bl	8007e58 <__sflush_r>
 8007fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fa8:	07da      	lsls	r2, r3, #31
 8007faa:	4605      	mov	r5, r0
 8007fac:	d4e0      	bmi.n	8007f70 <_fflush_r+0xc>
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	059b      	lsls	r3, r3, #22
 8007fb2:	d4dd      	bmi.n	8007f70 <_fflush_r+0xc>
 8007fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fb6:	f000 f908 	bl	80081ca <__retarget_lock_release_recursive>
 8007fba:	e7d9      	b.n	8007f70 <_fflush_r+0xc>
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <_fflush_r+0x70>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	d101      	bne.n	8007fc6 <_fflush_r+0x62>
 8007fc2:	68ac      	ldr	r4, [r5, #8]
 8007fc4:	e7df      	b.n	8007f86 <_fflush_r+0x22>
 8007fc6:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <_fflush_r+0x74>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	bf08      	it	eq
 8007fcc:	68ec      	ldreq	r4, [r5, #12]
 8007fce:	e7da      	b.n	8007f86 <_fflush_r+0x22>
 8007fd0:	0801e568 	.word	0x0801e568
 8007fd4:	0801e588 	.word	0x0801e588
 8007fd8:	0801e548 	.word	0x0801e548

08007fdc <std>:
 8007fdc:	2300      	movs	r3, #0
 8007fde:	b510      	push	{r4, lr}
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fea:	6083      	str	r3, [r0, #8]
 8007fec:	8181      	strh	r1, [r0, #12]
 8007fee:	6643      	str	r3, [r0, #100]	; 0x64
 8007ff0:	81c2      	strh	r2, [r0, #14]
 8007ff2:	6183      	str	r3, [r0, #24]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	305c      	adds	r0, #92	; 0x5c
 8007ffa:	f7ff fdc1 	bl	8007b80 <memset>
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <std+0x38>)
 8008000:	6263      	str	r3, [r4, #36]	; 0x24
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <std+0x3c>)
 8008004:	62a3      	str	r3, [r4, #40]	; 0x28
 8008006:	4b05      	ldr	r3, [pc, #20]	; (800801c <std+0x40>)
 8008008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800800a:	4b05      	ldr	r3, [pc, #20]	; (8008020 <std+0x44>)
 800800c:	6224      	str	r4, [r4, #32]
 800800e:	6323      	str	r3, [r4, #48]	; 0x30
 8008010:	bd10      	pop	{r4, pc}
 8008012:	bf00      	nop
 8008014:	08008ae5 	.word	0x08008ae5
 8008018:	08008b07 	.word	0x08008b07
 800801c:	08008b3f 	.word	0x08008b3f
 8008020:	08008b63 	.word	0x08008b63

08008024 <_cleanup_r>:
 8008024:	4901      	ldr	r1, [pc, #4]	; (800802c <_cleanup_r+0x8>)
 8008026:	f000 b8af 	b.w	8008188 <_fwalk_reent>
 800802a:	bf00      	nop
 800802c:	08007f65 	.word	0x08007f65

08008030 <__sfmoreglue>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	2268      	movs	r2, #104	; 0x68
 8008034:	1e4d      	subs	r5, r1, #1
 8008036:	4355      	muls	r5, r2
 8008038:	460e      	mov	r6, r1
 800803a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800803e:	f000 f997 	bl	8008370 <_malloc_r>
 8008042:	4604      	mov	r4, r0
 8008044:	b140      	cbz	r0, 8008058 <__sfmoreglue+0x28>
 8008046:	2100      	movs	r1, #0
 8008048:	e9c0 1600 	strd	r1, r6, [r0]
 800804c:	300c      	adds	r0, #12
 800804e:	60a0      	str	r0, [r4, #8]
 8008050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008054:	f7ff fd94 	bl	8007b80 <memset>
 8008058:	4620      	mov	r0, r4
 800805a:	bd70      	pop	{r4, r5, r6, pc}

0800805c <__sfp_lock_acquire>:
 800805c:	4801      	ldr	r0, [pc, #4]	; (8008064 <__sfp_lock_acquire+0x8>)
 800805e:	f000 b8b3 	b.w	80081c8 <__retarget_lock_acquire_recursive>
 8008062:	bf00      	nop
 8008064:	20000e29 	.word	0x20000e29

08008068 <__sfp_lock_release>:
 8008068:	4801      	ldr	r0, [pc, #4]	; (8008070 <__sfp_lock_release+0x8>)
 800806a:	f000 b8ae 	b.w	80081ca <__retarget_lock_release_recursive>
 800806e:	bf00      	nop
 8008070:	20000e29 	.word	0x20000e29

08008074 <__sinit_lock_acquire>:
 8008074:	4801      	ldr	r0, [pc, #4]	; (800807c <__sinit_lock_acquire+0x8>)
 8008076:	f000 b8a7 	b.w	80081c8 <__retarget_lock_acquire_recursive>
 800807a:	bf00      	nop
 800807c:	20000e2a 	.word	0x20000e2a

08008080 <__sinit_lock_release>:
 8008080:	4801      	ldr	r0, [pc, #4]	; (8008088 <__sinit_lock_release+0x8>)
 8008082:	f000 b8a2 	b.w	80081ca <__retarget_lock_release_recursive>
 8008086:	bf00      	nop
 8008088:	20000e2a 	.word	0x20000e2a

0800808c <__sinit>:
 800808c:	b510      	push	{r4, lr}
 800808e:	4604      	mov	r4, r0
 8008090:	f7ff fff0 	bl	8008074 <__sinit_lock_acquire>
 8008094:	69a3      	ldr	r3, [r4, #24]
 8008096:	b11b      	cbz	r3, 80080a0 <__sinit+0x14>
 8008098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809c:	f7ff bff0 	b.w	8008080 <__sinit_lock_release>
 80080a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080a4:	6523      	str	r3, [r4, #80]	; 0x50
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <__sinit+0x68>)
 80080a8:	4a13      	ldr	r2, [pc, #76]	; (80080f8 <__sinit+0x6c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80080ae:	42a3      	cmp	r3, r4
 80080b0:	bf04      	itt	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	61a3      	streq	r3, [r4, #24]
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f820 	bl	80080fc <__sfp>
 80080bc:	6060      	str	r0, [r4, #4]
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 f81c 	bl	80080fc <__sfp>
 80080c4:	60a0      	str	r0, [r4, #8]
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 f818 	bl	80080fc <__sfp>
 80080cc:	2200      	movs	r2, #0
 80080ce:	60e0      	str	r0, [r4, #12]
 80080d0:	2104      	movs	r1, #4
 80080d2:	6860      	ldr	r0, [r4, #4]
 80080d4:	f7ff ff82 	bl	8007fdc <std>
 80080d8:	68a0      	ldr	r0, [r4, #8]
 80080da:	2201      	movs	r2, #1
 80080dc:	2109      	movs	r1, #9
 80080de:	f7ff ff7d 	bl	8007fdc <std>
 80080e2:	68e0      	ldr	r0, [r4, #12]
 80080e4:	2202      	movs	r2, #2
 80080e6:	2112      	movs	r1, #18
 80080e8:	f7ff ff78 	bl	8007fdc <std>
 80080ec:	2301      	movs	r3, #1
 80080ee:	61a3      	str	r3, [r4, #24]
 80080f0:	e7d2      	b.n	8008098 <__sinit+0xc>
 80080f2:	bf00      	nop
 80080f4:	0801e544 	.word	0x0801e544
 80080f8:	08008025 	.word	0x08008025

080080fc <__sfp>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	4607      	mov	r7, r0
 8008100:	f7ff ffac 	bl	800805c <__sfp_lock_acquire>
 8008104:	4b1e      	ldr	r3, [pc, #120]	; (8008180 <__sfp+0x84>)
 8008106:	681e      	ldr	r6, [r3, #0]
 8008108:	69b3      	ldr	r3, [r6, #24]
 800810a:	b913      	cbnz	r3, 8008112 <__sfp+0x16>
 800810c:	4630      	mov	r0, r6
 800810e:	f7ff ffbd 	bl	800808c <__sinit>
 8008112:	3648      	adds	r6, #72	; 0x48
 8008114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008118:	3b01      	subs	r3, #1
 800811a:	d503      	bpl.n	8008124 <__sfp+0x28>
 800811c:	6833      	ldr	r3, [r6, #0]
 800811e:	b30b      	cbz	r3, 8008164 <__sfp+0x68>
 8008120:	6836      	ldr	r6, [r6, #0]
 8008122:	e7f7      	b.n	8008114 <__sfp+0x18>
 8008124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008128:	b9d5      	cbnz	r5, 8008160 <__sfp+0x64>
 800812a:	4b16      	ldr	r3, [pc, #88]	; (8008184 <__sfp+0x88>)
 800812c:	60e3      	str	r3, [r4, #12]
 800812e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008132:	6665      	str	r5, [r4, #100]	; 0x64
 8008134:	f000 f847 	bl	80081c6 <__retarget_lock_init_recursive>
 8008138:	f7ff ff96 	bl	8008068 <__sfp_lock_release>
 800813c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008144:	6025      	str	r5, [r4, #0]
 8008146:	61a5      	str	r5, [r4, #24]
 8008148:	2208      	movs	r2, #8
 800814a:	4629      	mov	r1, r5
 800814c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008150:	f7ff fd16 	bl	8007b80 <memset>
 8008154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800815c:	4620      	mov	r0, r4
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	3468      	adds	r4, #104	; 0x68
 8008162:	e7d9      	b.n	8008118 <__sfp+0x1c>
 8008164:	2104      	movs	r1, #4
 8008166:	4638      	mov	r0, r7
 8008168:	f7ff ff62 	bl	8008030 <__sfmoreglue>
 800816c:	4604      	mov	r4, r0
 800816e:	6030      	str	r0, [r6, #0]
 8008170:	2800      	cmp	r0, #0
 8008172:	d1d5      	bne.n	8008120 <__sfp+0x24>
 8008174:	f7ff ff78 	bl	8008068 <__sfp_lock_release>
 8008178:	230c      	movs	r3, #12
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	e7ee      	b.n	800815c <__sfp+0x60>
 800817e:	bf00      	nop
 8008180:	0801e544 	.word	0x0801e544
 8008184:	ffff0001 	.word	0xffff0001

08008188 <_fwalk_reent>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	4606      	mov	r6, r0
 800818e:	4688      	mov	r8, r1
 8008190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008194:	2700      	movs	r7, #0
 8008196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800819a:	f1b9 0901 	subs.w	r9, r9, #1
 800819e:	d505      	bpl.n	80081ac <_fwalk_reent+0x24>
 80081a0:	6824      	ldr	r4, [r4, #0]
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	d1f7      	bne.n	8008196 <_fwalk_reent+0xe>
 80081a6:	4638      	mov	r0, r7
 80081a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ac:	89ab      	ldrh	r3, [r5, #12]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d907      	bls.n	80081c2 <_fwalk_reent+0x3a>
 80081b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081b6:	3301      	adds	r3, #1
 80081b8:	d003      	beq.n	80081c2 <_fwalk_reent+0x3a>
 80081ba:	4629      	mov	r1, r5
 80081bc:	4630      	mov	r0, r6
 80081be:	47c0      	blx	r8
 80081c0:	4307      	orrs	r7, r0
 80081c2:	3568      	adds	r5, #104	; 0x68
 80081c4:	e7e9      	b.n	800819a <_fwalk_reent+0x12>

080081c6 <__retarget_lock_init_recursive>:
 80081c6:	4770      	bx	lr

080081c8 <__retarget_lock_acquire_recursive>:
 80081c8:	4770      	bx	lr

080081ca <__retarget_lock_release_recursive>:
 80081ca:	4770      	bx	lr

080081cc <__swhatbuf_r>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	460e      	mov	r6, r1
 80081d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d4:	2900      	cmp	r1, #0
 80081d6:	b096      	sub	sp, #88	; 0x58
 80081d8:	4614      	mov	r4, r2
 80081da:	461d      	mov	r5, r3
 80081dc:	da08      	bge.n	80081f0 <__swhatbuf_r+0x24>
 80081de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	061a      	lsls	r2, r3, #24
 80081e8:	d410      	bmi.n	800820c <__swhatbuf_r+0x40>
 80081ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ee:	e00e      	b.n	800820e <__swhatbuf_r+0x42>
 80081f0:	466a      	mov	r2, sp
 80081f2:	f000 fcdd 	bl	8008bb0 <_fstat_r>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	dbf1      	blt.n	80081de <__swhatbuf_r+0x12>
 80081fa:	9a01      	ldr	r2, [sp, #4]
 80081fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008204:	425a      	negs	r2, r3
 8008206:	415a      	adcs	r2, r3
 8008208:	602a      	str	r2, [r5, #0]
 800820a:	e7ee      	b.n	80081ea <__swhatbuf_r+0x1e>
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	2000      	movs	r0, #0
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	b016      	add	sp, #88	; 0x58
 8008214:	bd70      	pop	{r4, r5, r6, pc}
	...

08008218 <__smakebuf_r>:
 8008218:	898b      	ldrh	r3, [r1, #12]
 800821a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800821c:	079d      	lsls	r5, r3, #30
 800821e:	4606      	mov	r6, r0
 8008220:	460c      	mov	r4, r1
 8008222:	d507      	bpl.n	8008234 <__smakebuf_r+0x1c>
 8008224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	6123      	str	r3, [r4, #16]
 800822c:	2301      	movs	r3, #1
 800822e:	6163      	str	r3, [r4, #20]
 8008230:	b002      	add	sp, #8
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	ab01      	add	r3, sp, #4
 8008236:	466a      	mov	r2, sp
 8008238:	f7ff ffc8 	bl	80081cc <__swhatbuf_r>
 800823c:	9900      	ldr	r1, [sp, #0]
 800823e:	4605      	mov	r5, r0
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f895 	bl	8008370 <_malloc_r>
 8008246:	b948      	cbnz	r0, 800825c <__smakebuf_r+0x44>
 8008248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824c:	059a      	lsls	r2, r3, #22
 800824e:	d4ef      	bmi.n	8008230 <__smakebuf_r+0x18>
 8008250:	f023 0303 	bic.w	r3, r3, #3
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	e7e3      	b.n	8008224 <__smakebuf_r+0xc>
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <__smakebuf_r+0x7c>)
 800825e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	6020      	str	r0, [r4, #0]
 8008264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	9b00      	ldr	r3, [sp, #0]
 800826c:	6163      	str	r3, [r4, #20]
 800826e:	9b01      	ldr	r3, [sp, #4]
 8008270:	6120      	str	r0, [r4, #16]
 8008272:	b15b      	cbz	r3, 800828c <__smakebuf_r+0x74>
 8008274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008278:	4630      	mov	r0, r6
 800827a:	f000 fcab 	bl	8008bd4 <_isatty_r>
 800827e:	b128      	cbz	r0, 800828c <__smakebuf_r+0x74>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	89a0      	ldrh	r0, [r4, #12]
 800828e:	4305      	orrs	r5, r0
 8008290:	81a5      	strh	r5, [r4, #12]
 8008292:	e7cd      	b.n	8008230 <__smakebuf_r+0x18>
 8008294:	08008025 	.word	0x08008025

08008298 <_free_r>:
 8008298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800829a:	2900      	cmp	r1, #0
 800829c:	d044      	beq.n	8008328 <_free_r+0x90>
 800829e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a2:	9001      	str	r0, [sp, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f1a1 0404 	sub.w	r4, r1, #4
 80082aa:	bfb8      	it	lt
 80082ac:	18e4      	addlt	r4, r4, r3
 80082ae:	f000 fcb3 	bl	8008c18 <__malloc_lock>
 80082b2:	4a1e      	ldr	r2, [pc, #120]	; (800832c <_free_r+0x94>)
 80082b4:	9801      	ldr	r0, [sp, #4]
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	b933      	cbnz	r3, 80082c8 <_free_r+0x30>
 80082ba:	6063      	str	r3, [r4, #4]
 80082bc:	6014      	str	r4, [r2, #0]
 80082be:	b003      	add	sp, #12
 80082c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082c4:	f000 bcae 	b.w	8008c24 <__malloc_unlock>
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	d908      	bls.n	80082de <_free_r+0x46>
 80082cc:	6825      	ldr	r5, [r4, #0]
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	428b      	cmp	r3, r1
 80082d2:	bf01      	itttt	eq
 80082d4:	6819      	ldreq	r1, [r3, #0]
 80082d6:	685b      	ldreq	r3, [r3, #4]
 80082d8:	1949      	addeq	r1, r1, r5
 80082da:	6021      	streq	r1, [r4, #0]
 80082dc:	e7ed      	b.n	80082ba <_free_r+0x22>
 80082de:	461a      	mov	r2, r3
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	b10b      	cbz	r3, 80082e8 <_free_r+0x50>
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	d9fa      	bls.n	80082de <_free_r+0x46>
 80082e8:	6811      	ldr	r1, [r2, #0]
 80082ea:	1855      	adds	r5, r2, r1
 80082ec:	42a5      	cmp	r5, r4
 80082ee:	d10b      	bne.n	8008308 <_free_r+0x70>
 80082f0:	6824      	ldr	r4, [r4, #0]
 80082f2:	4421      	add	r1, r4
 80082f4:	1854      	adds	r4, r2, r1
 80082f6:	42a3      	cmp	r3, r4
 80082f8:	6011      	str	r1, [r2, #0]
 80082fa:	d1e0      	bne.n	80082be <_free_r+0x26>
 80082fc:	681c      	ldr	r4, [r3, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	6053      	str	r3, [r2, #4]
 8008302:	4421      	add	r1, r4
 8008304:	6011      	str	r1, [r2, #0]
 8008306:	e7da      	b.n	80082be <_free_r+0x26>
 8008308:	d902      	bls.n	8008310 <_free_r+0x78>
 800830a:	230c      	movs	r3, #12
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	e7d6      	b.n	80082be <_free_r+0x26>
 8008310:	6825      	ldr	r5, [r4, #0]
 8008312:	1961      	adds	r1, r4, r5
 8008314:	428b      	cmp	r3, r1
 8008316:	bf04      	itt	eq
 8008318:	6819      	ldreq	r1, [r3, #0]
 800831a:	685b      	ldreq	r3, [r3, #4]
 800831c:	6063      	str	r3, [r4, #4]
 800831e:	bf04      	itt	eq
 8008320:	1949      	addeq	r1, r1, r5
 8008322:	6021      	streq	r1, [r4, #0]
 8008324:	6054      	str	r4, [r2, #4]
 8008326:	e7ca      	b.n	80082be <_free_r+0x26>
 8008328:	b003      	add	sp, #12
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	20000e2c 	.word	0x20000e2c

08008330 <sbrk_aligned>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	4e0e      	ldr	r6, [pc, #56]	; (800836c <sbrk_aligned+0x3c>)
 8008334:	460c      	mov	r4, r1
 8008336:	6831      	ldr	r1, [r6, #0]
 8008338:	4605      	mov	r5, r0
 800833a:	b911      	cbnz	r1, 8008342 <sbrk_aligned+0x12>
 800833c:	f000 fbc2 	bl	8008ac4 <_sbrk_r>
 8008340:	6030      	str	r0, [r6, #0]
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f000 fbbd 	bl	8008ac4 <_sbrk_r>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	d00a      	beq.n	8008364 <sbrk_aligned+0x34>
 800834e:	1cc4      	adds	r4, r0, #3
 8008350:	f024 0403 	bic.w	r4, r4, #3
 8008354:	42a0      	cmp	r0, r4
 8008356:	d007      	beq.n	8008368 <sbrk_aligned+0x38>
 8008358:	1a21      	subs	r1, r4, r0
 800835a:	4628      	mov	r0, r5
 800835c:	f000 fbb2 	bl	8008ac4 <_sbrk_r>
 8008360:	3001      	adds	r0, #1
 8008362:	d101      	bne.n	8008368 <sbrk_aligned+0x38>
 8008364:	f04f 34ff 	mov.w	r4, #4294967295
 8008368:	4620      	mov	r0, r4
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	20000e30 	.word	0x20000e30

08008370 <_malloc_r>:
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008374:	1ccd      	adds	r5, r1, #3
 8008376:	f025 0503 	bic.w	r5, r5, #3
 800837a:	3508      	adds	r5, #8
 800837c:	2d0c      	cmp	r5, #12
 800837e:	bf38      	it	cc
 8008380:	250c      	movcc	r5, #12
 8008382:	2d00      	cmp	r5, #0
 8008384:	4607      	mov	r7, r0
 8008386:	db01      	blt.n	800838c <_malloc_r+0x1c>
 8008388:	42a9      	cmp	r1, r5
 800838a:	d905      	bls.n	8008398 <_malloc_r+0x28>
 800838c:	230c      	movs	r3, #12
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	2600      	movs	r6, #0
 8008392:	4630      	mov	r0, r6
 8008394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008398:	4e2e      	ldr	r6, [pc, #184]	; (8008454 <_malloc_r+0xe4>)
 800839a:	f000 fc3d 	bl	8008c18 <__malloc_lock>
 800839e:	6833      	ldr	r3, [r6, #0]
 80083a0:	461c      	mov	r4, r3
 80083a2:	bb34      	cbnz	r4, 80083f2 <_malloc_r+0x82>
 80083a4:	4629      	mov	r1, r5
 80083a6:	4638      	mov	r0, r7
 80083a8:	f7ff ffc2 	bl	8008330 <sbrk_aligned>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	4604      	mov	r4, r0
 80083b0:	d14d      	bne.n	800844e <_malloc_r+0xde>
 80083b2:	6834      	ldr	r4, [r6, #0]
 80083b4:	4626      	mov	r6, r4
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	d140      	bne.n	800843c <_malloc_r+0xcc>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	4631      	mov	r1, r6
 80083be:	4638      	mov	r0, r7
 80083c0:	eb04 0803 	add.w	r8, r4, r3
 80083c4:	f000 fb7e 	bl	8008ac4 <_sbrk_r>
 80083c8:	4580      	cmp	r8, r0
 80083ca:	d13a      	bne.n	8008442 <_malloc_r+0xd2>
 80083cc:	6821      	ldr	r1, [r4, #0]
 80083ce:	3503      	adds	r5, #3
 80083d0:	1a6d      	subs	r5, r5, r1
 80083d2:	f025 0503 	bic.w	r5, r5, #3
 80083d6:	3508      	adds	r5, #8
 80083d8:	2d0c      	cmp	r5, #12
 80083da:	bf38      	it	cc
 80083dc:	250c      	movcc	r5, #12
 80083de:	4629      	mov	r1, r5
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7ff ffa5 	bl	8008330 <sbrk_aligned>
 80083e6:	3001      	adds	r0, #1
 80083e8:	d02b      	beq.n	8008442 <_malloc_r+0xd2>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	442b      	add	r3, r5
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	e00e      	b.n	8008410 <_malloc_r+0xa0>
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	1b52      	subs	r2, r2, r5
 80083f6:	d41e      	bmi.n	8008436 <_malloc_r+0xc6>
 80083f8:	2a0b      	cmp	r2, #11
 80083fa:	d916      	bls.n	800842a <_malloc_r+0xba>
 80083fc:	1961      	adds	r1, r4, r5
 80083fe:	42a3      	cmp	r3, r4
 8008400:	6025      	str	r5, [r4, #0]
 8008402:	bf18      	it	ne
 8008404:	6059      	strne	r1, [r3, #4]
 8008406:	6863      	ldr	r3, [r4, #4]
 8008408:	bf08      	it	eq
 800840a:	6031      	streq	r1, [r6, #0]
 800840c:	5162      	str	r2, [r4, r5]
 800840e:	604b      	str	r3, [r1, #4]
 8008410:	4638      	mov	r0, r7
 8008412:	f104 060b 	add.w	r6, r4, #11
 8008416:	f000 fc05 	bl	8008c24 <__malloc_unlock>
 800841a:	f026 0607 	bic.w	r6, r6, #7
 800841e:	1d23      	adds	r3, r4, #4
 8008420:	1af2      	subs	r2, r6, r3
 8008422:	d0b6      	beq.n	8008392 <_malloc_r+0x22>
 8008424:	1b9b      	subs	r3, r3, r6
 8008426:	50a3      	str	r3, [r4, r2]
 8008428:	e7b3      	b.n	8008392 <_malloc_r+0x22>
 800842a:	6862      	ldr	r2, [r4, #4]
 800842c:	42a3      	cmp	r3, r4
 800842e:	bf0c      	ite	eq
 8008430:	6032      	streq	r2, [r6, #0]
 8008432:	605a      	strne	r2, [r3, #4]
 8008434:	e7ec      	b.n	8008410 <_malloc_r+0xa0>
 8008436:	4623      	mov	r3, r4
 8008438:	6864      	ldr	r4, [r4, #4]
 800843a:	e7b2      	b.n	80083a2 <_malloc_r+0x32>
 800843c:	4634      	mov	r4, r6
 800843e:	6876      	ldr	r6, [r6, #4]
 8008440:	e7b9      	b.n	80083b6 <_malloc_r+0x46>
 8008442:	230c      	movs	r3, #12
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	4638      	mov	r0, r7
 8008448:	f000 fbec 	bl	8008c24 <__malloc_unlock>
 800844c:	e7a1      	b.n	8008392 <_malloc_r+0x22>
 800844e:	6025      	str	r5, [r4, #0]
 8008450:	e7de      	b.n	8008410 <_malloc_r+0xa0>
 8008452:	bf00      	nop
 8008454:	20000e2c 	.word	0x20000e2c

08008458 <__sfputc_r>:
 8008458:	6893      	ldr	r3, [r2, #8]
 800845a:	3b01      	subs	r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	b410      	push	{r4}
 8008460:	6093      	str	r3, [r2, #8]
 8008462:	da08      	bge.n	8008476 <__sfputc_r+0x1e>
 8008464:	6994      	ldr	r4, [r2, #24]
 8008466:	42a3      	cmp	r3, r4
 8008468:	db01      	blt.n	800846e <__sfputc_r+0x16>
 800846a:	290a      	cmp	r1, #10
 800846c:	d103      	bne.n	8008476 <__sfputc_r+0x1e>
 800846e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008472:	f7ff bc31 	b.w	8007cd8 <__swbuf_r>
 8008476:	6813      	ldr	r3, [r2, #0]
 8008478:	1c58      	adds	r0, r3, #1
 800847a:	6010      	str	r0, [r2, #0]
 800847c:	7019      	strb	r1, [r3, #0]
 800847e:	4608      	mov	r0, r1
 8008480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008484:	4770      	bx	lr

08008486 <__sfputs_r>:
 8008486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008488:	4606      	mov	r6, r0
 800848a:	460f      	mov	r7, r1
 800848c:	4614      	mov	r4, r2
 800848e:	18d5      	adds	r5, r2, r3
 8008490:	42ac      	cmp	r4, r5
 8008492:	d101      	bne.n	8008498 <__sfputs_r+0x12>
 8008494:	2000      	movs	r0, #0
 8008496:	e007      	b.n	80084a8 <__sfputs_r+0x22>
 8008498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849c:	463a      	mov	r2, r7
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff ffda 	bl	8008458 <__sfputc_r>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d1f3      	bne.n	8008490 <__sfputs_r+0xa>
 80084a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084ac <_vfiprintf_r>:
 80084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	460d      	mov	r5, r1
 80084b2:	b09d      	sub	sp, #116	; 0x74
 80084b4:	4614      	mov	r4, r2
 80084b6:	4698      	mov	r8, r3
 80084b8:	4606      	mov	r6, r0
 80084ba:	b118      	cbz	r0, 80084c4 <_vfiprintf_r+0x18>
 80084bc:	6983      	ldr	r3, [r0, #24]
 80084be:	b90b      	cbnz	r3, 80084c4 <_vfiprintf_r+0x18>
 80084c0:	f7ff fde4 	bl	800808c <__sinit>
 80084c4:	4b89      	ldr	r3, [pc, #548]	; (80086ec <_vfiprintf_r+0x240>)
 80084c6:	429d      	cmp	r5, r3
 80084c8:	d11b      	bne.n	8008502 <_vfiprintf_r+0x56>
 80084ca:	6875      	ldr	r5, [r6, #4]
 80084cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ce:	07d9      	lsls	r1, r3, #31
 80084d0:	d405      	bmi.n	80084de <_vfiprintf_r+0x32>
 80084d2:	89ab      	ldrh	r3, [r5, #12]
 80084d4:	059a      	lsls	r2, r3, #22
 80084d6:	d402      	bmi.n	80084de <_vfiprintf_r+0x32>
 80084d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084da:	f7ff fe75 	bl	80081c8 <__retarget_lock_acquire_recursive>
 80084de:	89ab      	ldrh	r3, [r5, #12]
 80084e0:	071b      	lsls	r3, r3, #28
 80084e2:	d501      	bpl.n	80084e8 <_vfiprintf_r+0x3c>
 80084e4:	692b      	ldr	r3, [r5, #16]
 80084e6:	b9eb      	cbnz	r3, 8008524 <_vfiprintf_r+0x78>
 80084e8:	4629      	mov	r1, r5
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff fc46 	bl	8007d7c <__swsetup_r>
 80084f0:	b1c0      	cbz	r0, 8008524 <_vfiprintf_r+0x78>
 80084f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f4:	07dc      	lsls	r4, r3, #31
 80084f6:	d50e      	bpl.n	8008516 <_vfiprintf_r+0x6a>
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	b01d      	add	sp, #116	; 0x74
 80084fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008502:	4b7b      	ldr	r3, [pc, #492]	; (80086f0 <_vfiprintf_r+0x244>)
 8008504:	429d      	cmp	r5, r3
 8008506:	d101      	bne.n	800850c <_vfiprintf_r+0x60>
 8008508:	68b5      	ldr	r5, [r6, #8]
 800850a:	e7df      	b.n	80084cc <_vfiprintf_r+0x20>
 800850c:	4b79      	ldr	r3, [pc, #484]	; (80086f4 <_vfiprintf_r+0x248>)
 800850e:	429d      	cmp	r5, r3
 8008510:	bf08      	it	eq
 8008512:	68f5      	ldreq	r5, [r6, #12]
 8008514:	e7da      	b.n	80084cc <_vfiprintf_r+0x20>
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	0598      	lsls	r0, r3, #22
 800851a:	d4ed      	bmi.n	80084f8 <_vfiprintf_r+0x4c>
 800851c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851e:	f7ff fe54 	bl	80081ca <__retarget_lock_release_recursive>
 8008522:	e7e9      	b.n	80084f8 <_vfiprintf_r+0x4c>
 8008524:	2300      	movs	r3, #0
 8008526:	9309      	str	r3, [sp, #36]	; 0x24
 8008528:	2320      	movs	r3, #32
 800852a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800852e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008532:	2330      	movs	r3, #48	; 0x30
 8008534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086f8 <_vfiprintf_r+0x24c>
 8008538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800853c:	f04f 0901 	mov.w	r9, #1
 8008540:	4623      	mov	r3, r4
 8008542:	469a      	mov	sl, r3
 8008544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008548:	b10a      	cbz	r2, 800854e <_vfiprintf_r+0xa2>
 800854a:	2a25      	cmp	r2, #37	; 0x25
 800854c:	d1f9      	bne.n	8008542 <_vfiprintf_r+0x96>
 800854e:	ebba 0b04 	subs.w	fp, sl, r4
 8008552:	d00b      	beq.n	800856c <_vfiprintf_r+0xc0>
 8008554:	465b      	mov	r3, fp
 8008556:	4622      	mov	r2, r4
 8008558:	4629      	mov	r1, r5
 800855a:	4630      	mov	r0, r6
 800855c:	f7ff ff93 	bl	8008486 <__sfputs_r>
 8008560:	3001      	adds	r0, #1
 8008562:	f000 80aa 	beq.w	80086ba <_vfiprintf_r+0x20e>
 8008566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008568:	445a      	add	r2, fp
 800856a:	9209      	str	r2, [sp, #36]	; 0x24
 800856c:	f89a 3000 	ldrb.w	r3, [sl]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80a2 	beq.w	80086ba <_vfiprintf_r+0x20e>
 8008576:	2300      	movs	r3, #0
 8008578:	f04f 32ff 	mov.w	r2, #4294967295
 800857c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008580:	f10a 0a01 	add.w	sl, sl, #1
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	9307      	str	r3, [sp, #28]
 8008588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800858c:	931a      	str	r3, [sp, #104]	; 0x68
 800858e:	4654      	mov	r4, sl
 8008590:	2205      	movs	r2, #5
 8008592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008596:	4858      	ldr	r0, [pc, #352]	; (80086f8 <_vfiprintf_r+0x24c>)
 8008598:	f7f7 fe22 	bl	80001e0 <memchr>
 800859c:	9a04      	ldr	r2, [sp, #16]
 800859e:	b9d8      	cbnz	r0, 80085d8 <_vfiprintf_r+0x12c>
 80085a0:	06d1      	lsls	r1, r2, #27
 80085a2:	bf44      	itt	mi
 80085a4:	2320      	movmi	r3, #32
 80085a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085aa:	0713      	lsls	r3, r2, #28
 80085ac:	bf44      	itt	mi
 80085ae:	232b      	movmi	r3, #43	; 0x2b
 80085b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b4:	f89a 3000 	ldrb.w	r3, [sl]
 80085b8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ba:	d015      	beq.n	80085e8 <_vfiprintf_r+0x13c>
 80085bc:	9a07      	ldr	r2, [sp, #28]
 80085be:	4654      	mov	r4, sl
 80085c0:	2000      	movs	r0, #0
 80085c2:	f04f 0c0a 	mov.w	ip, #10
 80085c6:	4621      	mov	r1, r4
 80085c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085cc:	3b30      	subs	r3, #48	; 0x30
 80085ce:	2b09      	cmp	r3, #9
 80085d0:	d94e      	bls.n	8008670 <_vfiprintf_r+0x1c4>
 80085d2:	b1b0      	cbz	r0, 8008602 <_vfiprintf_r+0x156>
 80085d4:	9207      	str	r2, [sp, #28]
 80085d6:	e014      	b.n	8008602 <_vfiprintf_r+0x156>
 80085d8:	eba0 0308 	sub.w	r3, r0, r8
 80085dc:	fa09 f303 	lsl.w	r3, r9, r3
 80085e0:	4313      	orrs	r3, r2
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	46a2      	mov	sl, r4
 80085e6:	e7d2      	b.n	800858e <_vfiprintf_r+0xe2>
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	1d19      	adds	r1, r3, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	9103      	str	r1, [sp, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bfbb      	ittet	lt
 80085f4:	425b      	neglt	r3, r3
 80085f6:	f042 0202 	orrlt.w	r2, r2, #2
 80085fa:	9307      	strge	r3, [sp, #28]
 80085fc:	9307      	strlt	r3, [sp, #28]
 80085fe:	bfb8      	it	lt
 8008600:	9204      	strlt	r2, [sp, #16]
 8008602:	7823      	ldrb	r3, [r4, #0]
 8008604:	2b2e      	cmp	r3, #46	; 0x2e
 8008606:	d10c      	bne.n	8008622 <_vfiprintf_r+0x176>
 8008608:	7863      	ldrb	r3, [r4, #1]
 800860a:	2b2a      	cmp	r3, #42	; 0x2a
 800860c:	d135      	bne.n	800867a <_vfiprintf_r+0x1ce>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	1d1a      	adds	r2, r3, #4
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	9203      	str	r2, [sp, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	f04f 33ff 	movlt.w	r3, #4294967295
 800861e:	3402      	adds	r4, #2
 8008620:	9305      	str	r3, [sp, #20]
 8008622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008708 <_vfiprintf_r+0x25c>
 8008626:	7821      	ldrb	r1, [r4, #0]
 8008628:	2203      	movs	r2, #3
 800862a:	4650      	mov	r0, sl
 800862c:	f7f7 fdd8 	bl	80001e0 <memchr>
 8008630:	b140      	cbz	r0, 8008644 <_vfiprintf_r+0x198>
 8008632:	2340      	movs	r3, #64	; 0x40
 8008634:	eba0 000a 	sub.w	r0, r0, sl
 8008638:	fa03 f000 	lsl.w	r0, r3, r0
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	4303      	orrs	r3, r0
 8008640:	3401      	adds	r4, #1
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008648:	482c      	ldr	r0, [pc, #176]	; (80086fc <_vfiprintf_r+0x250>)
 800864a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800864e:	2206      	movs	r2, #6
 8008650:	f7f7 fdc6 	bl	80001e0 <memchr>
 8008654:	2800      	cmp	r0, #0
 8008656:	d03f      	beq.n	80086d8 <_vfiprintf_r+0x22c>
 8008658:	4b29      	ldr	r3, [pc, #164]	; (8008700 <_vfiprintf_r+0x254>)
 800865a:	bb1b      	cbnz	r3, 80086a4 <_vfiprintf_r+0x1f8>
 800865c:	9b03      	ldr	r3, [sp, #12]
 800865e:	3307      	adds	r3, #7
 8008660:	f023 0307 	bic.w	r3, r3, #7
 8008664:	3308      	adds	r3, #8
 8008666:	9303      	str	r3, [sp, #12]
 8008668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866a:	443b      	add	r3, r7
 800866c:	9309      	str	r3, [sp, #36]	; 0x24
 800866e:	e767      	b.n	8008540 <_vfiprintf_r+0x94>
 8008670:	fb0c 3202 	mla	r2, ip, r2, r3
 8008674:	460c      	mov	r4, r1
 8008676:	2001      	movs	r0, #1
 8008678:	e7a5      	b.n	80085c6 <_vfiprintf_r+0x11a>
 800867a:	2300      	movs	r3, #0
 800867c:	3401      	adds	r4, #1
 800867e:	9305      	str	r3, [sp, #20]
 8008680:	4619      	mov	r1, r3
 8008682:	f04f 0c0a 	mov.w	ip, #10
 8008686:	4620      	mov	r0, r4
 8008688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800868c:	3a30      	subs	r2, #48	; 0x30
 800868e:	2a09      	cmp	r2, #9
 8008690:	d903      	bls.n	800869a <_vfiprintf_r+0x1ee>
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0c5      	beq.n	8008622 <_vfiprintf_r+0x176>
 8008696:	9105      	str	r1, [sp, #20]
 8008698:	e7c3      	b.n	8008622 <_vfiprintf_r+0x176>
 800869a:	fb0c 2101 	mla	r1, ip, r1, r2
 800869e:	4604      	mov	r4, r0
 80086a0:	2301      	movs	r3, #1
 80086a2:	e7f0      	b.n	8008686 <_vfiprintf_r+0x1da>
 80086a4:	ab03      	add	r3, sp, #12
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	462a      	mov	r2, r5
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <_vfiprintf_r+0x258>)
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	4630      	mov	r0, r6
 80086b0:	f3af 8000 	nop.w
 80086b4:	4607      	mov	r7, r0
 80086b6:	1c78      	adds	r0, r7, #1
 80086b8:	d1d6      	bne.n	8008668 <_vfiprintf_r+0x1bc>
 80086ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086bc:	07d9      	lsls	r1, r3, #31
 80086be:	d405      	bmi.n	80086cc <_vfiprintf_r+0x220>
 80086c0:	89ab      	ldrh	r3, [r5, #12]
 80086c2:	059a      	lsls	r2, r3, #22
 80086c4:	d402      	bmi.n	80086cc <_vfiprintf_r+0x220>
 80086c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086c8:	f7ff fd7f 	bl	80081ca <__retarget_lock_release_recursive>
 80086cc:	89ab      	ldrh	r3, [r5, #12]
 80086ce:	065b      	lsls	r3, r3, #25
 80086d0:	f53f af12 	bmi.w	80084f8 <_vfiprintf_r+0x4c>
 80086d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d6:	e711      	b.n	80084fc <_vfiprintf_r+0x50>
 80086d8:	ab03      	add	r3, sp, #12
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	462a      	mov	r2, r5
 80086de:	4b09      	ldr	r3, [pc, #36]	; (8008704 <_vfiprintf_r+0x258>)
 80086e0:	a904      	add	r1, sp, #16
 80086e2:	4630      	mov	r0, r6
 80086e4:	f000 f880 	bl	80087e8 <_printf_i>
 80086e8:	e7e4      	b.n	80086b4 <_vfiprintf_r+0x208>
 80086ea:	bf00      	nop
 80086ec:	0801e568 	.word	0x0801e568
 80086f0:	0801e588 	.word	0x0801e588
 80086f4:	0801e548 	.word	0x0801e548
 80086f8:	0801e5a8 	.word	0x0801e5a8
 80086fc:	0801e5b2 	.word	0x0801e5b2
 8008700:	00000000 	.word	0x00000000
 8008704:	08008487 	.word	0x08008487
 8008708:	0801e5ae 	.word	0x0801e5ae

0800870c <_printf_common>:
 800870c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	4616      	mov	r6, r2
 8008712:	4699      	mov	r9, r3
 8008714:	688a      	ldr	r2, [r1, #8]
 8008716:	690b      	ldr	r3, [r1, #16]
 8008718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800871c:	4293      	cmp	r3, r2
 800871e:	bfb8      	it	lt
 8008720:	4613      	movlt	r3, r2
 8008722:	6033      	str	r3, [r6, #0]
 8008724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008728:	4607      	mov	r7, r0
 800872a:	460c      	mov	r4, r1
 800872c:	b10a      	cbz	r2, 8008732 <_printf_common+0x26>
 800872e:	3301      	adds	r3, #1
 8008730:	6033      	str	r3, [r6, #0]
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	0699      	lsls	r1, r3, #26
 8008736:	bf42      	ittt	mi
 8008738:	6833      	ldrmi	r3, [r6, #0]
 800873a:	3302      	addmi	r3, #2
 800873c:	6033      	strmi	r3, [r6, #0]
 800873e:	6825      	ldr	r5, [r4, #0]
 8008740:	f015 0506 	ands.w	r5, r5, #6
 8008744:	d106      	bne.n	8008754 <_printf_common+0x48>
 8008746:	f104 0a19 	add.w	sl, r4, #25
 800874a:	68e3      	ldr	r3, [r4, #12]
 800874c:	6832      	ldr	r2, [r6, #0]
 800874e:	1a9b      	subs	r3, r3, r2
 8008750:	42ab      	cmp	r3, r5
 8008752:	dc26      	bgt.n	80087a2 <_printf_common+0x96>
 8008754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008758:	1e13      	subs	r3, r2, #0
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	bf18      	it	ne
 800875e:	2301      	movne	r3, #1
 8008760:	0692      	lsls	r2, r2, #26
 8008762:	d42b      	bmi.n	80087bc <_printf_common+0xb0>
 8008764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008768:	4649      	mov	r1, r9
 800876a:	4638      	mov	r0, r7
 800876c:	47c0      	blx	r8
 800876e:	3001      	adds	r0, #1
 8008770:	d01e      	beq.n	80087b0 <_printf_common+0xa4>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	68e5      	ldr	r5, [r4, #12]
 8008776:	6832      	ldr	r2, [r6, #0]
 8008778:	f003 0306 	and.w	r3, r3, #6
 800877c:	2b04      	cmp	r3, #4
 800877e:	bf08      	it	eq
 8008780:	1aad      	subeq	r5, r5, r2
 8008782:	68a3      	ldr	r3, [r4, #8]
 8008784:	6922      	ldr	r2, [r4, #16]
 8008786:	bf0c      	ite	eq
 8008788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800878c:	2500      	movne	r5, #0
 800878e:	4293      	cmp	r3, r2
 8008790:	bfc4      	itt	gt
 8008792:	1a9b      	subgt	r3, r3, r2
 8008794:	18ed      	addgt	r5, r5, r3
 8008796:	2600      	movs	r6, #0
 8008798:	341a      	adds	r4, #26
 800879a:	42b5      	cmp	r5, r6
 800879c:	d11a      	bne.n	80087d4 <_printf_common+0xc8>
 800879e:	2000      	movs	r0, #0
 80087a0:	e008      	b.n	80087b4 <_printf_common+0xa8>
 80087a2:	2301      	movs	r3, #1
 80087a4:	4652      	mov	r2, sl
 80087a6:	4649      	mov	r1, r9
 80087a8:	4638      	mov	r0, r7
 80087aa:	47c0      	blx	r8
 80087ac:	3001      	adds	r0, #1
 80087ae:	d103      	bne.n	80087b8 <_printf_common+0xac>
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b8:	3501      	adds	r5, #1
 80087ba:	e7c6      	b.n	800874a <_printf_common+0x3e>
 80087bc:	18e1      	adds	r1, r4, r3
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	2030      	movs	r0, #48	; 0x30
 80087c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087c6:	4422      	add	r2, r4
 80087c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087d0:	3302      	adds	r3, #2
 80087d2:	e7c7      	b.n	8008764 <_printf_common+0x58>
 80087d4:	2301      	movs	r3, #1
 80087d6:	4622      	mov	r2, r4
 80087d8:	4649      	mov	r1, r9
 80087da:	4638      	mov	r0, r7
 80087dc:	47c0      	blx	r8
 80087de:	3001      	adds	r0, #1
 80087e0:	d0e6      	beq.n	80087b0 <_printf_common+0xa4>
 80087e2:	3601      	adds	r6, #1
 80087e4:	e7d9      	b.n	800879a <_printf_common+0x8e>
	...

080087e8 <_printf_i>:
 80087e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	7e0f      	ldrb	r7, [r1, #24]
 80087ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087f0:	2f78      	cmp	r7, #120	; 0x78
 80087f2:	4691      	mov	r9, r2
 80087f4:	4680      	mov	r8, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	469a      	mov	sl, r3
 80087fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087fe:	d807      	bhi.n	8008810 <_printf_i+0x28>
 8008800:	2f62      	cmp	r7, #98	; 0x62
 8008802:	d80a      	bhi.n	800881a <_printf_i+0x32>
 8008804:	2f00      	cmp	r7, #0
 8008806:	f000 80d8 	beq.w	80089ba <_printf_i+0x1d2>
 800880a:	2f58      	cmp	r7, #88	; 0x58
 800880c:	f000 80a3 	beq.w	8008956 <_printf_i+0x16e>
 8008810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008818:	e03a      	b.n	8008890 <_printf_i+0xa8>
 800881a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800881e:	2b15      	cmp	r3, #21
 8008820:	d8f6      	bhi.n	8008810 <_printf_i+0x28>
 8008822:	a101      	add	r1, pc, #4	; (adr r1, 8008828 <_printf_i+0x40>)
 8008824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008828:	08008881 	.word	0x08008881
 800882c:	08008895 	.word	0x08008895
 8008830:	08008811 	.word	0x08008811
 8008834:	08008811 	.word	0x08008811
 8008838:	08008811 	.word	0x08008811
 800883c:	08008811 	.word	0x08008811
 8008840:	08008895 	.word	0x08008895
 8008844:	08008811 	.word	0x08008811
 8008848:	08008811 	.word	0x08008811
 800884c:	08008811 	.word	0x08008811
 8008850:	08008811 	.word	0x08008811
 8008854:	080089a1 	.word	0x080089a1
 8008858:	080088c5 	.word	0x080088c5
 800885c:	08008983 	.word	0x08008983
 8008860:	08008811 	.word	0x08008811
 8008864:	08008811 	.word	0x08008811
 8008868:	080089c3 	.word	0x080089c3
 800886c:	08008811 	.word	0x08008811
 8008870:	080088c5 	.word	0x080088c5
 8008874:	08008811 	.word	0x08008811
 8008878:	08008811 	.word	0x08008811
 800887c:	0800898b 	.word	0x0800898b
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	602a      	str	r2, [r5, #0]
 8008888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800888c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008890:	2301      	movs	r3, #1
 8008892:	e0a3      	b.n	80089dc <_printf_i+0x1f4>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	6829      	ldr	r1, [r5, #0]
 8008898:	0606      	lsls	r6, r0, #24
 800889a:	f101 0304 	add.w	r3, r1, #4
 800889e:	d50a      	bpl.n	80088b6 <_printf_i+0xce>
 80088a0:	680e      	ldr	r6, [r1, #0]
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	2e00      	cmp	r6, #0
 80088a6:	da03      	bge.n	80088b0 <_printf_i+0xc8>
 80088a8:	232d      	movs	r3, #45	; 0x2d
 80088aa:	4276      	negs	r6, r6
 80088ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b0:	485e      	ldr	r0, [pc, #376]	; (8008a2c <_printf_i+0x244>)
 80088b2:	230a      	movs	r3, #10
 80088b4:	e019      	b.n	80088ea <_printf_i+0x102>
 80088b6:	680e      	ldr	r6, [r1, #0]
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088be:	bf18      	it	ne
 80088c0:	b236      	sxthne	r6, r6
 80088c2:	e7ef      	b.n	80088a4 <_printf_i+0xbc>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	6820      	ldr	r0, [r4, #0]
 80088c8:	1d19      	adds	r1, r3, #4
 80088ca:	6029      	str	r1, [r5, #0]
 80088cc:	0601      	lsls	r1, r0, #24
 80088ce:	d501      	bpl.n	80088d4 <_printf_i+0xec>
 80088d0:	681e      	ldr	r6, [r3, #0]
 80088d2:	e002      	b.n	80088da <_printf_i+0xf2>
 80088d4:	0646      	lsls	r6, r0, #25
 80088d6:	d5fb      	bpl.n	80088d0 <_printf_i+0xe8>
 80088d8:	881e      	ldrh	r6, [r3, #0]
 80088da:	4854      	ldr	r0, [pc, #336]	; (8008a2c <_printf_i+0x244>)
 80088dc:	2f6f      	cmp	r7, #111	; 0x6f
 80088de:	bf0c      	ite	eq
 80088e0:	2308      	moveq	r3, #8
 80088e2:	230a      	movne	r3, #10
 80088e4:	2100      	movs	r1, #0
 80088e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ea:	6865      	ldr	r5, [r4, #4]
 80088ec:	60a5      	str	r5, [r4, #8]
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	bfa2      	ittt	ge
 80088f2:	6821      	ldrge	r1, [r4, #0]
 80088f4:	f021 0104 	bicge.w	r1, r1, #4
 80088f8:	6021      	strge	r1, [r4, #0]
 80088fa:	b90e      	cbnz	r6, 8008900 <_printf_i+0x118>
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	d04d      	beq.n	800899c <_printf_i+0x1b4>
 8008900:	4615      	mov	r5, r2
 8008902:	fbb6 f1f3 	udiv	r1, r6, r3
 8008906:	fb03 6711 	mls	r7, r3, r1, r6
 800890a:	5dc7      	ldrb	r7, [r0, r7]
 800890c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008910:	4637      	mov	r7, r6
 8008912:	42bb      	cmp	r3, r7
 8008914:	460e      	mov	r6, r1
 8008916:	d9f4      	bls.n	8008902 <_printf_i+0x11a>
 8008918:	2b08      	cmp	r3, #8
 800891a:	d10b      	bne.n	8008934 <_printf_i+0x14c>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	07de      	lsls	r6, r3, #31
 8008920:	d508      	bpl.n	8008934 <_printf_i+0x14c>
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	6861      	ldr	r1, [r4, #4]
 8008926:	4299      	cmp	r1, r3
 8008928:	bfde      	ittt	le
 800892a:	2330      	movle	r3, #48	; 0x30
 800892c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008930:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008934:	1b52      	subs	r2, r2, r5
 8008936:	6122      	str	r2, [r4, #16]
 8008938:	f8cd a000 	str.w	sl, [sp]
 800893c:	464b      	mov	r3, r9
 800893e:	aa03      	add	r2, sp, #12
 8008940:	4621      	mov	r1, r4
 8008942:	4640      	mov	r0, r8
 8008944:	f7ff fee2 	bl	800870c <_printf_common>
 8008948:	3001      	adds	r0, #1
 800894a:	d14c      	bne.n	80089e6 <_printf_i+0x1fe>
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	b004      	add	sp, #16
 8008952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008956:	4835      	ldr	r0, [pc, #212]	; (8008a2c <_printf_i+0x244>)
 8008958:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800895c:	6829      	ldr	r1, [r5, #0]
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	f851 6b04 	ldr.w	r6, [r1], #4
 8008964:	6029      	str	r1, [r5, #0]
 8008966:	061d      	lsls	r5, r3, #24
 8008968:	d514      	bpl.n	8008994 <_printf_i+0x1ac>
 800896a:	07df      	lsls	r7, r3, #31
 800896c:	bf44      	itt	mi
 800896e:	f043 0320 	orrmi.w	r3, r3, #32
 8008972:	6023      	strmi	r3, [r4, #0]
 8008974:	b91e      	cbnz	r6, 800897e <_printf_i+0x196>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	f023 0320 	bic.w	r3, r3, #32
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	2310      	movs	r3, #16
 8008980:	e7b0      	b.n	80088e4 <_printf_i+0xfc>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f043 0320 	orr.w	r3, r3, #32
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	2378      	movs	r3, #120	; 0x78
 800898c:	4828      	ldr	r0, [pc, #160]	; (8008a30 <_printf_i+0x248>)
 800898e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008992:	e7e3      	b.n	800895c <_printf_i+0x174>
 8008994:	0659      	lsls	r1, r3, #25
 8008996:	bf48      	it	mi
 8008998:	b2b6      	uxthmi	r6, r6
 800899a:	e7e6      	b.n	800896a <_printf_i+0x182>
 800899c:	4615      	mov	r5, r2
 800899e:	e7bb      	b.n	8008918 <_printf_i+0x130>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	6826      	ldr	r6, [r4, #0]
 80089a4:	6961      	ldr	r1, [r4, #20]
 80089a6:	1d18      	adds	r0, r3, #4
 80089a8:	6028      	str	r0, [r5, #0]
 80089aa:	0635      	lsls	r5, r6, #24
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	d501      	bpl.n	80089b4 <_printf_i+0x1cc>
 80089b0:	6019      	str	r1, [r3, #0]
 80089b2:	e002      	b.n	80089ba <_printf_i+0x1d2>
 80089b4:	0670      	lsls	r0, r6, #25
 80089b6:	d5fb      	bpl.n	80089b0 <_printf_i+0x1c8>
 80089b8:	8019      	strh	r1, [r3, #0]
 80089ba:	2300      	movs	r3, #0
 80089bc:	6123      	str	r3, [r4, #16]
 80089be:	4615      	mov	r5, r2
 80089c0:	e7ba      	b.n	8008938 <_printf_i+0x150>
 80089c2:	682b      	ldr	r3, [r5, #0]
 80089c4:	1d1a      	adds	r2, r3, #4
 80089c6:	602a      	str	r2, [r5, #0]
 80089c8:	681d      	ldr	r5, [r3, #0]
 80089ca:	6862      	ldr	r2, [r4, #4]
 80089cc:	2100      	movs	r1, #0
 80089ce:	4628      	mov	r0, r5
 80089d0:	f7f7 fc06 	bl	80001e0 <memchr>
 80089d4:	b108      	cbz	r0, 80089da <_printf_i+0x1f2>
 80089d6:	1b40      	subs	r0, r0, r5
 80089d8:	6060      	str	r0, [r4, #4]
 80089da:	6863      	ldr	r3, [r4, #4]
 80089dc:	6123      	str	r3, [r4, #16]
 80089de:	2300      	movs	r3, #0
 80089e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e4:	e7a8      	b.n	8008938 <_printf_i+0x150>
 80089e6:	6923      	ldr	r3, [r4, #16]
 80089e8:	462a      	mov	r2, r5
 80089ea:	4649      	mov	r1, r9
 80089ec:	4640      	mov	r0, r8
 80089ee:	47d0      	blx	sl
 80089f0:	3001      	adds	r0, #1
 80089f2:	d0ab      	beq.n	800894c <_printf_i+0x164>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	079b      	lsls	r3, r3, #30
 80089f8:	d413      	bmi.n	8008a22 <_printf_i+0x23a>
 80089fa:	68e0      	ldr	r0, [r4, #12]
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	4298      	cmp	r0, r3
 8008a00:	bfb8      	it	lt
 8008a02:	4618      	movlt	r0, r3
 8008a04:	e7a4      	b.n	8008950 <_printf_i+0x168>
 8008a06:	2301      	movs	r3, #1
 8008a08:	4632      	mov	r2, r6
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	47d0      	blx	sl
 8008a10:	3001      	adds	r0, #1
 8008a12:	d09b      	beq.n	800894c <_printf_i+0x164>
 8008a14:	3501      	adds	r5, #1
 8008a16:	68e3      	ldr	r3, [r4, #12]
 8008a18:	9903      	ldr	r1, [sp, #12]
 8008a1a:	1a5b      	subs	r3, r3, r1
 8008a1c:	42ab      	cmp	r3, r5
 8008a1e:	dcf2      	bgt.n	8008a06 <_printf_i+0x21e>
 8008a20:	e7eb      	b.n	80089fa <_printf_i+0x212>
 8008a22:	2500      	movs	r5, #0
 8008a24:	f104 0619 	add.w	r6, r4, #25
 8008a28:	e7f5      	b.n	8008a16 <_printf_i+0x22e>
 8008a2a:	bf00      	nop
 8008a2c:	0801e5b9 	.word	0x0801e5b9
 8008a30:	0801e5ca 	.word	0x0801e5ca

08008a34 <_putc_r>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	460d      	mov	r5, r1
 8008a38:	4614      	mov	r4, r2
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	b118      	cbz	r0, 8008a46 <_putc_r+0x12>
 8008a3e:	6983      	ldr	r3, [r0, #24]
 8008a40:	b90b      	cbnz	r3, 8008a46 <_putc_r+0x12>
 8008a42:	f7ff fb23 	bl	800808c <__sinit>
 8008a46:	4b1c      	ldr	r3, [pc, #112]	; (8008ab8 <_putc_r+0x84>)
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	d124      	bne.n	8008a96 <_putc_r+0x62>
 8008a4c:	6874      	ldr	r4, [r6, #4]
 8008a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a50:	07d8      	lsls	r0, r3, #31
 8008a52:	d405      	bmi.n	8008a60 <_putc_r+0x2c>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	0599      	lsls	r1, r3, #22
 8008a58:	d402      	bmi.n	8008a60 <_putc_r+0x2c>
 8008a5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a5c:	f7ff fbb4 	bl	80081c8 <__retarget_lock_acquire_recursive>
 8008a60:	68a3      	ldr	r3, [r4, #8]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	60a3      	str	r3, [r4, #8]
 8008a68:	da05      	bge.n	8008a76 <_putc_r+0x42>
 8008a6a:	69a2      	ldr	r2, [r4, #24]
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	db1c      	blt.n	8008aaa <_putc_r+0x76>
 8008a70:	b2eb      	uxtb	r3, r5
 8008a72:	2b0a      	cmp	r3, #10
 8008a74:	d019      	beq.n	8008aaa <_putc_r+0x76>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	6022      	str	r2, [r4, #0]
 8008a7c:	701d      	strb	r5, [r3, #0]
 8008a7e:	b2ed      	uxtb	r5, r5
 8008a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a82:	07da      	lsls	r2, r3, #31
 8008a84:	d405      	bmi.n	8008a92 <_putc_r+0x5e>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	059b      	lsls	r3, r3, #22
 8008a8a:	d402      	bmi.n	8008a92 <_putc_r+0x5e>
 8008a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a8e:	f7ff fb9c 	bl	80081ca <__retarget_lock_release_recursive>
 8008a92:	4628      	mov	r0, r5
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <_putc_r+0x88>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	d101      	bne.n	8008aa0 <_putc_r+0x6c>
 8008a9c:	68b4      	ldr	r4, [r6, #8]
 8008a9e:	e7d6      	b.n	8008a4e <_putc_r+0x1a>
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <_putc_r+0x8c>)
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	bf08      	it	eq
 8008aa6:	68f4      	ldreq	r4, [r6, #12]
 8008aa8:	e7d1      	b.n	8008a4e <_putc_r+0x1a>
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4622      	mov	r2, r4
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff f912 	bl	8007cd8 <__swbuf_r>
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	e7e3      	b.n	8008a80 <_putc_r+0x4c>
 8008ab8:	0801e568 	.word	0x0801e568
 8008abc:	0801e588 	.word	0x0801e588
 8008ac0:	0801e548 	.word	0x0801e548

08008ac4 <_sbrk_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_sbrk_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f8 fa30 	bl	8000f34 <_sbrk>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_sbrk_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_sbrk_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20000e34 	.word	0x20000e34

08008ae4 <__sread>:
 8008ae4:	b510      	push	{r4, lr}
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aec:	f000 f8a0 	bl	8008c30 <_read_r>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	bfab      	itete	ge
 8008af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008af6:	89a3      	ldrhlt	r3, [r4, #12]
 8008af8:	181b      	addge	r3, r3, r0
 8008afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008afe:	bfac      	ite	ge
 8008b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b02:	81a3      	strhlt	r3, [r4, #12]
 8008b04:	bd10      	pop	{r4, pc}

08008b06 <__swrite>:
 8008b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0a:	461f      	mov	r7, r3
 8008b0c:	898b      	ldrh	r3, [r1, #12]
 8008b0e:	05db      	lsls	r3, r3, #23
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	4616      	mov	r6, r2
 8008b16:	d505      	bpl.n	8008b24 <__swrite+0x1e>
 8008b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f000 f868 	bl	8008bf4 <_lseek_r>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	4632      	mov	r2, r6
 8008b32:	463b      	mov	r3, r7
 8008b34:	4628      	mov	r0, r5
 8008b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3a:	f000 b817 	b.w	8008b6c <_write_r>

08008b3e <__sseek>:
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	460c      	mov	r4, r1
 8008b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b46:	f000 f855 	bl	8008bf4 <_lseek_r>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	bf15      	itete	ne
 8008b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b5a:	81a3      	strheq	r3, [r4, #12]
 8008b5c:	bf18      	it	ne
 8008b5e:	81a3      	strhne	r3, [r4, #12]
 8008b60:	bd10      	pop	{r4, pc}

08008b62 <__sclose>:
 8008b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b66:	f000 b813 	b.w	8008b90 <_close_r>
	...

08008b6c <_write_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d07      	ldr	r5, [pc, #28]	; (8008b8c <_write_r+0x20>)
 8008b70:	4604      	mov	r4, r0
 8008b72:	4608      	mov	r0, r1
 8008b74:	4611      	mov	r1, r2
 8008b76:	2200      	movs	r2, #0
 8008b78:	602a      	str	r2, [r5, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f7f8 f989 	bl	8000e92 <_write>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_write_r+0x1e>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_write_r+0x1e>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000e34 	.word	0x20000e34

08008b90 <_close_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	; (8008bac <_close_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7f8 f995 	bl	8000eca <_close>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_close_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_close_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20000e34 	.word	0x20000e34

08008bb0 <_fstat_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	; (8008bd0 <_fstat_r+0x20>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	f7f8 f990 	bl	8000ee2 <_fstat>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d102      	bne.n	8008bcc <_fstat_r+0x1c>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	b103      	cbz	r3, 8008bcc <_fstat_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000e34 	.word	0x20000e34

08008bd4 <_isatty_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d06      	ldr	r5, [pc, #24]	; (8008bf0 <_isatty_r+0x1c>)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	f7f8 f98f 	bl	8000f02 <_isatty>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_isatty_r+0x1a>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_isatty_r+0x1a>
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	20000e34 	.word	0x20000e34

08008bf4 <_lseek_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d07      	ldr	r5, [pc, #28]	; (8008c14 <_lseek_r+0x20>)
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	2200      	movs	r2, #0
 8008c00:	602a      	str	r2, [r5, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	f7f8 f988 	bl	8000f18 <_lseek>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_lseek_r+0x1e>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_lseek_r+0x1e>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	20000e34 	.word	0x20000e34

08008c18 <__malloc_lock>:
 8008c18:	4801      	ldr	r0, [pc, #4]	; (8008c20 <__malloc_lock+0x8>)
 8008c1a:	f7ff bad5 	b.w	80081c8 <__retarget_lock_acquire_recursive>
 8008c1e:	bf00      	nop
 8008c20:	20000e28 	.word	0x20000e28

08008c24 <__malloc_unlock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__malloc_unlock+0x8>)
 8008c26:	f7ff bad0 	b.w	80081ca <__retarget_lock_release_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20000e28 	.word	0x20000e28

08008c30 <_read_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d07      	ldr	r5, [pc, #28]	; (8008c50 <_read_r+0x20>)
 8008c34:	4604      	mov	r4, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	4611      	mov	r1, r2
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	602a      	str	r2, [r5, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f7f8 f90a 	bl	8000e58 <_read>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_read_r+0x1e>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_read_r+0x1e>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	20000e34 	.word	0x20000e34

08008c54 <_init>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr

08008c60 <_fini>:
 8008c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c62:	bf00      	nop
 8008c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c66:	bc08      	pop	{r3}
 8008c68:	469e      	mov	lr, r3
 8008c6a:	4770      	bx	lr
