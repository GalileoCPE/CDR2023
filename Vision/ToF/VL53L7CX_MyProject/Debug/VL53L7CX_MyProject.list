
VL53L7CX_MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008920  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015970  08008ac0  08008ac0  00018ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e430  0801e430  000300ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801e430  0801e430  0002e430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e438  0801e438  000300ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e438  0801e438  0002e438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e43c  0801e43c  0002e43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0801e440  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d8c  200000ac  0801e4ec  000300ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e38  0801e4ec  00030e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011aa9  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d6c  00000000  00000000  00041b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000448f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000457e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e3c  00000000  00000000  000465a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c66  00000000  00000000  0005f3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092acc  00000000  00000000  0007304a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105b16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c8  00000000  00000000  00105b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008aa8 	.word	0x08008aa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08008aa8 	.word	0x08008aa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f003 fd54 	bl	8004034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f80a 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8d0 	bl	8000734 <MX_GPIO_Init>
  MX_RTC_Init();
 8000594:	f000 f874 	bl	8000680 <MX_RTC_Init>
  MX_TOF_Init();
 8000598:	f006 fdd4 	bl	8007144 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 800059c:	f006 fdd8 	bl	8007150 <MX_TOF_Process>
 80005a0:	e7fc      	b.n	800059c <main+0x18>
	...

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f007 fa0e 	bl	80079d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <SystemClock_Config+0xd4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a29      	ldr	r2, [pc, #164]	; (8000678 <SystemClock_Config+0xd4>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <SystemClock_Config+0xd4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <SystemClock_Config+0xd8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f0:	4a22      	ldr	r2, [pc, #136]	; (800067c <SystemClock_Config+0xd8>)
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <SystemClock_Config+0xd8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000604:	230a      	movs	r3, #10
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800061c:	2310      	movs	r3, #16
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000626:	2304      	movs	r3, #4
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062a:	2307      	movs	r3, #7
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	4618      	mov	r0, r3
 8000634:	f005 f95e 	bl	80058f4 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800063e:	f000 f92d 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fbc0 	bl	8005de4 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800066a:	f000 f917 	bl	800089c <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_RTC_Init+0xac>)
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_RTC_Init+0xb0>)
 800069c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_RTC_Init+0xac>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_RTC_Init+0xac>)
 80006a6:	227f      	movs	r2, #127	; 0x7f
 80006a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_RTC_Init+0xac>)
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_RTC_Init+0xac>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_RTC_Init+0xac>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_RTC_Init+0xac>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006c2:	481a      	ldr	r0, [pc, #104]	; (800072c <MX_RTC_Init+0xac>)
 80006c4:	f005 fe9c 	bl	8006400 <HAL_RTC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f8e5 	bl	800089c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	480f      	ldr	r0, [pc, #60]	; (800072c <MX_RTC_Init+0xac>)
 80006ee:	f005 fefd 	bl	80064ec <HAL_RTC_SetTime>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80006f8:	f000 f8d0 	bl	800089c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006fc:	2301      	movs	r3, #1
 80006fe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000700:	2301      	movs	r3, #1
 8000702:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000704:	2301      	movs	r3, #1
 8000706:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000708:	2300      	movs	r3, #0
 800070a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2201      	movs	r2, #1
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_RTC_Init+0xac>)
 8000714:	f005 ff84 	bl	8006620 <HAL_RTC_SetDate>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800071e:	f000 f8bd 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000c8 	.word	0x200000c8
 8000730:	40002800 	.word	0x40002800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b4f      	ldr	r3, [pc, #316]	; (800088c <MX_GPIO_Init+0x158>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a4e      	ldr	r2, [pc, #312]	; (800088c <MX_GPIO_Init+0x158>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b4c      	ldr	r3, [pc, #304]	; (800088c <MX_GPIO_Init+0x158>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_GPIO_Init+0x158>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a47      	ldr	r2, [pc, #284]	; (800088c <MX_GPIO_Init+0x158>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <MX_GPIO_Init+0x158>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <MX_GPIO_Init+0x158>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a40      	ldr	r2, [pc, #256]	; (800088c <MX_GPIO_Init+0x158>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <MX_GPIO_Init+0x158>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <MX_GPIO_Init+0x158>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a39      	ldr	r2, [pc, #228]	; (800088c <MX_GPIO_Init+0x158>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_GPIO_Init+0x158>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2101      	movs	r1, #1
 80007be:	4834      	ldr	r0, [pc, #208]	; (8000890 <MX_GPIO_Init+0x15c>)
 80007c0:	f004 f848 	bl	8004854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2122      	movs	r1, #34	; 0x22
 80007c8:	4832      	ldr	r0, [pc, #200]	; (8000894 <MX_GPIO_Init+0x160>)
 80007ca:	f004 f843 	bl	8004854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2101      	movs	r1, #1
 80007d2:	4831      	ldr	r0, [pc, #196]	; (8000898 <MX_GPIO_Init+0x164>)
 80007d4:	f004 f83e 	bl	8004854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4828      	ldr	r0, [pc, #160]	; (8000890 <MX_GPIO_Init+0x15c>)
 80007f0:	f003 fdc8 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4821      	ldr	r0, [pc, #132]	; (8000890 <MX_GPIO_Init+0x15c>)
 800080c:	f003 fdba 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000810:	2322      	movs	r3, #34	; 0x22
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	481b      	ldr	r0, [pc, #108]	; (8000894 <MX_GPIO_Init+0x160>)
 8000828:	f003 fdac 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800082c:	2310      	movs	r3, #16
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000830:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4814      	ldr	r0, [pc, #80]	; (8000894 <MX_GPIO_Init+0x160>)
 8000842:	f003 fd9f 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <MX_GPIO_Init+0x164>)
 800085e:	f003 fd91 	bl	8004384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	200a      	movs	r0, #10
 8000868:	f003 fd55 	bl	8004316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800086c:	200a      	movs	r0, #10
 800086e:	f003 fd6e 	bl	800434e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f003 fd4d 	bl	8004316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087c:	2028      	movs	r0, #40	; 0x28
 800087e:	f003 fd66 	bl	800434e <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800
 8000894:	40020000 	.word	0x40020000
 8000898:	40020400 	.word	0x40020400

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e6:	2007      	movs	r0, #7
 80008e8:	f003 fd0a 	bl	8004300 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <HAL_RTC_MspInit+0x50>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d111      	bne.n	800093e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800091a:	2302      	movs	r3, #2
 800091c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800091e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000922:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4618      	mov	r0, r3
 800092a:	f005 fc7b 	bl	8006224 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000934:	f7ff ffb2 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_RTC_MspInit+0x54>)
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40002800 	.word	0x40002800
 800094c:	42470e3c 	.word	0x42470e3c

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f003 fb9c 	bl	80040d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80009a8:	2010      	movs	r0, #16
 80009aa:	f003 ff6d 	bl	8004888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ba:	f003 ff65 	bl	8004888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <BSP_I2C1_Init+0x58>)
 80009d0:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <BSP_I2C1_Init+0x5c>)
 80009d2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <BSP_I2C1_Init+0x60>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	4912      	ldr	r1, [pc, #72]	; (8000a24 <BSP_I2C1_Init+0x60>)
 80009dc:	600a      	str	r2, [r1, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d117      	bne.n	8000a12 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80009e2:	480e      	ldr	r0, [pc, #56]	; (8000a1c <BSP_I2C1_Init+0x58>)
 80009e4:	f004 fc10 	bl	8005208 <HAL_I2C_GetState>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d111      	bne.n	8000a12 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80009ee:	480b      	ldr	r0, [pc, #44]	; (8000a1c <BSP_I2C1_Init+0x58>)
 80009f0:	f000 f8e2 	bl	8000bb8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10b      	bne.n	8000a12 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <BSP_I2C1_Init+0x58>)
 80009fc:	f000 f8a8 	bl	8000b50 <MX_I2C1_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000a06:	f06f 0307 	mvn.w	r3, #7
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	e001      	b.n	8000a12 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000a12:	687b      	ldr	r3, [r7, #4]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000e8 	.word	0x200000e8
 8000a20:	40005400 	.word	0x40005400
 8000a24:	2000013c 	.word	0x2000013c

08000a28 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <BSP_I2C1_DeInit+0x48>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d014      	beq.n	8000a64 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <BSP_I2C1_DeInit+0x48>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <BSP_I2C1_DeInit+0x48>)
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <BSP_I2C1_DeInit+0x48>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10b      	bne.n	8000a64 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <BSP_I2C1_DeInit+0x4c>)
 8000a4e:	f000 f8fd 	bl	8000c4c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000a52:	4808      	ldr	r0, [pc, #32]	; (8000a74 <BSP_I2C1_DeInit+0x4c>)
 8000a54:	f004 f874 	bl	8004b40 <HAL_I2C_DeInit>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000a5e:	f06f 0307 	mvn.w	r3, #7
 8000a62:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000013c 	.word	0x2000013c
 8000a74:	200000e8 	.word	0x200000e8

08000a78 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	60ba      	str	r2, [r7, #8]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4603      	mov	r3, r0
 8000a84:	81fb      	strh	r3, [r7, #14]
 8000a86:	460b      	mov	r3, r1
 8000a88:	81bb      	strh	r3, [r7, #12]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000a92:	89ba      	ldrh	r2, [r7, #12]
 8000a94:	89f9      	ldrh	r1, [r7, #14]
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <BSP_I2C1_WriteReg16+0x60>)
 8000aa8:	f004 f88e 	bl	8004bc8 <HAL_I2C_Mem_Write>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00c      	beq.n	8000acc <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <BSP_I2C1_WriteReg16+0x60>)
 8000ab4:	f004 fbb6 	bl	8005224 <HAL_I2C_GetError>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d103      	bne.n	8000ac6 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000abe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e002      	b.n	8000acc <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000ac6:	f06f 0303 	mvn.w	r3, #3
 8000aca:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000acc:	697b      	ldr	r3, [r7, #20]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000e8 	.word	0x200000e8

08000adc <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af04      	add	r7, sp, #16
 8000ae2:	60ba      	str	r2, [r7, #8]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	81fb      	strh	r3, [r7, #14]
 8000aea:	460b      	mov	r3, r1
 8000aec:	81bb      	strh	r3, [r7, #12]
 8000aee:	4613      	mov	r3, r2
 8000af0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000af6:	89ba      	ldrh	r2, [r7, #12]
 8000af8:	89f9      	ldrh	r1, [r7, #14]
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2310      	movs	r3, #16
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <BSP_I2C1_ReadReg16+0x60>)
 8000b0c:	f004 f956 	bl	8004dbc <HAL_I2C_Mem_Read>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00c      	beq.n	8000b30 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <BSP_I2C1_ReadReg16+0x60>)
 8000b18:	f004 fb84 	bl	8005224 <HAL_I2C_GetError>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d003      	beq.n	8000b2a <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000b22:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e002      	b.n	8000b30 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000b2a:	f06f 0303 	mvn.w	r3, #3
 8000b2e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000b30:	697b      	ldr	r3, [r7, #20]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000e8 	.word	0x200000e8

08000b40 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b44:	f003 fadc 	bl	8004100 <HAL_GetTick>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <MX_I2C1_Init+0x60>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <MX_I2C1_Init+0x64>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f003 fe8f 	bl	80048b8 <HAL_I2C_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	00061a80 	.word	0x00061a80

08000bb8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <I2C1_MspInit+0x8c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <I2C1_MspInit+0x8c>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <I2C1_MspInit+0x8c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <I2C1_MspInit+0x90>)
 8000bfa:	f003 fbc3 	bl	8004384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c04:	2312      	movs	r3, #18
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000c10:	2304      	movs	r3, #4
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <I2C1_MspInit+0x90>)
 8000c1c:	f003 fbb2 	bl	8004384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <I2C1_MspInit+0x8c>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <I2C1_MspInit+0x8c>)
 8000c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <I2C1_MspInit+0x8c>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020400 	.word	0x40020400

08000c4c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <I2C1_MspDeInit+0x30>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <I2C1_MspDeInit+0x30>)
 8000c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <I2C1_MspDeInit+0x34>)
 8000c66:	f003 fd11 	bl	800468c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <I2C1_MspDeInit+0x34>)
 8000c70:	f003 fd0c 	bl	800468c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400

08000c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
	}

return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e009      	b.n	8000ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 f947 	bl	8003f6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf1      	blt.n	8000cd0 <_write+0x12>
	}
	return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f006 fde8 	bl	8007964 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20018000 	.word	0x20018000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000140 	.word	0x20000140
 8000dc8:	20000e38 	.word	0x20000e38

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f006 fda7 	bl	8007970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbaf 	bl	8000584 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000e34:	0801e440 	.word	0x0801e440
  ldr r2, =_sbss
 8000e38:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000e3c:	20000e38 	.word	0x20000e38

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>

08000e42 <_vl53l7cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4603      	mov	r3, r0
 8000e52:	70fb      	strb	r3, [r7, #3]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70bb      	strb	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8000e64:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	8839      	ldrh	r1, [r7, #0]
 8000e70:	f002 fa02 	bl	8003278 <RdMulti>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	210a      	movs	r1, #10
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fa45 	bl	8003312 <WaitMs>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	2bc7      	cmp	r3, #199	; 0xc7
 8000e96:	d904      	bls.n	8000ea2 <_vl53l7cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L7CX_STATUS_TIMEOUT_ERROR;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
			break;
 8000ea0:	e01a      	b.n	8000ed8 <_vl53l7cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d909      	bls.n	8000ebc <_vl53l7cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8000eae:	2b7e      	cmp	r3, #126	; 0x7e
 8000eb0:	d904      	bls.n	8000ebc <_vl53l7cx_poll_for_answer+0x7a>
		{
			status |= VL53L7CX_MCU_ERROR;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8000eb8:	73fb      	strb	r3, [r7, #15]
			break;
 8000eba:	e00d      	b.n	8000ed8 <_vl53l7cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8000ecc:	7e3b      	ldrb	r3, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	7f3a      	ldrb	r2, [r7, #28]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d1c5      	bne.n	8000e64 <_vl53l7cx_poll_for_answer+0x22>

	return status;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_vl53l7cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l7cx_poll_for_mcu_boot(
              VL53L7CX_Configuration      *p_dev)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L7CX_STATUS_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f107 020b 	add.w	r2, r7, #11
 8000ef8:	2106      	movs	r1, #6
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 f97a 	bl	80031f4 <RdByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8000f0a:	7afb      	ldrb	r3, [r7, #11]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da10      	bge.n	8000f34 <_vl53l7cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f107 020a 	add.w	r2, r7, #10
 8000f18:	2107      	movs	r1, #7
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 f96a 	bl	80031f4 <RdByte>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8000f2a:	7aba      	ldrb	r2, [r7, #10]
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	73fb      	strb	r3, [r7, #15]
			break;
 8000f32:	e012      	b.n	8000f5a <_vl53l7cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2101      	movs	r1, #1
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 f9ea 	bl	8003312 <WaitMs>
		timeout++;
 8000f3e:	89bb      	ldrh	r3, [r7, #12]
 8000f40:	3301      	adds	r3, #1
 8000f42:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8000f44:	7afb      	ldrb	r3, [r7, #11]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d104      	bne.n	8000f58 <_vl53l7cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8000f4e:	89bb      	ldrh	r3, [r7, #12]
 8000f50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f54:	d3cd      	bcc.n	8000ef2 <_vl53l7cx_poll_for_mcu_boot+0x10>
 8000f56:	e000      	b.n	8000f5a <_vl53l7cx_poll_for_mcu_boot+0x78>
			break;
 8000f58:	bf00      	nop

   return status;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_vl53l7cx_send_offset_data>:
 */

static uint8_t _vl53l7cx_send_offset_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0ea      	sub	sp, #424	; 0x1a8
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000f72:	6018      	str	r0, [r3, #0]
 8000f74:	460a      	mov	r2, r1
 8000f76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f7a:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8000f7e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8000f86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f8e:	4ad9      	ldr	r2, [pc, #868]	; (80012f4 <_vl53l7cx_send_offset_data+0x390>)
 8000f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f94:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8000f98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f9c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000fa0:	4ad5      	ldr	r2, [pc, #852]	; (80012f8 <_vl53l7cx_send_offset_data+0x394>)
 8000fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa6:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8000faa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L7CX_OFFSET_BUFFER_SIZE);
 8000fb8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fbc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8000fc4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f006 fcf5 	bl	80079b8 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4){
 8000fce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fd2:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b10      	cmp	r3, #16
 8000fda:	f040 8122 	bne.w	8001222 <_vl53l7cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8000fde:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fe2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8000fec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ff0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000ff4:	cb03      	ldmia	r3!, {r0, r1}
 8000ff6:	6010      	str	r0, [r2, #0]
 8000ff8:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 8000ffa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ffe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001008:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f94a 	bl	80032a6 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8001012:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001016:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8001020:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fcc5 	bl	80079b8 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800102e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001032:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	4618      	mov	r0, r3
 8001044:	f006 fcb8 	bl	80079b8 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001048:	2300      	movs	r3, #0
 800104a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800104e:	e0ac      	b.n	80011aa <_vl53l7cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001056:	e09c      	b.n	8001192 <_vl53l7cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8001058:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800105c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4413      	add	r3, r2
 8001064:	005a      	lsls	r2, r3, #1
 8001066:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800106a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800106e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8001072:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001076:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	1c59      	adds	r1, r3, #1
 8001082:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800108a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8001090:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001094:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	3304      	adds	r3, #4
 800109e:	0059      	lsls	r1, r3, #1
 80010a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010ac:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80010ae:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80010b2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	f103 0109 	add.w	r1, r3, #9
 80010c0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010cc:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80010ce:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80010d2:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80010da:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80010dc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80010e8:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80010ec:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4413      	add	r3, r2
 80010f4:	005a      	lsls	r2, r3, #1
 80010f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80010fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001102:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8001104:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001108:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001118:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800111c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001120:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8001122:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001126:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800112a:	00d2      	lsls	r2, r2, #3
 800112c:	440a      	add	r2, r1
 800112e:	3204      	adds	r2, #4
 8001130:	0051      	lsls	r1, r2, #1
 8001132:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001136:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800113a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800113e:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001140:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001144:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8001148:	00d2      	lsls	r2, r2, #3
 800114a:	440a      	add	r2, r1
 800114c:	0052      	lsls	r2, r2, #1
 800114e:	f102 0109 	add.w	r1, r2, #9
 8001152:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001156:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800115a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800115e:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001160:	2b00      	cmp	r3, #0
 8001162:	da00      	bge.n	8001166 <_vl53l7cx_send_offset_data+0x202>
 8001164:	3303      	adds	r3, #3
 8001166:	109b      	asrs	r3, r3, #2
 8001168:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800116a:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800116e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	441a      	add	r2, r3
 8001176:	b209      	sxth	r1, r1
 8001178:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800117c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001180:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8001184:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3301      	adds	r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001192:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8001196:	2b03      	cmp	r3, #3
 8001198:	f77f af5e 	ble.w	8001058 <_vl53l7cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 800119c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80011aa:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	f77f af4e 	ble.w	8001050 <_vl53l7cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	3320      	adds	r3, #32
 80011ba:	2260      	movs	r2, #96	; 0x60
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f006 fc08 	bl	80079d4 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80011c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011c8:	3340      	adds	r3, #64	; 0x40
 80011ca:	22c0      	movs	r2, #192	; 0xc0
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 fc00 	bl	80079d4 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80011d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80011e2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80011e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 fbe4 	bl	80079b8 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80011f0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80011fe:	f107 0118 	add.w	r1, r7, #24
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	4618      	mov	r0, r3
 8001206:	f006 fbd7 	bl	80079b8 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 800120a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800120e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001218:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800121c:	4618      	mov	r0, r3
 800121e:	f002 f842 	bl	80032a6 <SwapBuffer>
	}

	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001222:	2300      	movs	r3, #0
 8001224:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001228:	e01b      	b.n	8001262 <_vl53l7cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800122a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800122e:	f103 0208 	add.w	r2, r3, #8
 8001232:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001236:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800123a:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 800123e:	6809      	ldr	r1, [r1, #0]
 8001240:	440a      	add	r2, r1
 8001242:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 8001246:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800124a:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	4413      	add	r3, r2
 8001252:	460a      	mov	r2, r1
 8001254:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001258:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800125c:	3301      	adds	r3, #1
 800125e:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001262:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001266:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 800126a:	d3de      	bcc.n	800122a <_vl53l7cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800126c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001270:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 800127a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800127e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001282:	cb03      	ldmia	r3!, {r0, r1}
 8001284:	6010      	str	r0, [r2, #0]
 8001286:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8001288:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800128c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001296:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80012a0:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80012a4:	f642 6118 	movw	r1, #11800	; 0x2e18
 80012a8:	f001 ffcf 	bl	800324a <WrMulti>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80012b4:	4313      	orrs	r3, r2
 80012b6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80012ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012be:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80012c2:	2303      	movs	r3, #3
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	23ff      	movs	r3, #255	; 0xff
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80012ce:	2201      	movs	r2, #1
 80012d0:	2104      	movs	r1, #4
 80012d2:	6800      	ldr	r0, [r0, #0]
 80012d4:	f7ff fdb5 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80012e0:	4313      	orrs	r3, r2
 80012e2:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80012e6:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	08008ac0 	.word	0x08008ac0
 80012f8:	08008ac8 	.word	0x08008ac8

080012fc <_vl53l7cx_send_xtalk_data>:
 */

static uint8_t _vl53l7cx_send_xtalk_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ca      	sub	sp, #296	; 0x128
 8001300:	af02      	add	r7, sp, #8
 8001302:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001306:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800130a:	6018      	str	r0, [r3, #0]
 800130c:	460a      	mov	r2, r1
 800130e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001312:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8001316:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800131e:	4a9a      	ldr	r2, [pc, #616]	; (8001588 <_vl53l7cx_send_xtalk_data+0x28c>)
 8001320:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001328:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800132c:	4a97      	ldr	r2, [pc, #604]	; (800158c <_vl53l7cx_send_xtalk_data+0x290>)
 800132e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001332:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001336:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800133a:	4b95      	ldr	r3, [pc, #596]	; (8001590 <_vl53l7cx_send_xtalk_data+0x294>)
 800133c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001340:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001344:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 800134e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001352:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800135c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8001360:	4619      	mov	r1, r3
 8001362:	f006 fb29 	bl	80079b8 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4)
 8001366:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800136a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b10      	cmp	r3, #16
 8001372:	f040 80d2 	bne.w	800151a <_vl53l7cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8001376:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800137a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8001384:	461a      	mov	r2, r3
 8001386:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800138a:	cb03      	ldmia	r3!, {r0, r1}
 800138c:	6010      	str	r0, [r2, #0]
 800138e:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8001390:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001394:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800139e:	461a      	mov	r2, r3
 80013a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80013a4:	cb03      	ldmia	r3!, {r0, r1}
 80013a6:	6010      	str	r0, [r2, #0]
 80013a8:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 80013aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80013b8:	f44f 7142 	mov.w	r1, #776	; 0x308
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 ff72 	bl	80032a6 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80013c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f203 5144 	addw	r1, r3, #1348	; 0x544
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 faed 	bl	80079b8 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80013de:	2300      	movs	r3, #0
 80013e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80013e4:	e05d      	b.n	80014a2 <_vl53l7cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80013ec:	e04e      	b.n	800148c <_vl53l7cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80013ee:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 80013f2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	005a      	lsls	r2, r3, #1
 80013fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001400:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001404:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001408:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800140c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	1c59      	adds	r1, r3, #1
 8001418:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800141c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001420:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001424:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8001426:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800142a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	3304      	adds	r3, #4
 8001434:	0059      	lsls	r1, r3, #1
 8001436:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800143a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800143e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001442:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001444:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001448:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	f103 0109 	add.w	r1, r3, #9
 8001456:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800145a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800145e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001462:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001464:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001468:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001470:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001472:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001476:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800147e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3301      	adds	r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800148c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001490:	2b03      	cmp	r3, #3
 8001492:	ddac      	ble.n	80013ee <_vl53l7cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8001494:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001498:	b2db      	uxtb	r3, r3
 800149a:	3301      	adds	r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80014a2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	dd9d      	ble.n	80013e6 <_vl53l7cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	3340      	adds	r3, #64	; 0x40
 80014b0:	22c0      	movs	r2, #192	; 0xc0
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f006 fa8d 	bl	80079d4 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80014ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80014c8:	f107 0108 	add.w	r1, r7, #8
 80014cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d0:	4618      	mov	r0, r3
 80014d2:	f006 fa71 	bl	80079b8 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 80014d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80014e4:	f44f 7142 	mov.w	r1, #776	; 0x308
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fedc 	bl	80032a6 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80014ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f203 6344 	addw	r3, r3, #1604	; 0x644
 80014fc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001500:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8001502:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001506:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8001510:	2204      	movs	r2, #4
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fa5d 	bl	80079d4 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800151a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800151e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001522:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 8001524:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001528:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001532:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001536:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 800153a:	f001 fe86 	bl	800324a <WrMulti>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001546:	4313      	orrs	r3, r2
 8001548:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 800154c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001550:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001554:	2303      	movs	r3, #3
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	23ff      	movs	r3, #255	; 0xff
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001560:	2201      	movs	r2, #1
 8001562:	2104      	movs	r1, #4
 8001564:	6800      	ldr	r0, [r0, #0]
 8001566:	f7ff fc6c 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001572:	4313      	orrs	r3, r2
 8001574:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001578:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 800157c:	4618      	mov	r0, r3
 800157e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	08008ad0 	.word	0x08008ad0
 800158c:	08008ad8 	.word	0x08008ad8
 8001590:	0001fca0 	.word	0x0001fca0

08001594 <vl53l7cx_init>:
	return status;
}

uint8_t vl53l7cx_init(
		VL53L7CX_Configuration		*p_dev)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af02      	add	r7, sp, #8
 800159a:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L7CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80015a0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80015a4:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80015a6:	2301      	movs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L7CX_DEFAULT_XTALK;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <vl53l7cx_init+0x214>)
 80015ae:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L7CX_DEFAULT_CONFIGURATION;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <vl53l7cx_init+0x218>)
 80015b4:	619a      	str	r2, [r3, #24]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fe2d 	bl	800321e <WrByte>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2204      	movs	r2, #4
 80015d2:	2109      	movs	r1, #9
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fe22 	bl	800321e <WrByte>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	210f      	movs	r1, #15
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fe17 	bl	800321e <WrByte>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	210a      	movs	r1, #10
 8001600:	4618      	mov	r0, r3
 8001602:	f001 fe0c 	bl	800321e <WrByte>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	4313      	orrs	r3, r2
 800160e:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f107 0216 	add.w	r2, r7, #22
 8001616:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fdea 	bl	80031f4 <RdByte>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	4313      	orrs	r3, r2
 8001628:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	210c      	movs	r1, #12
 8001630:	4618      	mov	r0, r3
 8001632:	f001 fdf4 	bl	800321e <WrByte>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	4313      	orrs	r3, r2
 800163e:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f240 1101 	movw	r1, #257	; 0x101
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fde8 	bl	800321e <WrByte>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	4313      	orrs	r3, r2
 8001656:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001660:	4618      	mov	r0, r3
 8001662:	f001 fddc 	bl	800321e <WrByte>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	4313      	orrs	r3, r2
 800166e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fdd0 	bl	800321e <WrByte>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	4313      	orrs	r3, r2
 8001686:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f244 0102 	movw	r1, #16386	; 0x4002
 8001690:	4618      	mov	r0, r3
 8001692:	f001 fdc4 	bl	800321e <WrByte>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	4313      	orrs	r3, r2
 800169e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f244 0102 	movw	r1, #16386	; 0x4002
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fdb8 	bl	800321e <WrByte>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2203      	movs	r2, #3
 80016bc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fdac 	bl	800321e <WrByte>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f240 1103 	movw	r1, #259	; 0x103
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 fda0 	bl	800321e <WrByte>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	210c      	movs	r1, #12
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 fd95 	bl	800321e <WrByte>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2243      	movs	r2, #67	; 0x43
 8001702:	210f      	movs	r1, #15
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fd8a 	bl	800321e <WrByte>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	4313      	orrs	r3, r2
 8001712:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2101      	movs	r1, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fdfa 	bl	8003312 <WaitMs>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	4313      	orrs	r3, r2
 8001726:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	210f      	movs	r1, #15
 800172e:	4618      	mov	r0, r3
 8001730:	f001 fd75 	bl	800321e <WrByte>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	4313      	orrs	r3, r2
 800173c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	210a      	movs	r1, #10
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fd6a 	bl	800321e <WrByte>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	4313      	orrs	r3, r2
 8001752:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2164      	movs	r1, #100	; 0x64
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fdda 	bl	8003312 <WaitMs>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	4313      	orrs	r3, r2
 8001766:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fd54 	bl	800321e <WrByte>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	4313      	orrs	r3, r2
 800177e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	23ff      	movs	r3, #255	; 0xff
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2306      	movs	r3, #6
 800178a:	2200      	movs	r2, #0
 800178c:	2101      	movs	r1, #1
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fb57 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	4313      	orrs	r3, r2
 800179c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 831c 	bne.w	8001dde <vl53l7cx_init+0x84a>
 80017a6:	e003      	b.n	80017b0 <vl53l7cx_init+0x21c>
 80017a8:	0801e068 	.word	0x0801e068
 80017ac:	0801dc9c 	.word	0x0801dc9c
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	210e      	movs	r1, #14
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fd31 	bl	800321e <WrByte>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fd25 	bl	800321e <WrByte>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	4313      	orrs	r3, r2
 80017dc:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	220d      	movs	r2, #13
 80017e2:	2103      	movs	r1, #3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fd1a 	bl	800321e <WrByte>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fd0e 	bl	800321e <WrByte>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	4313      	orrs	r3, r2
 800180a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 800180c:	2310      	movs	r3, #16
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2310      	movs	r3, #16
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2321      	movs	r3, #33	; 0x21
 8001816:	2200      	movs	r2, #0
 8001818:	2101      	movs	r1, #1
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fb11 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	4313      	orrs	r3, r2
 8001828:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fcf3 	bl	800321e <WrByte>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	4313      	orrs	r3, r2
 8001840:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f107 0216 	add.w	r2, r7, #22
 8001848:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800184c:	4618      	mov	r0, r3
 800184e:	f001 fcd1 	bl	80031f4 <RdByte>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	4313      	orrs	r3, r2
 800185a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	210c      	movs	r1, #12
 8001862:	4618      	mov	r0, r3
 8001864:	f001 fcdb 	bl	800321e <WrByte>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	4313      	orrs	r3, r2
 8001870:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fccf 	bl	800321e <WrByte>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	4313      	orrs	r3, r2
 8001888:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f240 1101 	movw	r1, #257	; 0x101
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fcc3 	bl	800321e <WrByte>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	4313      	orrs	r3, r2
 80018a0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fcb7 	bl	800321e <WrByte>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fcab 	bl	800321e <WrByte>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f244 0102 	movw	r1, #16386	; 0x4002
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 fc9f 	bl	800321e <WrByte>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f244 0102 	movw	r1, #16386	; 0x4002
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fc93 	bl	800321e <WrByte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	4313      	orrs	r3, r2
 8001900:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800190a:	4618      	mov	r0, r3
 800190c:	f001 fc87 	bl	800321e <WrByte>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	4313      	orrs	r3, r2
 8001918:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f240 1103 	movw	r1, #259	; 0x103
 8001922:	4618      	mov	r0, r3
 8001924:	f001 fc7b 	bl	800321e <WrByte>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	4313      	orrs	r3, r2
 8001930:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f244 010f 	movw	r1, #16399	; 0x400f
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fc6f 	bl	800321e <WrByte>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	4313      	orrs	r3, r2
 8001948:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2243      	movs	r2, #67	; 0x43
 800194e:	f240 211a 	movw	r1, #538	; 0x21a
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fc63 	bl	800321e <WrByte>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	4313      	orrs	r3, r2
 8001960:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	f240 211a 	movw	r1, #538	; 0x21a
 800196a:	4618      	mov	r0, r3
 800196c:	f001 fc57 	bl	800321e <WrByte>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	4313      	orrs	r3, r2
 8001978:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f240 211a 	movw	r1, #538	; 0x21a
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fc4b 	bl	800321e <WrByte>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	4313      	orrs	r3, r2
 8001990:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f240 211a 	movw	r1, #538	; 0x21a
 800199a:	4618      	mov	r0, r3
 800199c:	f001 fc3f 	bl	800321e <WrByte>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f240 2119 	movw	r1, #537	; 0x219
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fc33 	bl	800321e <WrByte>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	4313      	orrs	r3, r2
 80019c0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f240 211b 	movw	r1, #539	; 0x21b
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fc27 	bl	800321e <WrByte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 fc1b 	bl	800321e <WrByte>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f107 0216 	add.w	r2, r7, #22
 80019f8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fbf9 	bl	80031f4 <RdByte>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	210c      	movs	r1, #12
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fc03 	bl	800321e <WrByte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fbf7 	bl	800321e <WrByte>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	2120      	movs	r1, #32
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fbec 	bl	800321e <WrByte>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2206      	movs	r2, #6
 8001a54:	2120      	movs	r1, #32
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 fbe1 	bl	800321e <WrByte>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L7CX */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2209      	movs	r2, #9
 8001a6a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fbd5 	bl	800321e <WrByte>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a84:	4adb      	ldr	r2, [pc, #876]	; (8001df4 <vl53l7cx_init+0x860>)
 8001a86:	2100      	movs	r1, #0
 8001a88:	f001 fbdf 	bl	800324a <WrMulti>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	220a      	movs	r2, #10
 8001a9a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 fbbd 	bl	800321e <WrByte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab4:	4ad0      	ldr	r2, [pc, #832]	; (8001df8 <vl53l7cx_init+0x864>)
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f001 fbc7 	bl	800324a <WrMulti>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	220b      	movs	r2, #11
 8001aca:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 fba5 	bl	800321e <WrByte>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001ae4:	4ac5      	ldr	r2, [pc, #788]	; (8001dfc <vl53l7cx_init+0x868>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f001 fbaf 	bl	800324a <WrMulti>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 fb8d 	bl	800321e <WrByte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 fb81 	bl	800321e <WrByte>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	220d      	movs	r2, #13
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 fb76 	bl	800321e <WrByte>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fb6a 	bl	800321e <WrByte>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001b54:	2310      	movs	r3, #16
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2310      	movs	r3, #16
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2321      	movs	r3, #33	; 0x21
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2101      	movs	r1, #1
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff f96d 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 8134 	bne.w	8001de2 <vl53l7cx_init+0x84e>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 fb4b 	bl	800321e <WrByte>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f107 0216 	add.w	r2, r7, #22
 8001b98:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 fb29 	bl	80031f4 <RdByte>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	210c      	movs	r1, #12
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 fb33 	bl	800321e <WrByte>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 fb27 	bl	800321e <WrByte>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fb1b 	bl	800321e <WrByte>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f240 1115 	movw	r1, #277	; 0x115
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 fb0f 	bl	800321e <WrByte>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2242      	movs	r2, #66	; 0x42
 8001c0e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 fb03 	bl	800321e <WrByte>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f240 1117 	movw	r1, #279	; 0x117
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 faf7 	bl	800321e <WrByte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	210b      	movs	r1, #11
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 faec 	bl	800321e <WrByte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f107 0216 	add.w	r2, r7, #22
 8001c56:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 faca 	bl	80031f4 <RdByte>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	210c      	movs	r1, #12
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 fad4 	bl	800321e <WrByte>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	210b      	movs	r1, #11
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fac9 	bl	800321e <WrByte>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_mcu_boot(p_dev);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff f923 	bl	8000ee2 <_vl53l7cx_poll_for_mcu_boot>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 809c 	bne.w	8001de6 <vl53l7cx_init+0x852>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fab1 	bl	800321e <WrByte>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	2328      	movs	r3, #40	; 0x28
 8001cca:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <vl53l7cx_init+0x86c>)
 8001ccc:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8001cd0:	f001 fabb 	bl	800324a <WrMulti>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L7CX_GET_NVM_CMD, sizeof(VL53L7CX_GET_NVM_CMD));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 0,
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	23ff      	movs	r3, #255	; 0xff
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001cea:	2200      	movs	r2, #0
 8001cec:	2104      	movs	r1, #4
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff f8a7 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8001cfe:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L7CX_NVM_DATA_SIZE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8001d06:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001d0a:	f642 4104 	movw	r1, #11268	; 0x2c04
 8001d0e:	f001 fab3 	bl	8003278 <RdMulti>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f103 0020 	add.w	r0, r3, #32
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001d28:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f005 fe43 	bl	80079b8 <memcpy>
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l7cx_send_offset_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 8001d32:	2110      	movs	r1, #16
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff f915 	bl	8000f64 <_vl53l7cx_send_offset_data>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L7CX_DEFAULT_XTALK,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d4a:	4a2e      	ldr	r2, [pc, #184]	; (8001e04 <vl53l7cx_init+0x870>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	4611      	mov	r1, r2
 8001d50:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001d54:	461a      	mov	r2, r3
 8001d56:	f005 fe2f 	bl	80079b8 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);
	status |= _vl53l7cx_send_xtalk_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff facd 	bl	80012fc <_vl53l7cx_send_xtalk_data>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L7CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8001d76:	f642 4134 	movw	r1, #11316	; 0x2c34
 8001d7a:	f001 fa66 	bl	800324a <WrMulti>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L7CX_DEFAULT_CONFIGURATION));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8001d88:	2303      	movs	r3, #3
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	23ff      	movs	r3, #255	; 0xff
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001d94:	2201      	movs	r2, #1
 8001d96:	2104      	movs	r1, #4
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff f852 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8001da8:	f107 0110 	add.w	r1, r7, #16
 8001dac:	2304      	movs	r3, #4
 8001dae:	f64c 7278 	movw	r2, #53112	; 0xcf78
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 ffb6 	bl	8002d24 <vl53l7cx_dci_write_data>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	75fb      	strb	r3, [r7, #23]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L7CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8001dc2:	f107 010c 	add.w	r1, r7, #12
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 ffa9 	bl	8002d24 <vl53l7cx_dci_write_data>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	75fb      	strb	r3, [r7, #23]
 8001ddc:	e004      	b.n	8001de8 <vl53l7cx_init+0x854>
		goto exit;
 8001dde:	bf00      	nop
 8001de0:	e002      	b.n	8001de8 <vl53l7cx_init+0x854>
		goto exit;
 8001de2:	bf00      	nop
 8001de4:	e000      	b.n	8001de8 <vl53l7cx_init+0x854>
		goto exit;
 8001de6:	bf00      	nop
			VL53L7CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));
exit:
	return status;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	08008c9c 	.word	0x08008c9c
 8001df8:	08010c9c 	.word	0x08010c9c
 8001dfc:	08018c9c 	.word	0x08018c9c
 8001e00:	0801e370 	.word	0x0801e370
 8001e04:	0801e068 	.word	0x0801e068

08001e08 <vl53l7cx_set_i2c_address>:

uint8_t vl53l7cx_set_i2c_address(
		VL53L7CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 f9fc 	bl	800321e <WrByte>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	085b      	lsrs	r3, r3, #1
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	f001 f9ee 	bl	800321e <WrByte>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 f9df 	bl	800321e <WrByte>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	73fb      	strb	r3, [r7, #15]

	return status;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <vl53l7cx_get_power_mode>:

uint8_t vl53l7cx_get_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 f9c7 	bl	800321e <WrByte>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f107 020e 	add.w	r2, r7, #14
 8001ea0:	2109      	movs	r1, #9
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 f9a6 	bl	80031f4 <RdByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d005      	beq.n	8001ec4 <vl53l7cx_get_power_mode+0x50>
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d107      	bne.n	8001ecc <vl53l7cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L7CX_POWER_MODE_WAKEUP;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
			break;
 8001ec2:	e009      	b.n	8001ed8 <vl53l7cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L7CX_POWER_MODE_SLEEP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]

			break;
 8001eca:	e005      	b.n	8001ed8 <vl53l7cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
			status = VL53L7CX_STATUS_ERROR;
 8001ed2:	23ff      	movs	r3, #255	; 0xff
 8001ed4:	73fb      	strb	r3, [r7, #15]
			break;
 8001ed6:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 f99c 	bl	800321e <WrByte>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	73fb      	strb	r3, [r7, #15]

	return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <vl53l7cx_set_power_mode>:

uint8_t vl53l7cx_set_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L7CX_STATUS_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_get_power_mode(p_dev, &current_power_mode);
 8001f0a:	f107 030e 	add.w	r3, r7, #14
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ffaf 	bl	8001e74 <vl53l7cx_get_power_mode>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d061      	beq.n	8001fec <vl53l7cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d028      	beq.n	8001f80 <vl53l7cx_set_power_mode+0x86>
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d14d      	bne.n	8001fce <vl53l7cx_set_power_mode+0xd4>
	{
		case VL53L7CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 f96f 	bl	800321e <WrByte>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	2109      	movs	r1, #9
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f964 	bl	800321e <WrByte>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 8001f60:	2301      	movs	r3, #1
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	2301      	movs	r3, #1
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2306      	movs	r3, #6
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe ff67 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 8001f7e:	e029      	b.n	8001fd4 <vl53l7cx_set_power_mode+0xda>

		case VL53L7CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 f948 	bl	800321e <WrByte>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	2109      	movs	r1, #9
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 f93d 	bl	800321e <WrByte>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2101      	movs	r1, #1
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7fe ff40 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8001fcc:	e002      	b.n	8001fd4 <vl53l7cx_set_power_mode+0xda>

		default:
			status = VL53L7CX_STATUS_ERROR;
 8001fce:	23ff      	movs	r3, #255	; 0xff
 8001fd0:	73fb      	strb	r3, [r7, #15]
			break;
 8001fd2:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 f91e 	bl	800321e <WrByte>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <vl53l7cx_start_ranging>:

uint8_t vl53l7cx_start_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b09c      	sub	sp, #112	; 0x70
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L7CX_STATUS_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8002006:	2300      	movs	r3, #0
 8002008:	653b      	str	r3, [r7, #80]	; 0x50
 800200a:	2300      	movs	r3, #0
 800200c:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 800200e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l7cx_get_resolution(p_dev, &resolution);
 8002014:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fc52 	bl	80028c4 <vl53l7cx_get_resolution>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002028:	4313      	orrs	r3, r2
 800202a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	22ff      	movs	r2, #255	; 0xff
 8002038:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800203a:	4ba7      	ldr	r3, [pc, #668]	; (80022d8 <vl53l7cx_start_ranging+0x2e0>)
 800203c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L7CX_START_BH,
 8002046:	4ba5      	ldr	r3, [pc, #660]	; (80022dc <vl53l7cx_start_ranging+0x2e4>)
 8002048:	f107 040c 	add.w	r4, r7, #12
 800204c:	461d      	mov	r5, r3
 800204e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002056:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800205a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L7CX_TARGET_STATUS_BH,
		VL53L7CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 800205e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002060:	3308      	adds	r3, #8
 8002062:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8002064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002066:	3320      	adds	r3, #32
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 800206a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206c:	3340      	adds	r3, #64	; 0x40
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8002070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002072:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8002080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002090:	2300      	movs	r3, #0
 8002092:	663b      	str	r3, [r7, #96]	; 0x60
 8002094:	e073      	b.n	800217e <vl53l7cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 8002096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	3368      	adds	r3, #104	; 0x68
 800209c:	443b      	add	r3, r7
 800209e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d067      	beq.n	8002176 <vl53l7cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 80020a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	3368      	adds	r3, #104	; 0x68
 80020ae:	443b      	add	r3, r7
 80020b0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80020b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d057      	beq.n	8002176 <vl53l7cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80020c6:	f107 020c 	add.w	r2, r7, #12
 80020ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80020d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03a      	beq.n	8002156 <vl53l7cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80020e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d833      	bhi.n	8002156 <vl53l7cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80020ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f0:	885b      	ldrh	r3, [r3, #2]
 80020f2:	f245 42cf 	movw	r2, #21711	; 0x54cf
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d910      	bls.n	800211c <vl53l7cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80020fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	f645 028f 	movw	r2, #22671	; 0x588f
 8002102:	4293      	cmp	r3, r2
 8002104:	d80a      	bhi.n	800211c <vl53l7cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 8002106:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	b299      	uxth	r1, r3
 8002110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002112:	8813      	ldrh	r3, [r2, #0]
 8002114:	f361 130f 	bfi	r3, r1, #4, #12
 8002118:	8013      	strh	r3, [r2, #0]
 800211a:	e009      	b.n	8002130 <vl53l7cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 800211c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002124:	b299      	uxth	r1, r3
 8002126:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002128:	8813      	ldrh	r3, [r2, #0]
 800212a:	f361 130f 	bfi	r3, r1, #4, #12
 800212e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L7CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	4611      	mov	r1, r2
 8002140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002142:	8812      	ldrh	r2, [r2, #0]
 8002144:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002148:	b292      	uxth	r2, r2
 800214a:	fb01 f202 	mul.w	r2, r1, r2
 800214e:	441a      	add	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	615a      	str	r2, [r3, #20]
 8002154:	e009      	b.n	800216a <vl53l7cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800215c:	8812      	ldrh	r2, [r2, #0]
 800215e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002162:	b292      	uxth	r2, r2
 8002164:	441a      	add	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	615a      	str	r2, [r3, #20]
 8002174:	e000      	b.n	8002178 <vl53l7cx_start_ranging+0x180>
			continue;
 8002176:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800217a:	3301      	adds	r3, #1
 800217c:	663b      	str	r3, [r7, #96]	; 0x60
 800217e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002180:	2b0b      	cmp	r3, #11
 8002182:	d988      	bls.n	8002096 <vl53l7cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f103 0218 	add.w	r2, r3, #24
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	615a      	str	r2, [r3, #20]

	status |= vl53l7cx_dci_write_data(p_dev,
 8002190:	f107 010c 	add.w	r1, r7, #12
 8002194:	2330      	movs	r3, #48	; 0x30
 8002196:	f64c 5278 	movw	r2, #52600	; 0xcd78
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fdc2 	bl	8002d24 <vl53l7cx_dci_write_data>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L7CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 80021b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b6:	3301      	adds	r3, #1
 80021b8:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l7cx_dci_write_data(p_dev,
 80021ba:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80021be:	2308      	movs	r3, #8
 80021c0:	f64c 5260 	movw	r2, #52576	; 0xcd60
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fdad 	bl	8002d24 <vl53l7cx_dci_write_data>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L7CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l7cx_dci_write_data(p_dev,
 80021d8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80021dc:	2310      	movs	r3, #16
 80021de:	f64c 5268 	movw	r2, #52584	; 0xcd68
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fd9e 	bl	8002d24 <vl53l7cx_dci_write_data>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L7CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 f80d 	bl	800321e <WrByte>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800220c:	4313      	orrs	r3, r2
 800220e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	2109      	movs	r1, #9
 8002218:	4618      	mov	r0, r3
 800221a:	f001 f800 	bl	800321e <WrByte>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002226:	4313      	orrs	r3, r2
 8002228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fff2 	bl	800321e <WrByte>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002242:	4313      	orrs	r3, r2
 8002244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L7CX_UI_CMD_END -
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800224e:	2304      	movs	r3, #4
 8002250:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8002254:	f000 fff9 	bl	800324a <WrMulti>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002260:	4313      	orrs	r3, r2
 8002262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8002266:	2303      	movs	r3, #3
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	23ff      	movs	r3, #255	; 0xff
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002272:	2201      	movs	r2, #1
 8002274:	2104      	movs	r1, #4
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fde3 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002284:	4313      	orrs	r3, r2
 8002286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l7cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l7cx_dci_read_data(p_dev,
 8002290:	230c      	movs	r3, #12
 8002292:	f245 4240 	movw	r2, #21568	; 0x5440
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fcba 	bl	8002c10 <vl53l7cx_dci_read_data>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 80022b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d002      	beq.n	80022cc <vl53l7cx_start_ranging+0x2d4>
	{
		status |= VL53L7CX_STATUS_ERROR;
 80022c6:	23ff      	movs	r3, #255	; 0xff
 80022c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 80022cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3768      	adds	r7, #104	; 0x68
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bdb0      	pop	{r4, r5, r7, pc}
 80022d8:	08008ae0 	.word	0x08008ae0
 80022dc:	08008af0 	.word	0x08008af0

080022e0 <vl53l7cx_stop_ranging>:

uint8_t vl53l7cx_stop_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L7CX_STATUS_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	74fb      	strb	r3, [r7, #19]
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f107 020c 	add.w	r2, r7, #12
 80022fe:	2304      	movs	r3, #4
 8002300:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8002304:	f000 ffb8 	bl	8003278 <RdMulti>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	4313      	orrs	r3, r2
 8002310:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8002318:	4293      	cmp	r3, r2
 800231a:	d048      	beq.n	80023ae <vl53l7cx_stop_ranging+0xce>
	{
	        status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002324:	4618      	mov	r0, r3
 8002326:	f000 ff7a 	bl	800321e <WrByte>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	4313      	orrs	r3, r2
 8002332:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2216      	movs	r2, #22
 8002338:	2115      	movs	r1, #21
 800233a:	4618      	mov	r0, r3
 800233c:	f000 ff6f 	bl	800321e <WrByte>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	4313      	orrs	r3, r2
 8002348:	75fb      	strb	r3, [r7, #23]
	        status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	2114      	movs	r1, #20
 8002350:	4618      	mov	r0, r3
 8002352:	f000 ff64 	bl	800321e <WrByte>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	4313      	orrs	r3, r2
 800235e:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8002360:	e021      	b.n	80023a6 <vl53l7cx_stop_ranging+0xc6>
	        {
	        	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f107 0213 	add.w	r2, r7, #19
 8002368:	2106      	movs	r1, #6
 800236a:	4618      	mov	r0, r3
 800236c:	f000 ff42 	bl	80031f4 <RdByte>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	4313      	orrs	r3, r2
 8002378:	75fb      	strb	r3, [r7, #23]
	        	status |= WaitMs(&(p_dev->platform), 10);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	210a      	movs	r1, #10
 800237e:	4618      	mov	r0, r3
 8002380:	f000 ffc7 	bl	8003312 <WaitMs>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	4313      	orrs	r3, r2
 800238c:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 800238e:	8abb      	ldrh	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8002394:	8abb      	ldrh	r3, [r7, #20]
 8002396:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800239a:	d904      	bls.n	80023a6 <vl53l7cx_stop_ranging+0xc6>
				{
					status |= tmp;
 800239c:	7cfa      	ldrb	r2, [r7, #19]
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	75fb      	strb	r3, [r7, #23]
					break;
 80023a4:	e003      	b.n	80023ae <vl53l7cx_stop_ranging+0xce>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dad9      	bge.n	8002362 <vl53l7cx_stop_ranging+0x82>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f107 0213 	add.w	r2, r7, #19
 80023b4:	2106      	movs	r1, #6
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 ff1c 	bl	80031f4 <RdByte>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da15      	bge.n	80023fa <vl53l7cx_stop_ranging+0x11a>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f107 0213 	add.w	r2, r7, #19
 80023d4:	2107      	movs	r1, #7
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 ff0c 	bl	80031f4 <RdByte>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b84      	cmp	r3, #132	; 0x84
 80023ea:	d006      	beq.n	80023fa <vl53l7cx_stop_ranging+0x11a>
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b85      	cmp	r3, #133	; 0x85
 80023f0:	d003      	beq.n	80023fa <vl53l7cx_stop_ranging+0x11a>
		   status |= tmp;
 80023f2:	7cfa      	ldrb	r2, [r7, #19]
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002402:	4618      	mov	r0, r3
 8002404:	f000 ff0b 	bl	800321e <WrByte>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	4313      	orrs	r3, r2
 8002410:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	2114      	movs	r1, #20
 8002418:	4618      	mov	r0, r3
 800241a:	f000 ff00 	bl	800321e <WrByte>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	4313      	orrs	r3, r2
 8002426:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	2115      	movs	r1, #21
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fef5 	bl	800321e <WrByte>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	7dfb      	ldrb	r3, [r7, #23]
 800243a:	4313      	orrs	r3, r2
 800243c:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2204      	movs	r2, #4
 8002442:	2109      	movs	r1, #9
 8002444:	4618      	mov	r0, r3
 8002446:	f000 feea 	bl	800321e <WrByte>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	4313      	orrs	r3, r2
 8002452:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fede 	bl	800321e <WrByte>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	7dfb      	ldrb	r3, [r7, #23]
 8002468:	4313      	orrs	r3, r2
 800246a:	75fb      	strb	r3, [r7, #23]

	return status;
 800246c:	7dfb      	ldrb	r3, [r7, #23]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <vl53l7cx_check_data_ready>:

uint8_t vl53l7cx_check_data_ready(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800248c:	2304      	movs	r3, #4
 800248e:	2100      	movs	r1, #0
 8002490:	f000 fef2 	bl	8003278 <RdMulti>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	4313      	orrs	r3, r2
 800249c:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7c1b      	ldrb	r3, [r3, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d020      	beq.n	80024ee <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80024b2:	2bff      	cmp	r3, #255	; 0xff
 80024b4:	d01b      	beq.n	80024ee <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d116      	bne.n	80024ee <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80024c6:	f003 0305 	and.w	r3, r3, #5
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	d10f      	bne.n	80024ee <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <vl53l7cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	741a      	strb	r2, [r3, #16]
 80024ec:	e00e      	b.n	800250c <vl53l7cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da05      	bge.n	8002506 <vl53l7cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	4313      	orrs	r3, r2
 8002504:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <vl53l7cx_get_ranging_data>:

uint8_t vl53l7cx_get_ranging_data(
		VL53L7CX_Configuration		*p_dev,
		VL53L7CX_ResultsData		*p_results)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8002526:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2100      	movs	r1, #0
 8002534:	f000 fea0 	bl	8003278 <RdMulti>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	7ffb      	ldrb	r3, [r7, #31]
 800253e:	4313      	orrs	r3, r2
 8002540:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	b29b      	uxth	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 fea3 	bl	80032a6 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = 16U; i < (uint32_t)p_dev->data_read_size; i+=4U)
 8002560:	2310      	movs	r3, #16
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e0db      	b.n	800271e <vl53l7cx_get_ranging_data+0x206>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > 0x1U) 
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d915      	bls.n	80025ac <vl53l7cx_get_ranging_data+0x94>
                    && (bh_ptr->type < 0xdU))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d80e      	bhi.n	80025ac <vl53l7cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e005      	b.n	80025b8 <vl53l7cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	885b      	ldrh	r3, [r3, #2]
 80025bc:	f24d 427c 	movw	r2, #54396	; 0xd47c
 80025c0:	4293      	cmp	r3, r2
 80025c2:	f000 8088 	beq.w	80026d6 <vl53l7cx_get_ranging_data+0x1be>
 80025c6:	f24d 427c 	movw	r2, #54396	; 0xd47c
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f300 809f 	bgt.w	800270e <vl53l7cx_get_ranging_data+0x1f6>
 80025d0:	f24d 423c 	movw	r2, #54332	; 0xd43c
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d070      	beq.n	80026ba <vl53l7cx_get_ranging_data+0x1a2>
 80025d8:	f24d 423c 	movw	r2, #54332	; 0xd43c
 80025dc:	4293      	cmp	r3, r2
 80025de:	f300 8096 	bgt.w	800270e <vl53l7cx_get_ranging_data+0x1f6>
 80025e2:	f24d 323c 	movw	r2, #54076	; 0xd33c
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d059      	beq.n	800269e <vl53l7cx_get_ranging_data+0x186>
 80025ea:	f24d 323c 	movw	r2, #54076	; 0xd33c
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f300 808d 	bgt.w	800270e <vl53l7cx_get_ranging_data+0x1f6>
 80025f4:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d042      	beq.n	8002682 <vl53l7cx_get_ranging_data+0x16a>
 80025fc:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 8002600:	4293      	cmp	r3, r2
 8002602:	f300 8084 	bgt.w	800270e <vl53l7cx_get_ranging_data+0x1f6>
 8002606:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 800260a:	4293      	cmp	r3, r2
 800260c:	d02b      	beq.n	8002666 <vl53l7cx_get_ranging_data+0x14e>
 800260e:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 8002612:	4293      	cmp	r3, r2
 8002614:	dc7b      	bgt.n	800270e <vl53l7cx_get_ranging_data+0x1f6>
 8002616:	f64c 4250 	movw	r2, #52304	; 0xcc50
 800261a:	4293      	cmp	r3, r2
 800261c:	d069      	beq.n	80026f2 <vl53l7cx_get_ranging_data+0x1da>
 800261e:	f64c 4250 	movw	r2, #52304	; 0xcc50
 8002622:	4293      	cmp	r3, r2
 8002624:	dc73      	bgt.n	800270e <vl53l7cx_get_ranging_data+0x1f6>
 8002626:	f245 42b4 	movw	r2, #21684	; 0x54b4
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <vl53l7cx_get_ranging_data+0x120>
 800262e:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8002632:	4293      	cmp	r3, r2
 8002634:	d00a      	beq.n	800264c <vl53l7cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8002636:	e06a      	b.n	800270e <vl53l7cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	330c      	adds	r3, #12
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002644:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	701a      	strb	r2, [r3, #0]
				break;
 800264a:	e061      	b.n	8002710 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	3304      	adds	r3, #4
 8002654:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4619      	mov	r1, r3
 8002660:	f005 f9aa 	bl	80079b8 <memcpy>
				break;
 8002664:	e054      	b.n	8002710 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	3304      	adds	r3, #4
 8002670:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4619      	mov	r1, r3
 800267c:	f005 f99c 	bl	80079b8 <memcpy>
				break;
 8002680:	e046      	b.n	8002710 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	3304      	adds	r3, #4
 800268c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4619      	mov	r1, r3
 8002698:	f005 f98e 	bl	80079b8 <memcpy>
				break;
 800269c:	e038      	b.n	8002710 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3304      	adds	r3, #4
 80026a8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4619      	mov	r1, r3
 80026b4:	f005 f980 	bl	80079b8 <memcpy>
				break;
 80026b8:	e02a      	b.n	8002710 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	3304      	adds	r3, #4
 80026c4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4619      	mov	r1, r3
 80026d0:	f005 f972 	bl	80079b8 <memcpy>
				break;
 80026d4:	e01c      	b.n	8002710 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	3304      	adds	r3, #4
 80026e0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4619      	mov	r1, r3
 80026ec:	f005 f964 	bl	80079b8 <memcpy>
				break;
 80026f0:	e00e      	b.n	8002710 <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	3304      	adds	r3, #4
 80026fc:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4619      	mov	r1, r3
 8002708:	f005 f956 	bl	80079b8 <memcpy>
				break;
 800270c:	e000      	b.n	8002710 <vl53l7cx_get_ranging_data+0x1f8>
				break;
 800270e:	bf00      	nop
		}
		i += msize;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
	for (i = 16U; i < (uint32_t)p_dev->data_read_size; i+=4U)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	3304      	adds	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	429a      	cmp	r2, r3
 8002726:	f4ff af1e 	bcc.w	8002566 <vl53l7cx_get_ranging_data+0x4e>

#ifndef VL53L7CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e00d      	b.n	800274c <vl53l7cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0ada      	lsrs	r2, r3, #11
 800273c:	6839      	ldr	r1, [r7, #0]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	3301      	adds	r3, #1
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b3f      	cmp	r3, #63	; 0x3f
 8002750:	d9ee      	bls.n	8002730 <vl53l7cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e045      	b.n	80027e4 <vl53l7cx_get_ranging_data+0x2cc>
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	da00      	bge.n	800276e <vl53l7cx_get_ranging_data+0x256>
 800276c:	3303      	adds	r3, #3
 800276e:	109b      	asrs	r3, r3, #2
 8002770:	b219      	sxth	r1, r3
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	460a      	mov	r2, r1
 8002780:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	da07      	bge.n	80027a6 <vl53l7cx_get_ranging_data+0x28e>
		{
			p_results->distance_mm[i] = 0;
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	2200      	movs	r2, #0
 80027a4:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	b2d9      	uxtb	r1, r3
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80027c0:	460a      	mov	r2, r1
 80027c2:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	3350      	adds	r3, #80	; 0x50
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0ada      	lsrs	r2, r3, #11
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	3350      	adds	r3, #80	; 0x50
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	605a      	str	r2, [r3, #4]
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b3f      	cmp	r3, #63	; 0x3f
 80027e8:	d9b6      	bls.n	8002758 <vl53l7cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	e01b      	b.n	8002828 <vl53l7cx_get_ranging_data+0x310>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d110      	bne.n	8002822 <vl53l7cx_get_ranging_data+0x30a>
			for(j = 0; j < (uint32_t)
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e00a      	b.n	800281c <vl53l7cx_get_ranging_data+0x304>
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L7CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4413      	add	r3, r2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	4413      	add	r3, r2
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f1      	beq.n	8002806 <vl53l7cx_get_ranging_data+0x2ee>
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	3301      	adds	r3, #1
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b3f      	cmp	r3, #63	; 0x3f
 800282c:	d9e0      	bls.n	80027f0 <vl53l7cx_get_ranging_data+0x2d8>
		}
	}
#endif

#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e012      	b.n	800285a <vl53l7cx_get_ranging_data+0x342>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	33d2      	adds	r3, #210	; 0xd2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <vl53l7cx_get_ranging_data+0x3a8>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0bda      	lsrs	r2, r3, #15
 8002848:	6839      	ldr	r1, [r7, #0]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	33d2      	adds	r3, #210	; 0xd2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	3301      	adds	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2b1f      	cmp	r3, #31
 800285e:	d9e9      	bls.n	8002834 <vl53l7cx_get_ranging_data+0x31c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8002866:	b29b      	uxth	r3, r3
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 8002872:	b29a      	uxth	r2, r3
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	4313      	orrs	r3, r2
 8002878:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 800287e:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002888:	b29b      	uxth	r3, r3
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8002892:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 800289c:	b29a      	uxth	r2, r3
 800289e:	89bb      	ldrh	r3, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	81bb      	strh	r3, [r7, #12]
	if(header_id != footer_id)
 80028a4:	89fa      	ldrh	r2, [r7, #14]
 80028a6:	89bb      	ldrh	r3, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d003      	beq.n	80028b4 <vl53l7cx_get_ranging_data+0x39c>
	{
		status |= VL53L7CX_STATUS_CORRUPTED_FRAME;
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	80008001 	.word	0x80008001

080028c4 <vl53l7cx_get_resolution>:

uint8_t vl53l7cx_get_resolution(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80028d8:	2308      	movs	r3, #8
 80028da:	f245 4250 	movw	r2, #21584	; 0x5450
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f996 	bl	8002c10 <vl53l7cx_dci_read_data>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 80028fa:	fb12 f303 	smulbb	r3, r2, r3
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	701a      	strb	r2, [r3, #0]

	return status;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <vl53l7cx_set_resolution>:


uint8_t vl53l7cx_set_resolution(
		VL53L7CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	2b10      	cmp	r3, #16
 8002922:	d002      	beq.n	800292a <vl53l7cx_set_resolution+0x1c>
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d055      	beq.n	80029d4 <vl53l7cx_set_resolution+0xc6>
 8002928:	e0a9      	b.n	8002a7e <vl53l7cx_set_resolution+0x170>
		case VL53L7CX_RESOLUTION_4X4:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002930:	2310      	movs	r3, #16
 8002932:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f96a 	bl	8002c10 <vl53l7cx_dci_read_data>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	4313      	orrs	r3, r2
 8002944:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2240      	movs	r2, #64	; 0x40
 800294a:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2204      	movs	r2, #4
 800295a:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002964:	2310      	movs	r3, #16
 8002966:	f64a 5238 	movw	r2, #44344	; 0xad38
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f9da 	bl	8002d24 <vl53l7cx_dci_write_data>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	4313      	orrs	r3, r2
 8002978:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002980:	2308      	movs	r3, #8
 8002982:	f245 4250 	movw	r2, #21584	; 0x5450
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f942 	bl	8002c10 <vl53l7cx_dci_read_data>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	4313      	orrs	r3, r2
 8002994:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2204      	movs	r2, #4
 80029a2:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2208      	movs	r2, #8
 80029aa:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2208      	movs	r2, #8
 80029b2:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 80029bc:	2308      	movs	r3, #8
 80029be:	f245 4250 	movw	r2, #21584	; 0x5450
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f9ae 	bl	8002d24 <vl53l7cx_dci_write_data>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			break;
 80029d2:	e057      	b.n	8002a84 <vl53l7cx_set_resolution+0x176>

		case VL53L7CX_RESOLUTION_8X8:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 80029da:	2310      	movs	r3, #16
 80029dc:	f64a 5238 	movw	r2, #44344	; 0xad38
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f915 	bl	8002c10 <vl53l7cx_dci_read_data>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2210      	movs	r2, #16
 80029f4:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2210      	movs	r2, #16
 80029fc:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002a0e:	2310      	movs	r3, #16
 8002a10:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f985 	bl	8002d24 <vl53l7cx_dci_write_data>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	f245 4250 	movw	r2, #21584	; 0x5450
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8ed 	bl	8002c10 <vl53l7cx_dci_read_data>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2208      	movs	r2, #8
 8002a44:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2204      	movs	r2, #4
 8002a54:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002a66:	2308      	movs	r3, #8
 8002a68:	f245 4250 	movw	r2, #21584	; 0x5450
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f959 	bl	8002d24 <vl53l7cx_dci_write_data>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);

			break;
 8002a7c:	e002      	b.n	8002a84 <vl53l7cx_set_resolution+0x176>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 8002a7e:	237f      	movs	r3, #127	; 0x7f
 8002a80:	73fb      	strb	r3, [r7, #15]
			break;
 8002a82:	bf00      	nop
		}

	status |= _vl53l7cx_send_offset_data(p_dev, resolution);
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe fa6b 	bl	8000f64 <_vl53l7cx_send_offset_data>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461a      	mov	r2, r3
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l7cx_send_xtalk_data(p_dev, resolution);
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fe fc2d 	bl	80012fc <_vl53l7cx_send_xtalk_data>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	73fb      	strb	r3, [r7, #15]

	return status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <vl53l7cx_set_ranging_frequency_hz>:
}

uint8_t vl53l7cx_set_ranging_frequency_hz(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b088      	sub	sp, #32
 8002aba:	af04      	add	r7, sp, #16
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002acc:	2301      	movs	r3, #1
 8002ace:	9302      	str	r3, [sp, #8]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	1cfb      	adds	r3, r7, #3
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2304      	movs	r3, #4
 8002ada:	f245 4258 	movw	r2, #21592	; 0x5458
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9be 	bl	8002e60 <vl53l7cx_dci_replace_data>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <vl53l7cx_set_integration_time_ms>:
}

uint8_t vl53l7cx_set_integration_time_ms(
		VL53L7CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af04      	add	r7, sp, #16
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d903      	bls.n	8002b18 <vl53l7cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b16:	d904      	bls.n	8002b22 <vl53l7cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L7CX_STATUS_INVALID_PARAM;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e01a      	b.n	8002b58 <vl53l7cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	60bb      	str	r3, [r7, #8]

		status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002b34:	2300      	movs	r3, #0
 8002b36:	9302      	str	r3, [sp, #8]
 8002b38:	2304      	movs	r3, #4
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2314      	movs	r3, #20
 8002b44:	f245 425c 	movw	r2, #21596	; 0x545c
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f989 	bl	8002e60 <vl53l7cx_dci_replace_data>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	73fb      	strb	r3, [r7, #15]
				VL53L7CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <vl53l7cx_set_ranging_mode>:
}

uint8_t vl53l7cx_set_ranging_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f844 	bl	8002c10 <vl53l7cx_dci_read_data>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d002      	beq.n	8002b9e <vl53l7cx_set_ranging_mode+0x3c>
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d00b      	beq.n	8002bb4 <vl53l7cx_set_ranging_mode+0x52>
 8002b9c:	e015      	b.n	8002bca <vl53l7cx_set_ranging_mode+0x68>
	{
		case VL53L7CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
			break;
 8002bb2:	e00d      	b.n	8002bd0 <vl53l7cx_set_ranging_mode+0x6e>

		case VL53L7CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
			break;
 8002bc8:	e002      	b.n	8002bd0 <vl53l7cx_set_ranging_mode+0x6e>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 8002bca:	237f      	movs	r3, #127	; 0x7f
 8002bcc:	73fb      	strb	r3, [r7, #15]
			break;
 8002bce:	bf00      	nop
	}

	status |= vl53l7cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8a1 	bl	8002d24 <vl53l7cx_dci_write_data>
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002bec:	f107 0108 	add.w	r1, r7, #8
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f894 	bl	8002d24 <vl53l7cx_dci_write_data>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <vl53l7cx_dci_read_data>:
uint8_t vl53l7cx_dci_read_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L7CX_STATUS_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	330c      	adds	r3, #12
 8002c28:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <vl53l7cx_dci_read_data+0x110>)
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8002c3c:	d903      	bls.n	8002c46 <vl53l7cx_dci_read_data+0x36>
	{
		status |= VL53L7CX_STATUS_ERROR;
 8002c3e:	23ff      	movs	r3, #255	; 0xff
 8002c40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002c44:	e065      	b.n	8002d12 <vl53l7cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	111b      	asrs	r3, r3, #4
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f107 0214 	add.w	r2, r7, #20
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8002c72:	f000 faea 	bl	800324a <WrMulti>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L7CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8002c84:	2303      	movs	r3, #3
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	23ff      	movs	r3, #255	; 0xff
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002c90:	2201      	movs	r2, #1
 8002c92:	2104      	movs	r1, #4
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7fe f8d4 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L7CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8002ca8:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f642 4104 	movw	r1, #11268	; 0x2c04
 8002cb6:	f000 fadf 	bl	8003278 <RdMulti>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 fae5 	bl	80032a6 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002cdc:	2300      	movs	r3, #0
 8002cde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ce0:	e011      	b.n	8002d06 <vl53l7cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8002ce2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002ce6:	1d1a      	adds	r2, r3, #4
 8002ce8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	440b      	add	r3, r1
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	440a      	add	r2, r1
 8002cf4:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8002cf8:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002cfa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d0a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dbe7      	blt.n	8002ce2 <vl53l7cx_dci_read_data+0xd2>
		}
	}

	return status;
 8002d12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	08008b20 	.word	0x08008b20

08002d24 <vl53l7cx_dci_write_data>:
uint8_t vl53l7cx_dci_write_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	753b      	strb	r3, [r7, #20]
 8002d40:	2300      	movs	r3, #0
 8002d42:	757b      	strb	r3, [r7, #21]
 8002d44:	2300      	movs	r3, #0
 8002d46:	75bb      	strb	r3, [r7, #22]
 8002d48:	230f      	movs	r3, #15
 8002d4a:	75fb      	strb	r3, [r7, #23]
 8002d4c:	2305      	movs	r3, #5
 8002d4e:	763b      	strb	r3, [r7, #24]
 8002d50:	2301      	movs	r3, #1
 8002d52:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8002d54:	887b      	ldrh	r3, [r7, #2]
 8002d56:	3308      	adds	r3, #8
 8002d58:	121b      	asrs	r3, r3, #8
 8002d5a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002d5c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	3308      	adds	r3, #8
 8002d64:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002d66:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L7CX_UI_CMD_END -
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8002d6e:	3334      	adds	r3, #52	; 0x34
 8002d70:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8002d78:	d903      	bls.n	8002d82 <vl53l7cx_dci_write_data+0x5e>
           > (uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L7CX_STATUS_ERROR;
 8002d7a:	23ff      	movs	r3, #255	; 0xff
 8002d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d80:	e068      	b.n	8002e54 <vl53l7cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	111b      	asrs	r3, r3, #4
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002d98:	887b      	ldrh	r3, [r7, #2]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	4619      	mov	r1, r3
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f000 fa7d 	bl	80032a6 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002db4:	e012      	b.n	8002ddc <vl53l7cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8002db6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	7811      	ldrb	r1, [r2, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4413      	add	r3, r2
 8002dca:	460a      	mov	r2, r1
 8002dcc:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002dd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002ddc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	dae8      	bge.n	8002db6 <vl53l7cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	3304      	adds	r3, #4
 8002df2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	cb03      	ldmia	r3!, {r0, r1}
 8002e02:	6010      	str	r0, [r2, #0]
 8002e04:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8002e06:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8002e0e:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8002e10:	330c      	adds	r3, #12
 8002e12:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002e14:	f000 fa19 	bl	800324a <WrMulti>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8002e26:	2303      	movs	r3, #3
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	23ff      	movs	r3, #255	; 0xff
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002e32:	2201      	movs	r2, #1
 8002e34:	2104      	movs	r1, #4
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7fe f803 	bl	8000e42 <_vl53l7cx_poll_for_answer>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	68b8      	ldr	r0, [r7, #8]
 8002e50:	f000 fa29 	bl	80032a6 <SwapBuffer>
	}

	return status;
 8002e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	; 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <vl53l7cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]

	status |= vl53l7cx_dci_read_data(p_dev, data, index, data_size);
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff fec9 	bl	8002c10 <vl53l7cx_dci_read_data>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	461a      	mov	r2, r3
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8002e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e90:	6a39      	ldr	r1, [r7, #32]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fd90 	bl	80079b8 <memcpy>
	status |= vl53l7cx_dci_write_data(p_dev, data, index, data_size);
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff40 	bl	8002d24 <vl53l7cx_dci_write_data>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	75fb      	strb	r3, [r7, #23]

	return status;
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <vl53l7cx_set_detection_thresholds_enable>:
}

uint8_t vl53l7cx_set_detection_thresholds_enable(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af04      	add	r7, sp, #16
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8002ec8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002ecc:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d104      	bne.n	8002ede <vl53l7cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	73bb      	strb	r3, [r7, #14]
 8002edc:	e003      	b.n	8002ee6 <vl53l7cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8002ee2:	230c      	movs	r3, #12
 8002ee4:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002eec:	2300      	movs	r3, #0
 8002eee:	9302      	str	r3, [sp, #8]
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	f107 0308 	add.w	r3, r7, #8
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	2308      	movs	r3, #8
 8002efc:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ffad 	bl	8002e60 <vl53l7cx_dci_replace_data>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002f16:	2311      	movs	r3, #17
 8002f18:	9302      	str	r3, [sp, #8]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	f107 030e 	add.w	r3, r7, #14
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2314      	movs	r3, #20
 8002f26:	f245 4288 	movw	r2, #21640	; 0x5488
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ff98 	bl	8002e60 <vl53l7cx_dci_replace_data>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <vl53l7cx_set_detection_thresholds>:
}

uint8_t vl53l7cx_set_detection_thresholds(
		VL53L7CX_Configuration			*p_dev,
		VL53L7CX_DetectionThresholds	*p_thresholds)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L7CX_STATUS_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8002f52:	4aa7      	ldr	r2, [pc, #668]	; (80031f0 <vl53l7cx_set_detection_thresholds+0x2ac>)
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f5c:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	75fb      	strb	r3, [r7, #23]
 8002f64:	e120      	b.n	80031a8 <vl53l7cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	7a1b      	ldrb	r3, [r3, #8]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	f200 8117 	bhi.w	80031a0 <vl53l7cx_set_detection_thresholds+0x25c>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <vl53l7cx_set_detection_thresholds+0x34>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002fc5 	.word	0x08002fc5
 8002f7c:	08003013 	.word	0x08003013
 8002f80:	080031a1 	.word	0x080031a1
 8002f84:	08003061 	.word	0x08003061
 8002f88:	080031a1 	.word	0x080031a1
 8002f8c:	080031a1 	.word	0x080031a1
 8002f90:	080031a1 	.word	0x080031a1
 8002f94:	080030af 	.word	0x080030af
 8002f98:	080031a1 	.word	0x080031a1
 8002f9c:	080031a1 	.word	0x080031a1
 8002fa0:	080031a1 	.word	0x080031a1
 8002fa4:	080031a1 	.word	0x080031a1
 8002fa8:	080030fd 	.word	0x080030fd
 8002fac:	080031a1 	.word	0x080031a1
 8002fb0:	080031a1 	.word	0x080031a1
 8002fb4:	080031a1 	.word	0x080031a1
 8002fb8:	080031a1 	.word	0x080031a1
 8002fbc:	080031a1 	.word	0x080031a1
 8002fc0:	0800314b 	.word	0x0800314b
		{
			case VL53L7CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8002fc4:	7dfa      	ldrb	r2, [r7, #23]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	6819      	ldr	r1, [r3, #0]
 8002fd6:	7dfa      	ldrb	r2, [r7, #23]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	008a      	lsls	r2, r1, #2
 8002fe8:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8002fea:	7dfa      	ldrb	r2, [r7, #23]
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	7dfa      	ldrb	r2, [r7, #23]
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	461a      	mov	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4413      	add	r3, r2
 800300c:	008a      	lsls	r2, r1, #2
 800300e:	605a      	str	r2, [r3, #4]
				break;
 8003010:	e0c7      	b.n	80031a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8003012:	7dfa      	ldrb	r2, [r7, #23]
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	461a      	mov	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	4413      	add	r3, r2
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	7dfa      	ldrb	r2, [r7, #23]
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	461a      	mov	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4413      	add	r3, r2
 8003034:	02ca      	lsls	r2, r1, #11
 8003036:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8003038:	7dfa      	ldrb	r2, [r7, #23]
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	461a      	mov	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4413      	add	r3, r2
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	7dfa      	ldrb	r2, [r7, #23]
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	4413      	add	r3, r2
 800305a:	02ca      	lsls	r2, r1, #11
 800305c:	605a      	str	r2, [r3, #4]
				break;
 800305e:	e0a0      	b.n	80031a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8003060:	7dfa      	ldrb	r2, [r7, #23]
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	461a      	mov	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4413      	add	r3, r2
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	7dfa      	ldrb	r2, [r7, #23]
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	461a      	mov	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	4413      	add	r3, r2
 8003082:	01ca      	lsls	r2, r1, #7
 8003084:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8003086:	7dfa      	ldrb	r2, [r7, #23]
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	461a      	mov	r2, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	4413      	add	r3, r2
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	7dfa      	ldrb	r2, [r7, #23]
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	461a      	mov	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	01ca      	lsls	r2, r1, #7
 80030aa:	605a      	str	r2, [r3, #4]
				break;
 80030ac:	e079      	b.n	80031a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80030ae:	7dfa      	ldrb	r2, [r7, #23]
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	461a      	mov	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	6819      	ldr	r1, [r3, #0]
 80030c0:	7dfa      	ldrb	r2, [r7, #23]
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	461a      	mov	r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4413      	add	r3, r2
 80030d0:	02ca      	lsls	r2, r1, #11
 80030d2:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80030d4:	7dfa      	ldrb	r2, [r7, #23]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	7dfa      	ldrb	r2, [r7, #23]
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	461a      	mov	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	02ca      	lsls	r2, r1, #11
 80030f8:	605a      	str	r2, [r3, #4]
				break;
 80030fa:	e052      	b.n	80031a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 80030fc:	7dfa      	ldrb	r2, [r7, #23]
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	461a      	mov	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4413      	add	r3, r2
 800310c:	6819      	ldr	r1, [r3, #0]
 800310e:	7dfa      	ldrb	r2, [r7, #23]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	461a      	mov	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	4413      	add	r3, r2
 800311e:	020a      	lsls	r2, r1, #8
 8003120:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8003122:	7dfa      	ldrb	r2, [r7, #23]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	461a      	mov	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	4413      	add	r3, r2
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	7dfa      	ldrb	r2, [r7, #23]
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	461a      	mov	r2, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4413      	add	r3, r2
 8003144:	020a      	lsls	r2, r1, #8
 8003146:	605a      	str	r2, [r3, #4]
				break;
 8003148:	e02b      	b.n	80031a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 800314a:	7dfa      	ldrb	r2, [r7, #23]
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	461a      	mov	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	4413      	add	r3, r2
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	7df9      	ldrb	r1, [r7, #23]
 800315e:	460b      	mov	r3, r1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	440b      	add	r3, r1
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4619      	mov	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4419      	add	r1, r3
 800316c:	4613      	mov	r3, r2
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8003174:	7dfa      	ldrb	r2, [r7, #23]
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	461a      	mov	r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4413      	add	r3, r2
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	7df9      	ldrb	r1, [r7, #23]
 8003188:	460b      	mov	r3, r1
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	440b      	add	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4619      	mov	r1, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	4419      	add	r1, r3
 8003196:	4613      	mov	r3, r2
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	604b      	str	r3, [r1, #4]
				break;
 800319e:	e000      	b.n	80031a2 <vl53l7cx_set_detection_thresholds+0x25e>
			default:
				break;
 80031a0:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	3301      	adds	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b3f      	cmp	r3, #63	; 0x3f
 80031ac:	f67f aedb 	bls.w	8002f66 <vl53l7cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 80031b0:	f107 010c 	add.w	r1, r7, #12
 80031b4:	2308      	movs	r3, #8
 80031b6:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff fdb2 	bl	8002d24 <vl53l7cx_dci_write_data>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	7dbb      	ldrb	r3, [r7, #22]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 80031ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031ce:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fda5 	bl	8002d24 <vl53l7cx_dci_write_data>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	7dbb      	ldrb	r3, [r7, #22]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L7CX_NB_THRESHOLDS
			*sizeof(VL53L7CX_DetectionThresholds)));

	return status;
 80031e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	08008b2c 	.word	0x08008b2c

080031f4 <RdByte>:

uint8_t RdByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	460b      	mov	r3, r1
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689c      	ldr	r4, [r3, #8]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8818      	ldrh	r0, [r3, #0]
 800320a:	8979      	ldrh	r1, [r7, #10]
 800320c:	2301      	movs	r3, #1
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	47a0      	blx	r4
 8003212:	4603      	mov	r3, r0
 8003214:	b2db      	uxtb	r3, r3
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}

0800321e <WrByte>:

uint8_t WrByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 800321e:	b590      	push	{r4, r7, lr}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	807b      	strh	r3, [r7, #2]
 800322a:	4613      	mov	r3, r2
 800322c:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685c      	ldr	r4, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8818      	ldrh	r0, [r3, #0]
 8003236:	1c7a      	adds	r2, r7, #1
 8003238:	8879      	ldrh	r1, [r7, #2]
 800323a:	2301      	movs	r3, #1
 800323c:	47a0      	blx	r4
 800323e:	4603      	mov	r3, r0
 8003240:	b2db      	uxtb	r3, r3
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bd90      	pop	{r4, r7, pc}

0800324a <WrMulti>:
uint8_t WrMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800324a:	b590      	push	{r4, r7, lr}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	460b      	mov	r3, r1
 8003258:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685c      	ldr	r4, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8818      	ldrh	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	8979      	ldrh	r1, [r7, #10]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	47a0      	blx	r4
 800326c:	4603      	mov	r3, r0
 800326e:	b2db      	uxtb	r3, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <RdMulti>:
uint8_t RdMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	460b      	mov	r3, r1
 8003286:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689c      	ldr	r4, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8818      	ldrh	r0, [r3, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	8979      	ldrh	r1, [r7, #10]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	47a0      	blx	r4
 800329a:	4603      	mov	r3, r0
 800329c:	b2db      	uxtb	r3, r3
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}

080032a6 <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e021      	b.n	80032fc <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3301      	adds	r3, #1
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	440b      	add	r3, r1
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3302      	adds	r3, #2
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	440b      	add	r3, r1
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	3203      	adds	r2, #3
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	440a      	add	r2, r1
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	4313      	orrs	r3, r2
    tmp = (
 80032ea:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3304      	adds	r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	887b      	ldrh	r3, [r7, #2]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d3d9      	bcc.n	80032b8 <SwapBuffer+0x12>
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <WaitMs>:

uint8_t WaitMs(
		VL53L7CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4798      	blx	r3
 8003322:	4603      	mov	r3, r0
 8003324:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8003326:	bf00      	nop
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4798      	blx	r3
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f5      	bhi.n	8003328 <WaitMs+0x16>

  return 0;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <VL53L7CX_RegisterBusIO>:
  * @param pObj    vl53l7cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_RegisterBusIO(VL53L7CX_Object_t *pObj, VL53L7CX_IO_t *pIO)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <VL53L7CX_RegisterBusIO+0x16>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <VL53L7CX_RegisterBusIO+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 800335c:	f06f 0301 	mvn.w	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e033      	b.n	80033cc <VL53L7CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	891a      	ldrh	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	615a      	str	r2, [r3, #20]

    /* fill vl53l7cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	891a      	ldrh	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <VL53L7CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4798      	blx	r3
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	e002      	b.n	80033cc <VL53L7CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L7CX_ERROR;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80033cc:	68fb      	ldr	r3, [r7, #12]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <VL53L7CX_Init>:
  * @brief Initializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Init(VL53L7CX_Object_t *pObj)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <VL53L7CX_Init+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80033e4:	f06f 0301 	mvn.w	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e02e      	b.n	800344a <VL53L7CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <VL53L7CX_Init+0x28>
  {
    ret =  VL53L7CX_ERROR;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e025      	b.n	800344a <VL53L7CX_Init+0x74>
  }
  else if (vl53l7cx_init(&pObj->Dev) != VL53L7CX_STATUS_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3318      	adds	r3, #24
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe f8c6 	bl	8001594 <vl53l7cx_init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <VL53L7CX_Init+0x40>
  {
    ret = VL53L7CX_ERROR;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e019      	b.n	800344a <VL53L7CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    pObj->IsBlocking = 0U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
    pObj->IsContinuous = 0U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
    pObj->IsAmbientEnabled = 0U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = 0U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsInitialized = 1U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
    ret = VL53L7CX_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <VL53L7CX_DeInit>:
  * @brief Deinitializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_DeInit(VL53L7CX_Object_t *pObj)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <VL53L7CX_DeInit+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003462:	f06f 0301 	mvn.w	r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e018      	b.n	800349c <VL53L7CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d110      	bne.n	8003496 <VL53L7CX_DeInit+0x42>
  {
    /* De-initialize the vl53l7cx interface */
    if (pObj->IO.DeInit() != 0)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4798      	blx	r3
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <VL53L7CX_DeInit+0x34>
    {
      ret = VL53L7CX_ERROR;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e009      	b.n	800349c <VL53L7CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L7CX_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8003494:	e002      	b.n	800349c <VL53L7CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L7CX_ERROR;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
 800349a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800349c:	68fb      	ldr	r3, [r7, #12]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <VL53L7CX_ReadID>:
  * @param pObj    vl53l7cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ReadID(VL53L7CX_Object_t *pObj, uint32_t *pId)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L7CX_STATUS_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <VL53L7CX_ReadID+0x22>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <VL53L7CX_ReadID+0x2a>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80034c8:	f06f 0301 	mvn.w	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	e045      	b.n	800355c <VL53L7CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3318      	adds	r3, #24
 80034d4:	2200      	movs	r2, #0
 80034d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fe9f 	bl	800321e <WrByte>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	7afb      	ldrb	r3, [r7, #11]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3318      	adds	r3, #24
 80034ee:	f107 020a 	add.w	r2, r7, #10
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fe7d 	bl	80031f4 <RdByte>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	4313      	orrs	r3, r2
 8003502:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3318      	adds	r3, #24
 8003508:	f107 0209 	add.w	r2, r7, #9
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fe70 	bl	80031f4 <RdByte>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	7afb      	ldrb	r3, [r7, #11]
 800351a:	4313      	orrs	r3, r2
 800351c:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3318      	adds	r3, #24
 8003522:	2202      	movs	r2, #2
 8003524:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fe78 	bl	800321e <WrByte>
 800352e:	4603      	mov	r3, r0
 8003530:	461a      	mov	r2, r3
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	4313      	orrs	r3, r2
 8003536:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8003538:	7afb      	ldrb	r3, [r7, #11]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d108      	bne.n	8003550 <VL53L7CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 800353e:	7abb      	ldrb	r3, [r7, #10]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	7a7a      	ldrb	r2, [r7, #9]
 8003544:	441a      	add	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	e005      	b.n	800355c <VL53L7CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_ERROR;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <VL53L7CX_GetCapabilities>:
  * @param pObj    vl53l7cx context object.
  * @param pCap    Pointer to the vl53l7cx capabilities.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetCapabilities(VL53L7CX_Object_t *pObj, VL53L7CX_Capabilities_t *pCap)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <VL53L7CX_GetCapabilities+0x16>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d103      	bne.n	8003584 <VL53L7CX_GetCapabilities+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 800357c:	f06f 0301 	mvn.w	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	e00d      	b.n	80035a0 <VL53L7CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L7CX_RESOLUTION_8X8;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L7CX_TARGET_PER_ZONE;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2201      	movs	r2, #1
 800358e:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	60da      	str	r2, [r3, #12]

    ret = VL53L7CX_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <VL53L7CX_ConfigProfile>:
  * @param pObj    vl53l7cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigProfile(VL53L7CX_Object_t *pObj, VL53L7CX_ProfileConfig_t *pConfig)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L7CX_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <VL53L7CX_ConfigProfile+0x4c>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <VL53L7CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L7CX_INVALID_PARAM;
  }

  switch (profile)
 80035dc:	7c7b      	ldrb	r3, [r7, #17]
 80035de:	3b01      	subs	r3, #1
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d822      	bhi.n	800362a <VL53L7CX_ConfigProfile+0x7a>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <VL53L7CX_ConfigProfile+0x3c>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	08003603 	.word	0x08003603
 80035f0:	0800360d 	.word	0x0800360d
 80035f4:	08003617 	.word	0x08003617
 80035f8:	08003621 	.word	0x08003621
    return VL53L7CX_INVALID_PARAM;
 80035fc:	f06f 0301 	mvn.w	r3, #1
 8003600:	e070      	b.n	80036e4 <VL53L7CX_ConfigProfile+0x134>
  {
  case VL53L7CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 8003602:	2310      	movs	r3, #16
 8003604:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 8003606:	2301      	movs	r3, #1
 8003608:	74bb      	strb	r3, [r7, #18]
    break;
 800360a:	e016      	b.n	800363a <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 800360c:	2310      	movs	r3, #16
 800360e:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 8003610:	2303      	movs	r3, #3
 8003612:	74bb      	strb	r3, [r7, #18]
    break;
 8003614:	e011      	b.n	800363a <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 8003616:	2340      	movs	r3, #64	; 0x40
 8003618:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 800361a:	2301      	movs	r3, #1
 800361c:	74bb      	strb	r3, [r7, #18]
    break;
 800361e:	e00c      	b.n	800363a <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 8003620:	2340      	movs	r3, #64	; 0x40
 8003622:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 8003624:	2303      	movs	r3, #3
 8003626:	74bb      	strb	r3, [r7, #18]
    break;
 8003628:	e007      	b.n	800363a <VL53L7CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 800362a:	2300      	movs	r3, #0
 800362c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 800362e:	2300      	movs	r3, #0
 8003630:	74bb      	strb	r3, [r7, #18]
    ret = VL53L7CX_INVALID_PARAM;
 8003632:	f06f 0301 	mvn.w	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
    break;
 8003638:	bf00      	nop
  }

  if (ret != VL53L7CX_OK)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <VL53L7CX_ConfigProfile+0x94>
  {
    return ret;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	e04f      	b.n	80036e4 <VL53L7CX_ConfigProfile+0x134>
  }
  else if (vl53l7cx_set_resolution(&pObj->Dev, resolution) != VL53L7CX_STATUS_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3318      	adds	r3, #24
 8003648:	7cfa      	ldrb	r2, [r7, #19]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff f95e 	bl	800290e <vl53l7cx_set_resolution>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <VL53L7CX_ConfigProfile+0xb0>
  {
    ret = VL53L7CX_ERROR;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e040      	b.n	80036e2 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L7CX_STATUS_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3318      	adds	r3, #24
 8003664:	7cba      	ldrb	r2, [r7, #18]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fa7a 	bl	8002b62 <vl53l7cx_set_ranging_mode>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <VL53L7CX_ConfigProfile+0xcc>
  {
    ret = VL53L7CX_ERROR;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	e032      	b.n	80036e2 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L7CX_STATUS_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3318      	adds	r3, #24
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fa38 	bl	8002af8 <vl53l7cx_set_integration_time_ms>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <VL53L7CX_ConfigProfile+0xe6>
  {
    ret = VL53L7CX_ERROR;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e025      	b.n	80036e2 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L7CX_STATUS_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3318      	adds	r3, #24
 800369a:	7afa      	ldrb	r2, [r7, #11]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fa09 	bl	8002ab6 <vl53l7cx_set_ranging_frequency_hz>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <VL53L7CX_ConfigProfile+0x102>
  {
    ret = VL53L7CX_ERROR;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e017      	b.n	80036e2 <VL53L7CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951

    ret = VL53L7CX_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80036e2:	697b      	ldr	r3, [r7, #20]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <VL53L7CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigROI(VL53L7CX_Object_t *pObj, VL53L7CX_ROIConfig_t *pROIConfig)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L7CX_NOT_IMPLEMENTED;
 80036f6:	f06f 0303 	mvn.w	r3, #3
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <VL53L7CX_ConfigIT>:
  * @param pObj    vl53l7cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigIT(VL53L7CX_Object_t *pObj, VL53L7CX_ITConfig_t *pITConfig)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	72bb      	strb	r3, [r7, #10]
  static VL53L7CX_DetectionThresholds thresholds[VL53L7CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <VL53L7CX_ConfigIT+0x1a>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <VL53L7CX_ConfigIT+0x22>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003722:	f06f 0301 	mvn.w	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e09f      	b.n	800386a <VL53L7CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L7CX_IT_DEFAULT)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2bff      	cmp	r3, #255	; 0xff
 8003730:	d113      	bne.n	800375a <VL53L7CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3318      	adds	r3, #24
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fbbd 	bl	8002eb8 <vl53l7cx_set_detection_thresholds_enable>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	7abb      	ldrb	r3, [r7, #10]
 8003744:	4313      	orrs	r3, r2
 8003746:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 8003748:	7abb      	ldrb	r3, [r7, #10]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <VL53L7CX_ConfigIT+0x4c>
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
 8003752:	e000      	b.n	8003756 <VL53L7CX_ConfigIT+0x4e>
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e087      	b.n	800386a <VL53L7CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l7cx_get_resolution(&pObj->Dev, &res);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3318      	adds	r3, #24
 800375e:	f107 0209 	add.w	r2, r7, #9
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f8ad 	bl	80028c4 <vl53l7cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	72fb      	strb	r3, [r7, #11]
 800376e:	e044      	b.n	80037fa <VL53L7CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8003770:	7afa      	ldrb	r2, [r7, #11]
 8003772:	4940      	ldr	r1, [pc, #256]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	330a      	adds	r3, #10
 8003780:	7afa      	ldrb	r2, [r7, #11]
 8003782:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L7CX_DISTANCE_MM;
 8003784:	7afa      	ldrb	r2, [r7, #11]
 8003786:	493b      	ldr	r1, [pc, #236]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3308      	adds	r3, #8
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	7afa      	ldrb	r2, [r7, #11]
 800379e:	b2d8      	uxtb	r0, r3
 80037a0:	4934      	ldr	r1, [pc, #208]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3309      	adds	r3, #9
 80037ae:	4602      	mov	r2, r0
 80037b0:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L7CX_OPERATION_NONE;
 80037b2:	7afa      	ldrb	r2, [r7, #11]
 80037b4:	492f      	ldr	r1, [pc, #188]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	330b      	adds	r3, #11
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	7afa      	ldrb	r2, [r7, #11]
 80037cc:	4618      	mov	r0, r3
 80037ce:	4929      	ldr	r1, [pc, #164]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	7afa      	ldrb	r2, [r7, #11]
 80037e2:	4618      	mov	r0, r3
 80037e4:	4923      	ldr	r1, [pc, #140]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3304      	adds	r3, #4
 80037f2:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 80037f4:	7afb      	ldrb	r3, [r7, #11]
 80037f6:	3301      	adds	r3, #1
 80037f8:	72fb      	strb	r3, [r7, #11]
 80037fa:	7a7b      	ldrb	r3, [r7, #9]
 80037fc:	7afa      	ldrb	r2, [r7, #11]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d3b6      	bcc.n	8003770 <VL53L7CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L7CX_LAST_THRESHOLD;
 8003802:	7afa      	ldrb	r2, [r7, #11]
 8003804:	491b      	ldr	r1, [pc, #108]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	330a      	adds	r3, #10
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	7afa      	ldrb	r2, [r7, #11]
 8003816:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800381a:	b2d8      	uxtb	r0, r3
 800381c:	4915      	ldr	r1, [pc, #84]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	330a      	adds	r3, #10
 800382a:	4602      	mov	r2, r0
 800382c:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l7cx_set_detection_thresholds(&pObj->Dev, thresholds);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3318      	adds	r3, #24
 8003832:	4910      	ldr	r1, [pc, #64]	; (8003874 <VL53L7CX_ConfigIT+0x16c>)
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fb85 	bl	8002f44 <vl53l7cx_set_detection_thresholds>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	7abb      	ldrb	r3, [r7, #10]
 8003840:	4313      	orrs	r3, r2
 8003842:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3318      	adds	r3, #24
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fb34 	bl	8002eb8 <vl53l7cx_set_detection_thresholds_enable>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	7abb      	ldrb	r3, [r7, #10]
 8003856:	4313      	orrs	r3, r2
 8003858:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 800385a:	7abb      	ldrb	r3, [r7, #10]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <VL53L7CX_ConfigIT+0x15e>
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	e000      	b.n	8003868 <VL53L7CX_ConfigIT+0x160>
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000144 	.word	0x20000144

08003878 <VL53L7CX_GetDistance>:
  * @param pObj    vl53l7cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetDistance(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <VL53L7CX_GetDistance+0x16>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <VL53L7CX_GetDistance+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 800388e:	f06f 0301 	mvn.w	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e019      	b.n	80038ca <VL53L7CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <VL53L7CX_GetDistance+0x30>
  {
    ret = VL53L7CX_ERROR;
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e010      	b.n	80038ca <VL53L7CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d106      	bne.n	80038c0 <VL53L7CX_GetDistance+0x48>
    {
      ret = vl53l7cx_poll_for_measurement(pObj, V53L7CX_POLL_TIMEOUT);
 80038b2:	f241 3188 	movw	r1, #5000	; 0x1388
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f93a 	bl	8003b30 <vl53l7cx_poll_for_measurement>
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	e004      	b.n	80038ca <VL53L7CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l7cx_poll_for_measurement(pObj, 0U);
 80038c0:	2100      	movs	r1, #0
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f934 	bl	8003b30 <vl53l7cx_poll_for_measurement>
 80038c8:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L7CX_OK)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <VL53L7CX_GetDistance+0x62>
  {
    ret = vl53l7cx_get_result(pObj, pResult);
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f95f 	bl	8003b96 <vl53l7cx_get_result>
 80038d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <VL53L7CX_Start>:
  * @param pObj    vl53l7cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Start(VL53L7CX_Object_t *pObj, uint32_t Mode)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <VL53L7CX_Start+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80038f4:	f06f 0301 	mvn.w	r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e04c      	b.n	8003996 <VL53L7CX_Start+0xb2>
  }
  else if (vl53l7cx_start_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3318      	adds	r3, #24
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fb79 	bl	8001ff8 <vl53l7cx_start_ranging>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d141      	bne.n	8003990 <VL53L7CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L7CX_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	3b01      	subs	r3, #1
 800391c:	2b03      	cmp	r3, #3
 800391e:	d82f      	bhi.n	8003980 <VL53L7CX_Start+0x9c>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <VL53L7CX_Start+0x44>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003939 	.word	0x08003939
 800392c:	0800394b 	.word	0x0800394b
 8003930:	0800395d 	.word	0x0800395d
 8003934:	0800396f 	.word	0x0800396f
    {
      case VL53L7CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 8003948:	e025      	b.n	8003996 <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800395a:	e01c      	b.n	8003996 <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800396c:	e013      	b.n	8003996 <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800397e:	e00a      	b.n	8003996 <VL53L7CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
        ret = VL53L7CX_INVALID_PARAM;
 8003988:	f06f 0301 	mvn.w	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
        break;
 800398e:	e002      	b.n	8003996 <VL53L7CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003996:	68fb      	ldr	r3, [r7, #12]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <VL53L7CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Stop(VL53L7CX_Object_t *pObj)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <VL53L7CX_Stop+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80039ae:	f06f 0301 	mvn.w	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	e01a      	b.n	80039ec <VL53L7CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <VL53L7CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L7CX_ERROR;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e011      	b.n	80039ec <VL53L7CX_Stop+0x4c>
  }
  else if (vl53l7cx_stop_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3318      	adds	r3, #24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fc87 	bl	80022e0 <vl53l7cx_stop_ranging>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <VL53L7CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L7CX_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e002      	b.n	80039ec <VL53L7CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L7CX_ERROR;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <VL53L7CX_SetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param Address     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetAddress(VL53L7CX_Object_t *pObj, uint32_t Address)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <VL53L7CX_SetAddress+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003a06:	f06f 0301 	mvn.w	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e016      	b.n	8003a3c <VL53L7CX_SetAddress+0x46>
  }
  else if (vl53l7cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L7CX_STATUS_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3318      	adds	r3, #24
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	b292      	uxth	r2, r2
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe f9f4 	bl	8001e08 <vl53l7cx_set_i2c_address>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <VL53L7CX_SetAddress+0x38>
  {
    ret = VL53L7CX_ERROR;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e006      	b.n	8003a3c <VL53L7CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	811a      	strh	r2, [r3, #8]
    ret = VL53L7CX_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <VL53L7CX_GetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetAddress(VL53L7CX_Object_t *pObj, uint32_t *pAddress)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <VL53L7CX_GetAddress+0x16>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <VL53L7CX_GetAddress+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003a5c:	f06f 0301 	mvn.w	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	e006      	b.n	8003a72 <VL53L7CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	891b      	ldrh	r3, [r3, #8]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <VL53L7CX_SetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetPowerMode(VL53L7CX_Object_t *pObj, uint32_t PowerMode)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <VL53L7CX_SetPowerMode+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003a90:	f06f 0301 	mvn.w	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e01a      	b.n	8003ace <VL53L7CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L7CX_POWER_MODE_SLEEP) &&
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <VL53L7CX_SetPowerMode+0x2c>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d003      	beq.n	8003aac <VL53L7CX_SetPowerMode+0x2c>
           (PowerMode != VL53L7CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003aa4:	f06f 0301 	mvn.w	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e010      	b.n	8003ace <VL53L7CX_SetPowerMode+0x4e>
  }
  else if (vl53l7cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L7CX_STATUS_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3318      	adds	r3, #24
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fa1f 	bl	8001efa <vl53l7cx_set_power_mode>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <VL53L7CX_SetPowerMode+0x4a>
  {
    ret = VL53L7CX_ERROR;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e001      	b.n	8003ace <VL53L7CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L7CX_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <VL53L7CX_GetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetPowerMode(VL53L7CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <VL53L7CX_GetPowerMode+0x16>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <VL53L7CX_GetPowerMode+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003aee:	f06f 0301 	mvn.w	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e017      	b.n	8003b26 <VL53L7CX_GetPowerMode+0x4e>
  }
  else if (vl53l7cx_get_power_mode(&pObj->Dev, &powermode) != VL53L7CX_STATUS_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3318      	adds	r3, #24
 8003afa:	f107 020b 	add.w	r2, r7, #11
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe f9b7 	bl	8001e74 <vl53l7cx_get_power_mode>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <VL53L7CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_ERROR;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e005      	b.n	8003b26 <VL53L7CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003b26:	68fb      	ldr	r3, [r7, #12]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <vl53l7cx_poll_for_measurement>:

/** @defgroup VL53L7CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l7cx_poll_for_measurement(VL53L7CX_Object_t *pObj, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <vl53l7cx_poll_for_measurement+0x1c>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003b44:	f06f 0301 	mvn.w	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e01f      	b.n	8003b8c <vl53l7cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L7CX_TIMEOUT;
 8003b4c:	f06f 0302 	mvn.w	r3, #2
 8003b50:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4798      	blx	r3
 8003b58:	4603      	mov	r3, r0
 8003b5a:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l7cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3318      	adds	r3, #24
 8003b60:	f107 020f 	add.w	r2, r7, #15
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fc85 	bl	8002476 <vl53l7cx_check_data_ready>

      if (NewDataReady == 1U)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <vl53l7cx_poll_for_measurement+0x48>
      {
        ret = VL53L7CX_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
        break;
 8003b76:	e009      	b.n	8003b8c <vl53l7cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	4798      	blx	r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	461a      	mov	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d8e7      	bhi.n	8003b5c <vl53l7cx_poll_for_measurement+0x2c>

  }

  return ret;
 8003b8c:	697b      	ldr	r3, [r7, #20]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <vl53l7cx_get_result>:

static int32_t vl53l7cx_get_result(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8003b96:	b590      	push	{r4, r7, lr}
 8003b98:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ba2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003ba6:	6018      	str	r0, [r3, #0]
 8003ba8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003bac:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003bb0:	6019      	str	r1, [r3, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  VL53L7CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8003bb2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003bb6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <vl53l7cx_get_result+0x38>
 8003bc0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003bc4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <vl53l7cx_get_result+0x42>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003bce:	f06f 0301 	mvn.w	r3, #1
 8003bd2:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003bd6:	e138      	b.n	8003e4a <vl53l7cx_get_result+0x2b4>
  }
  else if (vl53l7cx_get_resolution(&pObj->Dev, &resolution) != VL53L7CX_STATUS_OK)
 8003bd8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003bdc:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3318      	adds	r3, #24
 8003be4:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fe6a 	bl	80028c4 <vl53l7cx_get_resolution>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <vl53l7cx_get_result+0x6a>
  {
    ret = VL53L7CX_ERROR;
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003bfe:	e124      	b.n	8003e4a <vl53l7cx_get_result+0x2b4>
  }
  else if (vl53l7cx_get_ranging_data(&pObj->Dev, &data) != VL53L7CX_STATUS_OK)
 8003c00:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003c04:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3318      	adds	r3, #24
 8003c0c:	f107 0208 	add.w	r2, r7, #8
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fc80 	bl	8002518 <vl53l7cx_get_ranging_data>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <vl53l7cx_get_result+0x92>
  {
    ret = VL53L7CX_ERROR;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c22:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003c26:	e110      	b.n	8003e4a <vl53l7cx_get_result+0x2b4>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8003c28:	f897 33d8 	ldrb.w	r3, [r7, #984]	; 0x3d8
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003c32:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
 8003c40:	e0f9      	b.n	8003e36 <vl53l7cx_get_result+0x2a0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8003c42:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003c46:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003c4a:	f507 7178 	add.w	r1, r7, #992	; 0x3e0
 8003c4e:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8003c52:	440b      	add	r3, r1
 8003c54:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 8003c58:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003c5c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	4602      	mov	r2, r0
 8003c70:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 33da 	strb.w	r3, [r7, #986]	; 0x3da
 8003c78:	e0ca      	b.n	8003e10 <vl53l7cx_get_result+0x27a>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003c7a:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003c7e:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003c82:	4413      	add	r3, r2
 8003c84:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003c88:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003c8c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c98:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003c9c:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003ca0:	461c      	mov	r4, r3
 8003ca2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ca6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4403      	add	r3, r0
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8003cba:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003cbe:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d120      	bne.n	8003d0e <vl53l7cx_get_result+0x178>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8003ccc:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003cd0:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003cd4:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003ce2:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003cf2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4403      	add	r3, r0
 8003d00:	3302      	adds	r3, #2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	3308      	adds	r3, #8
 8003d08:	edc3 7a00 	vstr	s15, [r3]
 8003d0c:	e013      	b.n	8003d36 <vl53l7cx_get_result+0x1a0>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8003d0e:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003d12:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003d16:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d1a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	4403      	add	r3, r0
 8003d28:	3302      	adds	r3, #2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3308      	adds	r3, #8
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8003d36:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d3a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d124      	bne.n	8003d92 <vl53l7cx_get_result+0x1fc>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003d48:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003d4c:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003d50:	4413      	add	r3, r2
 8003d52:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003d56:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003d5a:	3350      	adds	r3, #80	; 0x50
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8003d62:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003d66:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8003d72:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d76:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	4403      	add	r3, r0
 8003d84:	3304      	adds	r3, #4
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	edc3 7a00 	vstr	s15, [r3]
 8003d90:	e013      	b.n	8003dba <vl53l7cx_get_result+0x224>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8003d92:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003d96:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003d9a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d9e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	4403      	add	r3, r0
 8003dac:	3304      	adds	r3, #4
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3304      	adds	r3, #4
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003dba:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003dbe:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003dc8:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003dcc:	4413      	add	r3, r2
 8003dce:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8003dd2:	f887 33d9 	strb.w	r3, [r7, #985]	; 0x3d9
        pResult->ZoneResult[i].Status[j] = vl53l7cx_map_target_status(target_status);
 8003dd6:	f897 33d9 	ldrb.w	r3, [r7, #985]	; 0x3d9
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f83c 	bl	8003e58 <vl53l7cx_map_target_status>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003de6:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003dea:	461c      	mov	r4, r3
 8003dec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003df0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4403      	add	r3, r0
 8003dfe:	3302      	adds	r3, #2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003e06:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f887 33da 	strb.w	r3, [r7, #986]	; 0x3da
 8003e10:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003e14:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003e18:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003e22:	f897 23da 	ldrb.w	r2, [r7, #986]	; 0x3da
 8003e26:	429a      	cmp	r2, r3
 8003e28:	f4ff af27 	bcc.w	8003c7a <vl53l7cx_get_result+0xe4>
    for (i = 0; i < resolution; i++)
 8003e2c:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003e30:	3301      	adds	r3, #1
 8003e32:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
 8003e36:	f897 33d8 	ldrb.w	r3, [r7, #984]	; 0x3d8
 8003e3a:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	f4ff aeff 	bcc.w	8003c42 <vl53l7cx_get_result+0xac>
      }
    }

    ret = VL53L7CX_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
  }

  return ret;
 8003e4a:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f507 7779 	add.w	r7, r7, #996	; 0x3e4
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}

08003e58 <vl53l7cx_map_target_status>:

static uint8_t vl53l7cx_map_target_status(uint8_t status)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d002      	beq.n	8003e6e <vl53l7cx_map_target_status+0x16>
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	d102      	bne.n	8003e74 <vl53l7cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
 8003e72:	e007      	b.n	8003e84 <vl53l7cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <vl53l7cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 8003e7a:	23ff      	movs	r3, #255	; 0xff
 8003e7c:	73fb      	strb	r3, [r7, #15]
 8003e7e:	e001      	b.n	8003e84 <vl53l7cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d903      	bls.n	8003eb0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ea8:	f06f 0301 	mvn.w	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	e025      	b.n	8003efc <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	79fa      	ldrb	r2, [r7, #7]
 8003eb4:	4914      	ldr	r1, [pc, #80]	; (8003f08 <BSP_COM_Init+0x74>)
 8003eb6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003eba:	4814      	ldr	r0, [pc, #80]	; (8003f0c <BSP_COM_Init+0x78>)
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4403      	add	r3, r0
 8003ec6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8003ec8:	79fa      	ldrb	r2, [r7, #7]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4a0e      	ldr	r2, [pc, #56]	; (8003f0c <BSP_COM_Init+0x78>)
 8003ed4:	4413      	add	r3, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f864 	bl	8003fa4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8003edc:	79fa      	ldrb	r2, [r7, #7]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <BSP_COM_Init+0x78>)
 8003ee8:	4413      	add	r3, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f810 	bl	8003f10 <MX_USART2_UART_Init>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003ef6:	f06f 0303 	mvn.w	r3, #3
 8003efa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003efc:	68fb      	ldr	r3, [r7, #12]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	2000003c 	.word	0x2000003c
 8003f0c:	20000444 	.word	0x20000444

08003f10 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <MX_USART2_UART_Init+0x58>)
 8003f20:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 460800;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003f28:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	220c      	movs	r2, #12
 8003f40:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f002 fc8b 	bl	800686a <HAL_UART_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40004400 	.word	0x40004400

08003f6c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <__io_putchar+0x30>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <__io_putchar+0x34>)
 8003f84:	1898      	adds	r0, r3, r2
 8003f86:	1d39      	adds	r1, r7, #4
 8003f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f002 fcc3 	bl	8006918 <HAL_UART_Transmit>
  return ch;
 8003f92:	687b      	ldr	r3, [r7, #4]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000488 	.word	0x20000488
 8003fa0:	20000444 	.word	0x20000444

08003fa4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	4b1e      	ldr	r3, [pc, #120]	; (800402c <USART2_MspInit+0x88>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	4a1d      	ldr	r2, [pc, #116]	; (800402c <USART2_MspInit+0x88>)
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	6413      	str	r3, [r2, #64]	; 0x40
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <USART2_MspInit+0x88>)
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <USART2_MspInit+0x88>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <USART2_MspInit+0x88>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd8:	4b14      	ldr	r3, [pc, #80]	; (800402c <USART2_MspInit+0x88>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8003ff4:	2307      	movs	r3, #7
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	480c      	ldr	r0, [pc, #48]	; (8004030 <USART2_MspInit+0x8c>)
 8004000:	f000 f9c0 	bl	8004384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8004004:	2308      	movs	r3, #8
 8004006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004010:	2300      	movs	r3, #0
 8004012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8004014:	2307      	movs	r3, #7
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8004018:	f107 0314 	add.w	r3, r7, #20
 800401c:	4619      	mov	r1, r3
 800401e:	4804      	ldr	r0, [pc, #16]	; (8004030 <USART2_MspInit+0x8c>)
 8004020:	f000 f9b0 	bl	8004384 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004024:	bf00      	nop
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	40020000 	.word	0x40020000

08004034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_Init+0x40>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <HAL_Init+0x40>)
 800403e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_Init+0x40>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_Init+0x40>)
 800404a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a07      	ldr	r2, [pc, #28]	; (8004074 <HAL_Init+0x40>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800405c:	2003      	movs	r0, #3
 800405e:	f000 f94f 	bl	8004300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004062:	2000      	movs	r0, #0
 8004064:	f000 f808 	bl	8004078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004068:	f7fc fc1e 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00

08004078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <HAL_InitTick+0x54>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_InitTick+0x58>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4619      	mov	r1, r3
 800408a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800408e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f967 	bl	800436a <HAL_SYSTICK_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00e      	b.n	80040c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d80a      	bhi.n	80040c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040ac:	2200      	movs	r2, #0
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	f000 f92f 	bl	8004316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b8:	4a06      	ldr	r2, [pc, #24]	; (80040d4 <HAL_InitTick+0x5c>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000000 	.word	0x20000000
 80040d0:	20000044 	.word	0x20000044
 80040d4:	20000040 	.word	0x20000040

080040d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_IncTick+0x20>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_IncTick+0x24>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_IncTick+0x24>)
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000044 	.word	0x20000044
 80040fc:	2000048c 	.word	0x2000048c

08004100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return uwTick;
 8004104:	4b03      	ldr	r3, [pc, #12]	; (8004114 <HAL_GetTick+0x14>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	2000048c 	.word	0x2000048c

08004118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004120:	f7ff ffee 	bl	8004100 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d005      	beq.n	800413e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <HAL_Delay+0x44>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800413e:	bf00      	nop
 8004140:	f7ff ffde 	bl	8004100 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	429a      	cmp	r2, r3
 800414e:	d8f7      	bhi.n	8004140 <HAL_Delay+0x28>
  {
  }
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000044 	.word	0x20000044

08004160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800417c:	4013      	ands	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800418c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004192:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	60d3      	str	r3, [r2, #12]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <__NVIC_GetPriorityGrouping+0x18>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	f003 0307 	and.w	r3, r3, #7
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	db0b      	blt.n	80041ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	4907      	ldr	r1, [pc, #28]	; (80041fc <__NVIC_EnableIRQ+0x38>)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2001      	movs	r0, #1
 80041e6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000e100 	.word	0xe000e100

08004200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	6039      	str	r1, [r7, #0]
 800420a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004210:	2b00      	cmp	r3, #0
 8004212:	db0a      	blt.n	800422a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	490c      	ldr	r1, [pc, #48]	; (800424c <__NVIC_SetPriority+0x4c>)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	0112      	lsls	r2, r2, #4
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	440b      	add	r3, r1
 8004224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004228:	e00a      	b.n	8004240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4908      	ldr	r1, [pc, #32]	; (8004250 <__NVIC_SetPriority+0x50>)
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	3b04      	subs	r3, #4
 8004238:	0112      	lsls	r2, r2, #4
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	440b      	add	r3, r1
 800423e:	761a      	strb	r2, [r3, #24]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000e100 	.word	0xe000e100
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f1c3 0307 	rsb	r3, r3, #7
 800426e:	2b04      	cmp	r3, #4
 8004270:	bf28      	it	cs
 8004272:	2304      	movcs	r3, #4
 8004274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3304      	adds	r3, #4
 800427a:	2b06      	cmp	r3, #6
 800427c:	d902      	bls.n	8004284 <NVIC_EncodePriority+0x30>
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3b03      	subs	r3, #3
 8004282:	e000      	b.n	8004286 <NVIC_EncodePriority+0x32>
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43da      	mvns	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	401a      	ands	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800429c:	f04f 31ff 	mov.w	r1, #4294967295
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	43d9      	mvns	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ac:	4313      	orrs	r3, r2
         );
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3724      	adds	r7, #36	; 0x24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042cc:	d301      	bcc.n	80042d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ce:	2301      	movs	r3, #1
 80042d0:	e00f      	b.n	80042f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <SysTick_Config+0x40>)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042da:	210f      	movs	r1, #15
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	f7ff ff8e 	bl	8004200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <SysTick_Config+0x40>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ea:	4b04      	ldr	r3, [pc, #16]	; (80042fc <SysTick_Config+0x40>)
 80042ec:	2207      	movs	r2, #7
 80042ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	e000e010 	.word	0xe000e010

08004300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff29 	bl	8004160 <__NVIC_SetPriorityGrouping>
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	4603      	mov	r3, r0
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004328:	f7ff ff3e 	bl	80041a8 <__NVIC_GetPriorityGrouping>
 800432c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f7ff ff8e 	bl	8004254 <NVIC_EncodePriority>
 8004338:	4602      	mov	r2, r0
 800433a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff5d 	bl	8004200 <__NVIC_SetPriority>
}
 8004346:	bf00      	nop
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff31 	bl	80041c4 <__NVIC_EnableIRQ>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ffa2 	bl	80042bc <SysTick_Config>
 8004378:	4603      	mov	r3, r0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004384:	b480      	push	{r7}
 8004386:	b089      	sub	sp, #36	; 0x24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e159      	b.n	8004654 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4013      	ands	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	f040 8148 	bne.w	800464e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d005      	beq.n	80043d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d130      	bne.n	8004438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	2203      	movs	r2, #3
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800440c:	2201      	movs	r2, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 0201 	and.w	r2, r3, #1
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b03      	cmp	r3, #3
 8004442:	d017      	beq.n	8004474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d123      	bne.n	80044c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	08da      	lsrs	r2, r3, #3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3208      	adds	r2, #8
 8004488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	220f      	movs	r2, #15
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	08da      	lsrs	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3208      	adds	r2, #8
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2203      	movs	r2, #3
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0203 	and.w	r2, r3, #3
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80a2 	beq.w	800464e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <HAL_GPIO_Init+0x2e8>)
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	4a56      	ldr	r2, [pc, #344]	; (800466c <HAL_GPIO_Init+0x2e8>)
 8004514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004518:	6453      	str	r3, [r2, #68]	; 0x44
 800451a:	4b54      	ldr	r3, [pc, #336]	; (800466c <HAL_GPIO_Init+0x2e8>)
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004526:	4a52      	ldr	r2, [pc, #328]	; (8004670 <HAL_GPIO_Init+0x2ec>)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	089b      	lsrs	r3, r3, #2
 800452c:	3302      	adds	r3, #2
 800452e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	220f      	movs	r2, #15
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a49      	ldr	r2, [pc, #292]	; (8004674 <HAL_GPIO_Init+0x2f0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d019      	beq.n	8004586 <HAL_GPIO_Init+0x202>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a48      	ldr	r2, [pc, #288]	; (8004678 <HAL_GPIO_Init+0x2f4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_GPIO_Init+0x1fe>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a47      	ldr	r2, [pc, #284]	; (800467c <HAL_GPIO_Init+0x2f8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00d      	beq.n	800457e <HAL_GPIO_Init+0x1fa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a46      	ldr	r2, [pc, #280]	; (8004680 <HAL_GPIO_Init+0x2fc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <HAL_GPIO_Init+0x1f6>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a45      	ldr	r2, [pc, #276]	; (8004684 <HAL_GPIO_Init+0x300>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <HAL_GPIO_Init+0x1f2>
 8004572:	2304      	movs	r3, #4
 8004574:	e008      	b.n	8004588 <HAL_GPIO_Init+0x204>
 8004576:	2307      	movs	r3, #7
 8004578:	e006      	b.n	8004588 <HAL_GPIO_Init+0x204>
 800457a:	2303      	movs	r3, #3
 800457c:	e004      	b.n	8004588 <HAL_GPIO_Init+0x204>
 800457e:	2302      	movs	r3, #2
 8004580:	e002      	b.n	8004588 <HAL_GPIO_Init+0x204>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_GPIO_Init+0x204>
 8004586:	2300      	movs	r3, #0
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	f002 0203 	and.w	r2, r2, #3
 800458e:	0092      	lsls	r2, r2, #2
 8004590:	4093      	lsls	r3, r2
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004598:	4935      	ldr	r1, [pc, #212]	; (8004670 <HAL_GPIO_Init+0x2ec>)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	3302      	adds	r3, #2
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045a6:	4b38      	ldr	r3, [pc, #224]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ca:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d0:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f4:	4a24      	ldr	r2, [pc, #144]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045fa:	4b23      	ldr	r3, [pc, #140]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_GPIO_Init+0x304>)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004624:	4b18      	ldr	r3, [pc, #96]	; (8004688 <HAL_GPIO_Init+0x304>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004648:	4a0f      	ldr	r2, [pc, #60]	; (8004688 <HAL_GPIO_Init+0x304>)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	f67f aea2 	bls.w	80043a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	3724      	adds	r7, #36	; 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	40013800 	.word	0x40013800
 8004674:	40020000 	.word	0x40020000
 8004678:	40020400 	.word	0x40020400
 800467c:	40020800 	.word	0x40020800
 8004680:	40020c00 	.word	0x40020c00
 8004684:	40021000 	.word	0x40021000
 8004688:	40013c00 	.word	0x40013c00

0800468c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e0bb      	b.n	8004820 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046a8:	2201      	movs	r2, #1
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4013      	ands	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	429a      	cmp	r2, r3
 80046c0:	f040 80ab 	bne.w	800481a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80046c4:	4a5c      	ldr	r2, [pc, #368]	; (8004838 <HAL_GPIO_DeInit+0x1ac>)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	3302      	adds	r3, #2
 80046cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	220f      	movs	r2, #15
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a54      	ldr	r2, [pc, #336]	; (800483c <HAL_GPIO_DeInit+0x1b0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d019      	beq.n	8004722 <HAL_GPIO_DeInit+0x96>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a53      	ldr	r2, [pc, #332]	; (8004840 <HAL_GPIO_DeInit+0x1b4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_GPIO_DeInit+0x92>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a52      	ldr	r2, [pc, #328]	; (8004844 <HAL_GPIO_DeInit+0x1b8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00d      	beq.n	800471a <HAL_GPIO_DeInit+0x8e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a51      	ldr	r2, [pc, #324]	; (8004848 <HAL_GPIO_DeInit+0x1bc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <HAL_GPIO_DeInit+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a50      	ldr	r2, [pc, #320]	; (800484c <HAL_GPIO_DeInit+0x1c0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_GPIO_DeInit+0x86>
 800470e:	2304      	movs	r3, #4
 8004710:	e008      	b.n	8004724 <HAL_GPIO_DeInit+0x98>
 8004712:	2307      	movs	r3, #7
 8004714:	e006      	b.n	8004724 <HAL_GPIO_DeInit+0x98>
 8004716:	2303      	movs	r3, #3
 8004718:	e004      	b.n	8004724 <HAL_GPIO_DeInit+0x98>
 800471a:	2302      	movs	r3, #2
 800471c:	e002      	b.n	8004724 <HAL_GPIO_DeInit+0x98>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_GPIO_DeInit+0x98>
 8004722:	2300      	movs	r3, #0
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	f002 0203 	and.w	r2, r2, #3
 800472a:	0092      	lsls	r2, r2, #2
 800472c:	4093      	lsls	r3, r2
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	d132      	bne.n	800479a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004734:	4b46      	ldr	r3, [pc, #280]	; (8004850 <HAL_GPIO_DeInit+0x1c4>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	4944      	ldr	r1, [pc, #272]	; (8004850 <HAL_GPIO_DeInit+0x1c4>)
 800473e:	4013      	ands	r3, r2
 8004740:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004742:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_GPIO_DeInit+0x1c4>)
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	43db      	mvns	r3, r3
 800474a:	4941      	ldr	r1, [pc, #260]	; (8004850 <HAL_GPIO_DeInit+0x1c4>)
 800474c:	4013      	ands	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004750:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <HAL_GPIO_DeInit+0x1c4>)
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	43db      	mvns	r3, r3
 8004758:	493d      	ldr	r1, [pc, #244]	; (8004850 <HAL_GPIO_DeInit+0x1c4>)
 800475a:	4013      	ands	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800475e:	4b3c      	ldr	r3, [pc, #240]	; (8004850 <HAL_GPIO_DeInit+0x1c4>)
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43db      	mvns	r3, r3
 8004766:	493a      	ldr	r1, [pc, #232]	; (8004850 <HAL_GPIO_DeInit+0x1c4>)
 8004768:	4013      	ands	r3, r2
 800476a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	220f      	movs	r2, #15
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800477c:	4a2e      	ldr	r2, [pc, #184]	; (8004838 <HAL_GPIO_DeInit+0x1ac>)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	089b      	lsrs	r3, r3, #2
 8004782:	3302      	adds	r3, #2
 8004784:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	43da      	mvns	r2, r3
 800478c:	482a      	ldr	r0, [pc, #168]	; (8004838 <HAL_GPIO_DeInit+0x1ac>)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	400a      	ands	r2, r1
 8004794:	3302      	adds	r3, #2
 8004796:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	2103      	movs	r1, #3
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	401a      	ands	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	08da      	lsrs	r2, r3, #3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3208      	adds	r2, #8
 80047b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	220f      	movs	r2, #15
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	08d2      	lsrs	r2, r2, #3
 80047d0:	4019      	ands	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3208      	adds	r2, #8
 80047d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2103      	movs	r1, #3
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	401a      	ands	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	2101      	movs	r1, #1
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	401a      	ands	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2103      	movs	r1, #3
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	401a      	ands	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3301      	adds	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b0f      	cmp	r3, #15
 8004824:	f67f af40 	bls.w	80046a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40013800 	.word	0x40013800
 800483c:	40020000 	.word	0x40020000
 8004840:	40020400 	.word	0x40020400
 8004844:	40020800 	.word	0x40020800
 8004848:	40020c00 	.word	0x40020c00
 800484c:	40021000 	.word	0x40021000
 8004850:	40013c00 	.word	0x40013c00

08004854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
 8004860:	4613      	mov	r3, r2
 8004862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004864:	787b      	ldrb	r3, [r7, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800486a:	887a      	ldrh	r2, [r7, #2]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004870:	e003      	b.n	800487a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	619a      	str	r2, [r3, #24]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d006      	beq.n	80048ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f002 fe48 	bl	800753c <HAL_GPIO_EXTI_Callback>
  }
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40013c00 	.word	0x40013c00

080048b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e12b      	b.n	8004b22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f95d 	bl	8004b9e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2224      	movs	r2, #36	; 0x24
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800490a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800491a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800491c:	f001 fc5a 	bl	80061d4 <HAL_RCC_GetPCLK1Freq>
 8004920:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4a81      	ldr	r2, [pc, #516]	; (8004b2c <HAL_I2C_Init+0x274>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d807      	bhi.n	800493c <HAL_I2C_Init+0x84>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a80      	ldr	r2, [pc, #512]	; (8004b30 <HAL_I2C_Init+0x278>)
 8004930:	4293      	cmp	r3, r2
 8004932:	bf94      	ite	ls
 8004934:	2301      	movls	r3, #1
 8004936:	2300      	movhi	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e006      	b.n	800494a <HAL_I2C_Init+0x92>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a7d      	ldr	r2, [pc, #500]	; (8004b34 <HAL_I2C_Init+0x27c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	bf94      	ite	ls
 8004944:	2301      	movls	r3, #1
 8004946:	2300      	movhi	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0e7      	b.n	8004b22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a78      	ldr	r2, [pc, #480]	; (8004b38 <HAL_I2C_Init+0x280>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0c9b      	lsrs	r3, r3, #18
 800495c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a6a      	ldr	r2, [pc, #424]	; (8004b2c <HAL_I2C_Init+0x274>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d802      	bhi.n	800498c <HAL_I2C_Init+0xd4>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	3301      	adds	r3, #1
 800498a:	e009      	b.n	80049a0 <HAL_I2C_Init+0xe8>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	4a69      	ldr	r2, [pc, #420]	; (8004b3c <HAL_I2C_Init+0x284>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	3301      	adds	r3, #1
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	495c      	ldr	r1, [pc, #368]	; (8004b2c <HAL_I2C_Init+0x274>)
 80049bc:	428b      	cmp	r3, r1
 80049be:	d819      	bhi.n	80049f4 <HAL_I2C_Init+0x13c>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1e59      	subs	r1, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ce:	1c59      	adds	r1, r3, #1
 80049d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049d4:	400b      	ands	r3, r1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_I2C_Init+0x138>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1e59      	subs	r1, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e8:	3301      	adds	r3, #1
 80049ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ee:	e051      	b.n	8004a94 <HAL_I2C_Init+0x1dc>
 80049f0:	2304      	movs	r3, #4
 80049f2:	e04f      	b.n	8004a94 <HAL_I2C_Init+0x1dc>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d111      	bne.n	8004a20 <HAL_I2C_Init+0x168>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1e58      	subs	r0, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	440b      	add	r3, r1
 8004a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e012      	b.n	8004a46 <HAL_I2C_Init+0x18e>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1e58      	subs	r0, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6859      	ldr	r1, [r3, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	0099      	lsls	r1, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a36:	3301      	adds	r3, #1
 8004a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Init+0x196>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e022      	b.n	8004a94 <HAL_I2C_Init+0x1dc>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10e      	bne.n	8004a74 <HAL_I2C_Init+0x1bc>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1e58      	subs	r0, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	440b      	add	r3, r1
 8004a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a72:	e00f      	b.n	8004a94 <HAL_I2C_Init+0x1dc>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1e58      	subs	r0, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6859      	ldr	r1, [r3, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	0099      	lsls	r1, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	6809      	ldr	r1, [r1, #0]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ac2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6911      	ldr	r1, [r2, #16]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68d2      	ldr	r2, [r2, #12]
 8004ace:	4311      	orrs	r1, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	000186a0 	.word	0x000186a0
 8004b30:	001e847f 	.word	0x001e847f
 8004b34:	003d08ff 	.word	0x003d08ff
 8004b38:	431bde83 	.word	0x431bde83
 8004b3c:	10624dd3 	.word	0x10624dd3

08004b40 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e021      	b.n	8004b96 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2224      	movs	r2, #36	; 0x24
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f821 	bl	8004bb2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	813b      	strh	r3, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be2:	f7ff fa8d 	bl	8004100 <HAL_GetTick>
 8004be6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	f040 80d9 	bne.w	8004da8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2319      	movs	r3, #25
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	496d      	ldr	r1, [pc, #436]	; (8004db4 <HAL_I2C_Mem_Write+0x1ec>)
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fc99 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0cc      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_I2C_Mem_Write+0x56>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0c5      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d007      	beq.n	8004c44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2221      	movs	r2, #33	; 0x21
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2240      	movs	r2, #64	; 0x40
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <HAL_I2C_Mem_Write+0x1f0>)
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c86:	88f8      	ldrh	r0, [r7, #6]
 8004c88:	893a      	ldrh	r2, [r7, #8]
 8004c8a:	8979      	ldrh	r1, [r7, #10]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4603      	mov	r3, r0
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fad0 	bl	800523c <I2C_RequestMemoryWrite>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d052      	beq.n	8004d48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e081      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fd1a 	bl	80056e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d107      	bne.n	8004cce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06b      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d11b      	bne.n	8004d48 <HAL_I2C_Mem_Write+0x180>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d017      	beq.n	8004d48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1aa      	bne.n	8004ca6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fd06 	bl	8005766 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d107      	bne.n	8004d78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e016      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	00100002 	.word	0x00100002
 8004db8:	ffff0000 	.word	0xffff0000

08004dbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dd6:	f7ff f993 	bl	8004100 <HAL_GetTick>
 8004dda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	f040 8208 	bne.w	80051fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2319      	movs	r3, #25
 8004df0:	2201      	movs	r2, #1
 8004df2:	497b      	ldr	r1, [pc, #492]	; (8004fe0 <HAL_I2C_Mem_Read+0x224>)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fb9f 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
 8004e02:	e1fb      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_Mem_Read+0x56>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e1f4      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d007      	beq.n	8004e38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2222      	movs	r2, #34	; 0x22
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a5b      	ldr	r2, [pc, #364]	; (8004fe4 <HAL_I2C_Mem_Read+0x228>)
 8004e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e7a:	88f8      	ldrh	r0, [r7, #6]
 8004e7c:	893a      	ldrh	r2, [r7, #8]
 8004e7e:	8979      	ldrh	r1, [r7, #10]
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa6c 	bl	8005368 <I2C_RequestMemoryRead>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e1b0      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d113      	bne.n	8004eca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e184      	b.n	80051d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d11b      	bne.n	8004f0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e164      	b.n	80051d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d11b      	bne.n	8004f4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	e144      	b.n	80051d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f60:	e138      	b.n	80051d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	f200 80f1 	bhi.w	800514e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d123      	bne.n	8004fbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fc35 	bl	80057e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e139      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fba:	e10b      	b.n	80051d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d14e      	bne.n	8005062 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4906      	ldr	r1, [pc, #24]	; (8004fe8 <HAL_I2C_Mem_Read+0x22c>)
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fab2 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e10e      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
 8004fde:	bf00      	nop
 8004fe0:	00100002 	.word	0x00100002
 8004fe4:	ffff0000 	.word	0xffff0000
 8004fe8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005060:	e0b8      	b.n	80051d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	2200      	movs	r2, #0
 800506a:	4966      	ldr	r1, [pc, #408]	; (8005204 <HAL_I2C_Mem_Read+0x448>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fa63 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0bf      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	2200      	movs	r2, #0
 80050c6:	494f      	ldr	r1, [pc, #316]	; (8005204 <HAL_I2C_Mem_Read+0x448>)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fa35 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e091      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514c:	e042      	b.n	80051d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fb48 	bl	80057e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e04c      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d118      	bne.n	80051d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f47f aec2 	bne.w	8004f62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3728      	adds	r7, #40	; 0x28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	00010004 	.word	0x00010004

08005208 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	4608      	mov	r0, r1
 8005246:	4611      	mov	r1, r2
 8005248:	461a      	mov	r2, r3
 800524a:	4603      	mov	r3, r0
 800524c:	817b      	strh	r3, [r7, #10]
 800524e:	460b      	mov	r3, r1
 8005250:	813b      	strh	r3, [r7, #8]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005264:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	2200      	movs	r2, #0
 800526e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f960 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528c:	d103      	bne.n	8005296 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005294:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e05f      	b.n	800535a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800529a:	897b      	ldrh	r3, [r7, #10]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	492d      	ldr	r1, [pc, #180]	; (8005364 <I2C_RequestMemoryWrite+0x128>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f998 	bl	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e04c      	b.n	800535a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d8:	6a39      	ldr	r1, [r7, #32]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fa02 	bl	80056e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d107      	bne.n	80052fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e02b      	b.n	800535a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d105      	bne.n	8005314 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005308:	893b      	ldrh	r3, [r7, #8]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]
 8005312:	e021      	b.n	8005358 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005314:	893b      	ldrh	r3, [r7, #8]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	b29b      	uxth	r3, r3
 800531a:	b2da      	uxtb	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	6a39      	ldr	r1, [r7, #32]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f9dc 	bl	80056e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b04      	cmp	r3, #4
 8005338:	d107      	bne.n	800534a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005348:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e005      	b.n	800535a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800534e:	893b      	ldrh	r3, [r7, #8]
 8005350:	b2da      	uxtb	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	00010002 	.word	0x00010002

08005368 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	4608      	mov	r0, r1
 8005372:	4611      	mov	r1, r2
 8005374:	461a      	mov	r2, r3
 8005376:	4603      	mov	r3, r0
 8005378:	817b      	strh	r3, [r7, #10]
 800537a:	460b      	mov	r3, r1
 800537c:	813b      	strh	r3, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005390:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f8c2 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c8:	d103      	bne.n	80053d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e0aa      	b.n	800552c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053d6:	897b      	ldrh	r3, [r7, #10]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	4952      	ldr	r1, [pc, #328]	; (8005534 <I2C_RequestMemoryRead+0x1cc>)
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f8fa 	bl	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e097      	b.n	800552c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005414:	6a39      	ldr	r1, [r7, #32]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f964 	bl	80056e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	2b04      	cmp	r3, #4
 8005428:	d107      	bne.n	800543a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005438:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e076      	b.n	800552c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d105      	bne.n	8005450 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005444:	893b      	ldrh	r3, [r7, #8]
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	611a      	str	r2, [r3, #16]
 800544e:	e021      	b.n	8005494 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005450:	893b      	ldrh	r3, [r7, #8]
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	b29b      	uxth	r3, r3
 8005456:	b2da      	uxtb	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800545e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005460:	6a39      	ldr	r1, [r7, #32]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 f93e 	bl	80056e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00d      	beq.n	800548a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	2b04      	cmp	r3, #4
 8005474:	d107      	bne.n	8005486 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e050      	b.n	800552c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800548a:	893b      	ldrh	r3, [r7, #8]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005496:	6a39      	ldr	r1, [r7, #32]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f923 	bl	80056e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00d      	beq.n	80054c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d107      	bne.n	80054bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e035      	b.n	800552c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f82b 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00d      	beq.n	8005504 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f6:	d103      	bne.n	8005500 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e013      	b.n	800552c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005504:	897b      	ldrh	r3, [r7, #10]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	b2da      	uxtb	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	6a3a      	ldr	r2, [r7, #32]
 8005518:	4906      	ldr	r1, [pc, #24]	; (8005534 <I2C_RequestMemoryRead+0x1cc>)
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f863 	bl	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	00010002 	.word	0x00010002

08005538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005548:	e025      	b.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d021      	beq.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7fe fdd5 	bl	8004100 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d116      	bne.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e023      	b.n	80055de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	0c1b      	lsrs	r3, r3, #16
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d10d      	bne.n	80055bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	43da      	mvns	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bf0c      	ite	eq
 80055b2:	2301      	moveq	r3, #1
 80055b4:	2300      	movne	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	e00c      	b.n	80055d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	43da      	mvns	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf0c      	ite	eq
 80055ce:	2301      	moveq	r3, #1
 80055d0:	2300      	movne	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d0b6      	beq.n	800554a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f4:	e051      	b.n	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005604:	d123      	bne.n	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005614:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800561e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f043 0204 	orr.w	r2, r3, #4
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e046      	b.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d021      	beq.n	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fe fd53 	bl	8004100 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d116      	bne.n	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e020      	b.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10c      	bne.n	80056be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	43da      	mvns	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf14      	ite	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	2300      	moveq	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	e00b      	b.n	80056d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	43da      	mvns	r2, r3
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4013      	ands	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d18d      	bne.n	80055f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056f0:	e02d      	b.n	800574e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f8ce 	bl	8005894 <I2C_IsAcknowledgeFailed>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e02d      	b.n	800575e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d021      	beq.n	800574e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fe fcf9 	bl	8004100 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d116      	bne.n	800574e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e007      	b.n	800575e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	2b80      	cmp	r3, #128	; 0x80
 800575a:	d1ca      	bne.n	80056f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005772:	e02d      	b.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f88d 	bl	8005894 <I2C_IsAcknowledgeFailed>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e02d      	b.n	80057e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	d021      	beq.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578c:	f7fe fcb8 	bl	8004100 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	429a      	cmp	r2, r3
 800579a:	d302      	bcc.n	80057a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d116      	bne.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e007      	b.n	80057e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d1ca      	bne.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f4:	e042      	b.n	800587c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b10      	cmp	r3, #16
 8005802:	d119      	bne.n	8005838 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0210 	mvn.w	r2, #16
 800580c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e029      	b.n	800588c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005838:	f7fe fc62 	bl	8004100 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	429a      	cmp	r2, r3
 8005846:	d302      	bcc.n	800584e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d116      	bne.n	800587c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e007      	b.n	800588c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d1b5      	bne.n	80057f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d11b      	bne.n	80058e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	f043 0204 	orr.w	r2, r3, #4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e267      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d075      	beq.n	80059fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005912:	4b88      	ldr	r3, [pc, #544]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	2b04      	cmp	r3, #4
 800591c:	d00c      	beq.n	8005938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800591e:	4b85      	ldr	r3, [pc, #532]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005926:	2b08      	cmp	r3, #8
 8005928:	d112      	bne.n	8005950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800592a:	4b82      	ldr	r3, [pc, #520]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005936:	d10b      	bne.n	8005950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005938:	4b7e      	ldr	r3, [pc, #504]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d05b      	beq.n	80059fc <HAL_RCC_OscConfig+0x108>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d157      	bne.n	80059fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e242      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d106      	bne.n	8005968 <HAL_RCC_OscConfig+0x74>
 800595a:	4b76      	ldr	r3, [pc, #472]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a75      	ldr	r2, [pc, #468]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e01d      	b.n	80059a4 <HAL_RCC_OscConfig+0xb0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x98>
 8005972:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a6f      	ldr	r2, [pc, #444]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a6c      	ldr	r2, [pc, #432]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e00b      	b.n	80059a4 <HAL_RCC_OscConfig+0xb0>
 800598c:	4b69      	ldr	r3, [pc, #420]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a68      	ldr	r2, [pc, #416]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	4b66      	ldr	r3, [pc, #408]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a65      	ldr	r2, [pc, #404]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 800599e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d013      	beq.n	80059d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ac:	f7fe fba8 	bl	8004100 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fe fba4 	bl	8004100 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	; 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e207      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c6:	4b5b      	ldr	r3, [pc, #364]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0xc0>
 80059d2:	e014      	b.n	80059fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7fe fb94 	bl	8004100 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fe fb90 	bl	8004100 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	; 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e1f3      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ee:	4b51      	ldr	r3, [pc, #324]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0xe8>
 80059fa:	e000      	b.n	80059fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d063      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a0a:	4b4a      	ldr	r3, [pc, #296]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a16:	4b47      	ldr	r3, [pc, #284]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d11c      	bne.n	8005a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a22:	4b44      	ldr	r3, [pc, #272]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d116      	bne.n	8005a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a2e:	4b41      	ldr	r3, [pc, #260]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_RCC_OscConfig+0x152>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e1c7      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a46:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4937      	ldr	r1, [pc, #220]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5a:	e03a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a64:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <HAL_RCC_OscConfig+0x244>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fe fb49 	bl	8004100 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a72:	f7fe fb45 	bl	8004100 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e1a8      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a84:	4b2b      	ldr	r3, [pc, #172]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a90:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4925      	ldr	r1, [pc, #148]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	600b      	str	r3, [r1, #0]
 8005aa4:	e015      	b.n	8005ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <HAL_RCC_OscConfig+0x244>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fe fb28 	bl	8004100 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ab4:	f7fe fb24 	bl	8004100 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e187      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d036      	beq.n	8005b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d016      	beq.n	8005b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <HAL_RCC_OscConfig+0x248>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aec:	f7fe fb08 	bl	8004100 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005af4:	f7fe fb04 	bl	8004100 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e167      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCC_OscConfig+0x240>)
 8005b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x200>
 8005b12:	e01b      	b.n	8005b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <HAL_RCC_OscConfig+0x248>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b1a:	f7fe faf1 	bl	8004100 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b20:	e00e      	b.n	8005b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b22:	f7fe faed 	bl	8004100 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d907      	bls.n	8005b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e150      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
 8005b34:	40023800 	.word	0x40023800
 8005b38:	42470000 	.word	0x42470000
 8005b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b40:	4b88      	ldr	r3, [pc, #544]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1ea      	bne.n	8005b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8097 	beq.w	8005c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5e:	4b81      	ldr	r3, [pc, #516]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10f      	bne.n	8005b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	4b7d      	ldr	r3, [pc, #500]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	4a7c      	ldr	r2, [pc, #496]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b78:	6413      	str	r3, [r2, #64]	; 0x40
 8005b7a:	4b7a      	ldr	r3, [pc, #488]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b86:	2301      	movs	r3, #1
 8005b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8a:	4b77      	ldr	r3, [pc, #476]	; (8005d68 <HAL_RCC_OscConfig+0x474>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d118      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b96:	4b74      	ldr	r3, [pc, #464]	; (8005d68 <HAL_RCC_OscConfig+0x474>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a73      	ldr	r2, [pc, #460]	; (8005d68 <HAL_RCC_OscConfig+0x474>)
 8005b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ba2:	f7fe faad 	bl	8004100 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005baa:	f7fe faa9 	bl	8004100 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e10c      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbc:	4b6a      	ldr	r3, [pc, #424]	; (8005d68 <HAL_RCC_OscConfig+0x474>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d106      	bne.n	8005bde <HAL_RCC_OscConfig+0x2ea>
 8005bd0:	4b64      	ldr	r3, [pc, #400]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd4:	4a63      	ldr	r2, [pc, #396]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	6713      	str	r3, [r2, #112]	; 0x70
 8005bdc:	e01c      	b.n	8005c18 <HAL_RCC_OscConfig+0x324>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCC_OscConfig+0x30c>
 8005be6:	4b5f      	ldr	r3, [pc, #380]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	4a5e      	ldr	r2, [pc, #376]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005bec:	f043 0304 	orr.w	r3, r3, #4
 8005bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf2:	4b5c      	ldr	r3, [pc, #368]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	4a5b      	ldr	r2, [pc, #364]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfe:	e00b      	b.n	8005c18 <HAL_RCC_OscConfig+0x324>
 8005c00:	4b58      	ldr	r3, [pc, #352]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a57      	ldr	r2, [pc, #348]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0c:	4b55      	ldr	r3, [pc, #340]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	4a54      	ldr	r2, [pc, #336]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c12:	f023 0304 	bic.w	r3, r3, #4
 8005c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d015      	beq.n	8005c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fe fa6e 	bl	8004100 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c28:	f7fe fa6a 	bl	8004100 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0cb      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3e:	4b49      	ldr	r3, [pc, #292]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0ee      	beq.n	8005c28 <HAL_RCC_OscConfig+0x334>
 8005c4a:	e014      	b.n	8005c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c4c:	f7fe fa58 	bl	8004100 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c54:	f7fe fa54 	bl	8004100 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e0b5      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c6a:	4b3e      	ldr	r3, [pc, #248]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1ee      	bne.n	8005c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d105      	bne.n	8005c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c7c:	4b39      	ldr	r3, [pc, #228]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	4a38      	ldr	r2, [pc, #224]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80a1 	beq.w	8005dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c92:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d05c      	beq.n	8005d58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d141      	bne.n	8005d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	4b31      	ldr	r3, [pc, #196]	; (8005d6c <HAL_RCC_OscConfig+0x478>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cac:	f7fe fa28 	bl	8004100 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fe fa24 	bl	8004100 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e087      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f0      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69da      	ldr	r2, [r3, #28]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	019b      	lsls	r3, r3, #6
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	3b01      	subs	r3, #1
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	491b      	ldr	r1, [pc, #108]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <HAL_RCC_OscConfig+0x478>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d02:	f7fe f9fd 	bl	8004100 <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0a:	f7fe f9f9 	bl	8004100 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e05c      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1c:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0x416>
 8005d28:	e054      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2a:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <HAL_RCC_OscConfig+0x478>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fe f9e6 	bl	8004100 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d38:	f7fe f9e2 	bl	8004100 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e045      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x444>
 8005d56:	e03d      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e038      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d70:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <HAL_RCC_OscConfig+0x4ec>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d028      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d121      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d11a      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005da0:	4013      	ands	r3, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d111      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	3b01      	subs	r3, #1
 8005dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d107      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d001      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800

08005de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0cc      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005df8:	4b68      	ldr	r3, [pc, #416]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d90c      	bls.n	8005e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e06:	4b65      	ldr	r3, [pc, #404]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0e:	4b63      	ldr	r3, [pc, #396]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0b8      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d020      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e38:	4b59      	ldr	r3, [pc, #356]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4a58      	ldr	r2, [pc, #352]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e50:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4a52      	ldr	r2, [pc, #328]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e5c:	4b50      	ldr	r3, [pc, #320]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	494d      	ldr	r1, [pc, #308]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d044      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d107      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d119      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e07f      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea2:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e06f      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e067      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ec2:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f023 0203 	bic.w	r2, r3, #3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4934      	ldr	r1, [pc, #208]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ed4:	f7fe f914 	bl	8004100 <HAL_GetTick>
 8005ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005edc:	f7fe f910 	bl	8004100 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e04f      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef2:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 020c 	and.w	r2, r3, #12
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d1eb      	bne.n	8005edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f04:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d20c      	bcs.n	8005f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f12:	4b22      	ldr	r3, [pc, #136]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1a:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <HAL_RCC_ClockConfig+0x1b8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d001      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e032      	b.n	8005f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f38:	4b19      	ldr	r3, [pc, #100]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4916      	ldr	r1, [pc, #88]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f56:	4b12      	ldr	r3, [pc, #72]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	490e      	ldr	r1, [pc, #56]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f6a:	f000 f821 	bl	8005fb0 <HAL_RCC_GetSysClockFreq>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	490a      	ldr	r1, [pc, #40]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f7c:	5ccb      	ldrb	r3, [r1, r3]
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <HAL_RCC_ClockConfig+0x1c8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe f874 	bl	8004078 <HAL_InitTick>

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40023c00 	.word	0x40023c00
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	08008c84 	.word	0x08008c84
 8005fa8:	20000000 	.word	0x20000000
 8005fac:	20000040 	.word	0x20000040

08005fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb4:	b094      	sub	sp, #80	; 0x50
 8005fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	647b      	str	r3, [r7, #68]	; 0x44
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fc8:	4b79      	ldr	r3, [pc, #484]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 030c 	and.w	r3, r3, #12
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d00d      	beq.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	f200 80e1 	bhi.w	800619c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d003      	beq.n	8005fea <HAL_RCC_GetSysClockFreq+0x3a>
 8005fe2:	e0db      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fe4:	4b73      	ldr	r3, [pc, #460]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005fe8:	e0db      	b.n	80061a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fea:	4b73      	ldr	r3, [pc, #460]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fee:	e0d8      	b.n	80061a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ff0:	4b6f      	ldr	r3, [pc, #444]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ffa:	4b6d      	ldr	r3, [pc, #436]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d063      	beq.n	80060ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006006:	4b6a      	ldr	r3, [pc, #424]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	099b      	lsrs	r3, r3, #6
 800600c:	2200      	movs	r2, #0
 800600e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006010:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006018:	633b      	str	r3, [r7, #48]	; 0x30
 800601a:	2300      	movs	r3, #0
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
 800601e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006022:	4622      	mov	r2, r4
 8006024:	462b      	mov	r3, r5
 8006026:	f04f 0000 	mov.w	r0, #0
 800602a:	f04f 0100 	mov.w	r1, #0
 800602e:	0159      	lsls	r1, r3, #5
 8006030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006034:	0150      	lsls	r0, r2, #5
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4621      	mov	r1, r4
 800603c:	1a51      	subs	r1, r2, r1
 800603e:	6139      	str	r1, [r7, #16]
 8006040:	4629      	mov	r1, r5
 8006042:	eb63 0301 	sbc.w	r3, r3, r1
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006054:	4659      	mov	r1, fp
 8006056:	018b      	lsls	r3, r1, #6
 8006058:	4651      	mov	r1, sl
 800605a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800605e:	4651      	mov	r1, sl
 8006060:	018a      	lsls	r2, r1, #6
 8006062:	4651      	mov	r1, sl
 8006064:	ebb2 0801 	subs.w	r8, r2, r1
 8006068:	4659      	mov	r1, fp
 800606a:	eb63 0901 	sbc.w	r9, r3, r1
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800607a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800607e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006082:	4690      	mov	r8, r2
 8006084:	4699      	mov	r9, r3
 8006086:	4623      	mov	r3, r4
 8006088:	eb18 0303 	adds.w	r3, r8, r3
 800608c:	60bb      	str	r3, [r7, #8]
 800608e:	462b      	mov	r3, r5
 8006090:	eb49 0303 	adc.w	r3, r9, r3
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060a2:	4629      	mov	r1, r5
 80060a4:	024b      	lsls	r3, r1, #9
 80060a6:	4621      	mov	r1, r4
 80060a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060ac:	4621      	mov	r1, r4
 80060ae:	024a      	lsls	r2, r1, #9
 80060b0:	4610      	mov	r0, r2
 80060b2:	4619      	mov	r1, r3
 80060b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b6:	2200      	movs	r2, #0
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060c0:	f7fa f8de 	bl	8000280 <__aeabi_uldivmod>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4613      	mov	r3, r2
 80060ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060cc:	e058      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ce:	4b38      	ldr	r3, [pc, #224]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	099b      	lsrs	r3, r3, #6
 80060d4:	2200      	movs	r2, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	4611      	mov	r1, r2
 80060da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	2300      	movs	r3, #0
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
 80060e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	f04f 0000 	mov.w	r0, #0
 80060f0:	f04f 0100 	mov.w	r1, #0
 80060f4:	0159      	lsls	r1, r3, #5
 80060f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060fa:	0150      	lsls	r0, r2, #5
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4641      	mov	r1, r8
 8006102:	ebb2 0a01 	subs.w	sl, r2, r1
 8006106:	4649      	mov	r1, r9
 8006108:	eb63 0b01 	sbc.w	fp, r3, r1
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800611c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006120:	ebb2 040a 	subs.w	r4, r2, sl
 8006124:	eb63 050b 	sbc.w	r5, r3, fp
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	00eb      	lsls	r3, r5, #3
 8006132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006136:	00e2      	lsls	r2, r4, #3
 8006138:	4614      	mov	r4, r2
 800613a:	461d      	mov	r5, r3
 800613c:	4643      	mov	r3, r8
 800613e:	18e3      	adds	r3, r4, r3
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	464b      	mov	r3, r9
 8006144:	eb45 0303 	adc.w	r3, r5, r3
 8006148:	607b      	str	r3, [r7, #4]
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006156:	4629      	mov	r1, r5
 8006158:	028b      	lsls	r3, r1, #10
 800615a:	4621      	mov	r1, r4
 800615c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006160:	4621      	mov	r1, r4
 8006162:	028a      	lsls	r2, r1, #10
 8006164:	4610      	mov	r0, r2
 8006166:	4619      	mov	r1, r3
 8006168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616a:	2200      	movs	r2, #0
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	61fa      	str	r2, [r7, #28]
 8006170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006174:	f7fa f884 	bl	8000280 <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4613      	mov	r3, r2
 800617e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	0c1b      	lsrs	r3, r3, #16
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	3301      	adds	r3, #1
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800619a:	e002      	b.n	80061a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800619e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3750      	adds	r7, #80	; 0x50
 80061a8:	46bd      	mov	sp, r7
 80061aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ae:	bf00      	nop
 80061b0:	40023800 	.word	0x40023800
 80061b4:	00f42400 	.word	0x00f42400
 80061b8:	007a1200 	.word	0x007a1200

080061bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061c2:	681b      	ldr	r3, [r3, #0]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20000000 	.word	0x20000000

080061d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061d8:	f7ff fff0 	bl	80061bc <HAL_RCC_GetHCLKFreq>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	0a9b      	lsrs	r3, r3, #10
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	4903      	ldr	r1, [pc, #12]	; (80061f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ea:	5ccb      	ldrb	r3, [r1, r3]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40023800 	.word	0x40023800
 80061f8:	08008c94 	.word	0x08008c94

080061fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006200:	f7ff ffdc 	bl	80061bc <HAL_RCC_GetHCLKFreq>
 8006204:	4602      	mov	r2, r0
 8006206:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	0b5b      	lsrs	r3, r3, #13
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	4903      	ldr	r1, [pc, #12]	; (8006220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006212:	5ccb      	ldrb	r3, [r1, r3]
 8006214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006218:	4618      	mov	r0, r3
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40023800 	.word	0x40023800
 8006220:	08008c94 	.word	0x08008c94

08006224 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006248:	2b00      	cmp	r3, #0
 800624a:	d035      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800624c:	4b67      	ldr	r3, [pc, #412]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006252:	f7fd ff55 	bl	8004100 <HAL_GetTick>
 8006256:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006258:	e008      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800625a:	f7fd ff51 	bl	8004100 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e0ba      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800626c:	4b60      	ldr	r3, [pc, #384]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f0      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	019a      	lsls	r2, r3, #6
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	071b      	lsls	r3, r3, #28
 8006284:	495a      	ldr	r1, [pc, #360]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800628c:	4b57      	ldr	r3, [pc, #348]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006292:	f7fd ff35 	bl	8004100 <HAL_GetTick>
 8006296:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006298:	e008      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800629a:	f7fd ff31 	bl	8004100 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e09a      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062ac:	4b50      	ldr	r3, [pc, #320]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8083 	beq.w	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	4b49      	ldr	r3, [pc, #292]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	4a48      	ldr	r2, [pc, #288]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d4:	6413      	str	r3, [r2, #64]	; 0x40
 80062d6:	4b46      	ldr	r3, [pc, #280]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062e2:	4b44      	ldr	r3, [pc, #272]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a43      	ldr	r2, [pc, #268]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062ee:	f7fd ff07 	bl	8004100 <HAL_GetTick>
 80062f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062f4:	e008      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062f6:	f7fd ff03 	bl	8004100 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e06c      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006308:	4b3a      	ldr	r3, [pc, #232]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006314:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d02f      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	429a      	cmp	r2, r3
 8006330:	d028      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006332:	4b2f      	ldr	r3, [pc, #188]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800633c:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006342:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006348:	4a29      	ldr	r2, [pc, #164]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800634e:	4b28      	ldr	r3, [pc, #160]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b01      	cmp	r3, #1
 8006358:	d114      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800635a:	f7fd fed1 	bl	8004100 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006360:	e00a      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006362:	f7fd fecd 	bl	8004100 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006370:	4293      	cmp	r3, r2
 8006372:	d901      	bls.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e034      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0ee      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006390:	d10d      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006392:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a6:	4912      	ldr	r1, [pc, #72]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	608b      	str	r3, [r1, #8]
 80063ac:	e005      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063ae:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	4a0f      	ldr	r2, [pc, #60]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063b8:	6093      	str	r3, [r2, #8]
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c6:	490a      	ldr	r1, [pc, #40]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	7c1a      	ldrb	r2, [r3, #16]
 80063dc:	4b07      	ldr	r3, [pc, #28]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80063de:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	42470068 	.word	0x42470068
 80063f0:	40023800 	.word	0x40023800
 80063f4:	40007000 	.word	0x40007000
 80063f8:	42470e40 	.word	0x42470e40
 80063fc:	424711e0 	.word	0x424711e0

08006400 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e066      	b.n	80064e4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	7f5b      	ldrb	r3, [r3, #29]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fa fa66 	bl	80008f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	22ca      	movs	r2, #202	; 0xca
 8006438:	625a      	str	r2, [r3, #36]	; 0x24
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2253      	movs	r2, #83	; 0x53
 8006440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f998 	bl	8006778 <RTC_EnterInitMode>
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d12c      	bne.n	80064ac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006464:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6899      	ldr	r1, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68d2      	ldr	r2, [r2, #12]
 800648c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6919      	ldr	r1, [r3, #16]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	041a      	lsls	r2, r3, #16
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f99f 	bl	80067e6 <RTC_ExitInitMode>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d113      	bne.n	80064da <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	22ff      	movs	r2, #255	; 0xff
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	7f1b      	ldrb	r3, [r3, #28]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_RTC_SetTime+0x1c>
 8006504:	2302      	movs	r3, #2
 8006506:	e087      	b.n	8006618 <HAL_RTC_SetTime+0x12c>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2202      	movs	r2, #2
 8006512:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d126      	bne.n	8006568 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f97c 	bl	8006830 <RTC_ByteToBcd2>
 8006538:	4603      	mov	r3, r0
 800653a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 f975 	bl	8006830 <RTC_ByteToBcd2>
 8006546:	4603      	mov	r3, r0
 8006548:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800654a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	789b      	ldrb	r3, [r3, #2]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f96d 	bl	8006830 <RTC_ByteToBcd2>
 8006556:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006558:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	78db      	ldrb	r3, [r3, #3]
 8006560:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e018      	b.n	800659a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2200      	movs	r2, #0
 800657a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006588:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800658e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	78db      	ldrb	r3, [r3, #3]
 8006594:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	22ca      	movs	r2, #202	; 0xca
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2253      	movs	r2, #83	; 0x53
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f8e4 	bl	8006778 <RTC_EnterInitMode>
 80065b0:	4603      	mov	r3, r0
 80065b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80065b4:	7cfb      	ldrb	r3, [r7, #19]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d120      	bne.n	80065fc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80065c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6899      	ldr	r1, [r3, #8]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f8f7 	bl	80067e6 <RTC_ExitInitMode>
 80065f8:	4603      	mov	r3, r0
 80065fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	22ff      	movs	r2, #255	; 0xff
 800660e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	771a      	strb	r2, [r3, #28]

  return status;
 8006616:	7cfb      	ldrb	r3, [r7, #19]
}
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	bd90      	pop	{r4, r7, pc}

08006620 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006620:	b590      	push	{r4, r7, lr}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	7f1b      	ldrb	r3, [r3, #28]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_RTC_SetDate+0x1c>
 8006638:	2302      	movs	r3, #2
 800663a:	e071      	b.n	8006720 <HAL_RTC_SetDate+0x100>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2202      	movs	r2, #2
 8006646:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10e      	bne.n	800666c <HAL_RTC_SetDate+0x4c>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	f023 0310 	bic.w	r3, r3, #16
 8006662:	b2db      	uxtb	r3, r3
 8006664:	330a      	adds	r3, #10
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d11c      	bne.n	80066ac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	78db      	ldrb	r3, [r3, #3]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f8da 	bl	8006830 <RTC_ByteToBcd2>
 800667c:	4603      	mov	r3, r0
 800667e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f8d3 	bl	8006830 <RTC_ByteToBcd2>
 800668a:	4603      	mov	r3, r0
 800668c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800668e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	789b      	ldrb	r3, [r3, #2]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 f8cb 	bl	8006830 <RTC_ByteToBcd2>
 800669a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800669c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e00e      	b.n	80066ca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80066b8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80066be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	22ca      	movs	r2, #202	; 0xca
 80066d0:	625a      	str	r2, [r3, #36]	; 0x24
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2253      	movs	r2, #83	; 0x53
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f84c 	bl	8006778 <RTC_EnterInitMode>
 80066e0:	4603      	mov	r3, r0
 80066e2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80066e4:	7cfb      	ldrb	r3, [r7, #19]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10c      	bne.n	8006704 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f873 	bl	80067e6 <RTC_ExitInitMode>
 8006700:	4603      	mov	r3, r0
 8006702:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006704:	7cfb      	ldrb	r3, [r7, #19]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	771a      	strb	r2, [r3, #28]

  return status;
 800671e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006720:	4618      	mov	r0, r3
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	bd90      	pop	{r4, r7, pc}

08006728 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006742:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006744:	f7fd fcdc 	bl	8004100 <HAL_GetTick>
 8006748:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800674a:	e009      	b.n	8006760 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800674c:	f7fd fcd8 	bl	8004100 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800675a:	d901      	bls.n	8006760 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e007      	b.n	8006770 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0ee      	beq.n	800674c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d122      	bne.n	80067dc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067a6:	f7fd fcab 	bl	8004100 <HAL_GetTick>
 80067aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067ac:	e00c      	b.n	80067c8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ae:	f7fd fca7 	bl	8004100 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067bc:	d904      	bls.n	80067c8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2204      	movs	r2, #4
 80067c2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d102      	bne.n	80067dc <RTC_EnterInitMode+0x64>
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d1e8      	bne.n	80067ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006800:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ff89 	bl	8006728 <HAL_RTC_WaitForSynchro>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2204      	movs	r2, #4
 8006820:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800683e:	e005      	b.n	800684c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	3301      	adds	r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	3b0a      	subs	r3, #10
 800684a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	2b09      	cmp	r3, #9
 8006850:	d8f6      	bhi.n	8006840 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	b2da      	uxtb	r2, r3
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	4313      	orrs	r3, r2
 800685c:	b2db      	uxtb	r3, r3
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e03f      	b.n	80068fc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f837 	bl	8006904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2224      	movs	r2, #36	; 0x24
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f9d4 	bl	8006c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	; 0x28
 800691c:	af02      	add	r7, sp, #8
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	4613      	mov	r3, r2
 8006926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b20      	cmp	r3, #32
 8006936:	d17c      	bne.n	8006a32 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_UART_Transmit+0x2c>
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e075      	b.n	8006a34 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_UART_Transmit+0x3e>
 8006952:	2302      	movs	r3, #2
 8006954:	e06e      	b.n	8006a34 <HAL_UART_Transmit+0x11c>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2221      	movs	r2, #33	; 0x21
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800696c:	f7fd fbc8 	bl	8004100 <HAL_GetTick>
 8006970:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	88fa      	ldrh	r2, [r7, #6]
 8006976:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006986:	d108      	bne.n	800699a <HAL_UART_Transmit+0x82>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	e003      	b.n	80069a2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069aa:	e02a      	b.n	8006a02 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2200      	movs	r2, #0
 80069b4:	2180      	movs	r1, #128	; 0x80
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f8e2 	bl	8006b80 <UART_WaitOnFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e036      	b.n	8006a34 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	3302      	adds	r3, #2
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e007      	b.n	80069f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	781a      	ldrb	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	3301      	adds	r3, #1
 80069f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1cf      	bne.n	80069ac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2200      	movs	r2, #0
 8006a14:	2140      	movs	r1, #64	; 0x40
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f8b2 	bl	8006b80 <UART_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e006      	b.n	8006a34 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e000      	b.n	8006a34 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a32:	2302      	movs	r3, #2
  }
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	f040 808c 	bne.w	8006b76 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_UART_Receive+0x2e>
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e084      	b.n	8006b78 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_UART_Receive+0x40>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e07d      	b.n	8006b78 <HAL_UART_Receive+0x13c>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2222      	movs	r2, #34	; 0x22
 8006a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a98:	f7fd fb32 	bl	8004100 <HAL_GetTick>
 8006a9c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	88fa      	ldrh	r2, [r7, #6]
 8006aa8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab2:	d108      	bne.n	8006ac6 <HAL_UART_Receive+0x8a>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	e003      	b.n	8006ace <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006ad6:	e043      	b.n	8006b60 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2120      	movs	r1, #32
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 f84c 	bl	8006b80 <UART_WaitOnFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e042      	b.n	8006b78 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10c      	bne.n	8006b12 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	e01f      	b.n	8006b52 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1a:	d007      	beq.n	8006b2c <HAL_UART_Receive+0xf0>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <HAL_UART_Receive+0xfe>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d106      	bne.n	8006b3a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	e008      	b.n	8006b4c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1b6      	bne.n	8006ad8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006b76:	2302      	movs	r3, #2
  }
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b090      	sub	sp, #64	; 0x40
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b90:	e050      	b.n	8006c34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d04c      	beq.n	8006c34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ba0:	f7fd faae 	bl	8004100 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d241      	bcs.n	8006c34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bd0:	637a      	str	r2, [r7, #52]	; 0x34
 8006bd2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e5      	bne.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3314      	adds	r3, #20
 8006bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
 8006bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3314      	adds	r3, #20
 8006c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c04:	623a      	str	r2, [r7, #32]
 8006c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	69f9      	ldr	r1, [r7, #28]
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e5      	bne.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e00f      	b.n	8006c54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	bf0c      	ite	eq
 8006c44:	2301      	moveq	r3, #1
 8006c46:	2300      	movne	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d09f      	beq.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3740      	adds	r7, #64	; 0x40
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c60:	b0c0      	sub	sp, #256	; 0x100
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	68d9      	ldr	r1, [r3, #12]
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	ea40 0301 	orr.w	r3, r0, r1
 8006c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cb4:	f021 010c 	bic.w	r1, r1, #12
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd6:	6999      	ldr	r1, [r3, #24]
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	ea40 0301 	orr.w	r3, r0, r1
 8006ce2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b8f      	ldr	r3, [pc, #572]	; (8006f28 <UART_SetConfig+0x2cc>)
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d005      	beq.n	8006cfc <UART_SetConfig+0xa0>
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	4b8d      	ldr	r3, [pc, #564]	; (8006f2c <UART_SetConfig+0x2d0>)
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d104      	bne.n	8006d06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cfc:	f7ff fa7e 	bl	80061fc <HAL_RCC_GetPCLK2Freq>
 8006d00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d04:	e003      	b.n	8006d0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d06:	f7ff fa65 	bl	80061d4 <HAL_RCC_GetPCLK1Freq>
 8006d0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d18:	f040 810c 	bne.w	8006f34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d2e:	4622      	mov	r2, r4
 8006d30:	462b      	mov	r3, r5
 8006d32:	1891      	adds	r1, r2, r2
 8006d34:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d36:	415b      	adcs	r3, r3
 8006d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d3e:	4621      	mov	r1, r4
 8006d40:	eb12 0801 	adds.w	r8, r2, r1
 8006d44:	4629      	mov	r1, r5
 8006d46:	eb43 0901 	adc.w	r9, r3, r1
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d5e:	4690      	mov	r8, r2
 8006d60:	4699      	mov	r9, r3
 8006d62:	4623      	mov	r3, r4
 8006d64:	eb18 0303 	adds.w	r3, r8, r3
 8006d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	eb49 0303 	adc.w	r3, r9, r3
 8006d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	18db      	adds	r3, r3, r3
 8006d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d90:	4613      	mov	r3, r2
 8006d92:	eb42 0303 	adc.w	r3, r2, r3
 8006d96:	657b      	str	r3, [r7, #84]	; 0x54
 8006d98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006da0:	f7f9 fa6e 	bl	8000280 <__aeabi_uldivmod>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4b61      	ldr	r3, [pc, #388]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006daa:	fba3 2302 	umull	r2, r3, r3, r2
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	011c      	lsls	r4, r3, #4
 8006db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006dc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	1891      	adds	r1, r2, r2
 8006dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8006dcc:	415b      	adcs	r3, r3
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8006dda:	4649      	mov	r1, r9
 8006ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df4:	4692      	mov	sl, r2
 8006df6:	469b      	mov	fp, r3
 8006df8:	4643      	mov	r3, r8
 8006dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8006dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e02:	464b      	mov	r3, r9
 8006e04:	eb4b 0303 	adc.w	r3, fp, r3
 8006e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e20:	460b      	mov	r3, r1
 8006e22:	18db      	adds	r3, r3, r3
 8006e24:	643b      	str	r3, [r7, #64]	; 0x40
 8006e26:	4613      	mov	r3, r2
 8006e28:	eb42 0303 	adc.w	r3, r2, r3
 8006e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e36:	f7f9 fa23 	bl	8000280 <__aeabi_uldivmod>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4b3b      	ldr	r3, [pc, #236]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006e42:	fba3 2301 	umull	r2, r3, r3, r1
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	2264      	movs	r2, #100	; 0x64
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	1acb      	subs	r3, r1, r3
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e56:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006e58:	fba3 2302 	umull	r2, r3, r3, r2
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e64:	441c      	add	r4, r3
 8006e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e78:	4642      	mov	r2, r8
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	1891      	adds	r1, r2, r2
 8006e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e80:	415b      	adcs	r3, r3
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e88:	4641      	mov	r1, r8
 8006e8a:	1851      	adds	r1, r2, r1
 8006e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e8e:	4649      	mov	r1, r9
 8006e90:	414b      	adcs	r3, r1
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	00cb      	lsls	r3, r1, #3
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eaa:	4651      	mov	r1, sl
 8006eac:	00ca      	lsls	r2, r1, #3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	189b      	adds	r3, r3, r2
 8006eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	eb42 0303 	adc.w	r3, r2, r3
 8006ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006edc:	460b      	mov	r3, r1
 8006ede:	18db      	adds	r3, r3, r3
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	eb42 0303 	adc.w	r3, r2, r3
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ef2:	f7f9 f9c5 	bl	8000280 <__aeabi_uldivmod>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006efc:	fba3 1302 	umull	r1, r3, r3, r2
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	2164      	movs	r1, #100	; 0x64
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	3332      	adds	r3, #50	; 0x32
 8006f0e:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	f003 0207 	and.w	r2, r3, #7
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4422      	add	r2, r4
 8006f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f24:	e105      	b.n	8007132 <UART_SetConfig+0x4d6>
 8006f26:	bf00      	nop
 8006f28:	40011000 	.word	0x40011000
 8006f2c:	40011400 	.word	0x40011400
 8006f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f46:	4642      	mov	r2, r8
 8006f48:	464b      	mov	r3, r9
 8006f4a:	1891      	adds	r1, r2, r2
 8006f4c:	6239      	str	r1, [r7, #32]
 8006f4e:	415b      	adcs	r3, r3
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
 8006f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f56:	4641      	mov	r1, r8
 8006f58:	1854      	adds	r4, r2, r1
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	eb43 0501 	adc.w	r5, r3, r1
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	00eb      	lsls	r3, r5, #3
 8006f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f6e:	00e2      	lsls	r2, r4, #3
 8006f70:	4614      	mov	r4, r2
 8006f72:	461d      	mov	r5, r3
 8006f74:	4643      	mov	r3, r8
 8006f76:	18e3      	adds	r3, r4, r3
 8006f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	eb45 0303 	adc.w	r3, r5, r3
 8006f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	008b      	lsls	r3, r1, #2
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fac:	4621      	mov	r1, r4
 8006fae:	008a      	lsls	r2, r1, #2
 8006fb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006fb4:	f7f9 f964 	bl	8000280 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4b60      	ldr	r3, [pc, #384]	; (8007140 <UART_SetConfig+0x4e4>)
 8006fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	011c      	lsls	r4, r3, #4
 8006fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fd8:	4642      	mov	r2, r8
 8006fda:	464b      	mov	r3, r9
 8006fdc:	1891      	adds	r1, r2, r2
 8006fde:	61b9      	str	r1, [r7, #24]
 8006fe0:	415b      	adcs	r3, r3
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe8:	4641      	mov	r1, r8
 8006fea:	1851      	adds	r1, r2, r1
 8006fec:	6139      	str	r1, [r7, #16]
 8006fee:	4649      	mov	r1, r9
 8006ff0:	414b      	adcs	r3, r1
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007000:	4659      	mov	r1, fp
 8007002:	00cb      	lsls	r3, r1, #3
 8007004:	4651      	mov	r1, sl
 8007006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800700a:	4651      	mov	r1, sl
 800700c:	00ca      	lsls	r2, r1, #3
 800700e:	4610      	mov	r0, r2
 8007010:	4619      	mov	r1, r3
 8007012:	4603      	mov	r3, r0
 8007014:	4642      	mov	r2, r8
 8007016:	189b      	adds	r3, r3, r2
 8007018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800701c:	464b      	mov	r3, r9
 800701e:	460a      	mov	r2, r1
 8007020:	eb42 0303 	adc.w	r3, r2, r3
 8007024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	67bb      	str	r3, [r7, #120]	; 0x78
 8007032:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007040:	4649      	mov	r1, r9
 8007042:	008b      	lsls	r3, r1, #2
 8007044:	4641      	mov	r1, r8
 8007046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800704a:	4641      	mov	r1, r8
 800704c:	008a      	lsls	r2, r1, #2
 800704e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007052:	f7f9 f915 	bl	8000280 <__aeabi_uldivmod>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4b39      	ldr	r3, [pc, #228]	; (8007140 <UART_SetConfig+0x4e4>)
 800705c:	fba3 1302 	umull	r1, r3, r3, r2
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	2164      	movs	r1, #100	; 0x64
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	3332      	adds	r3, #50	; 0x32
 800706e:	4a34      	ldr	r2, [pc, #208]	; (8007140 <UART_SetConfig+0x4e4>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800707a:	441c      	add	r4, r3
 800707c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007080:	2200      	movs	r2, #0
 8007082:	673b      	str	r3, [r7, #112]	; 0x70
 8007084:	677a      	str	r2, [r7, #116]	; 0x74
 8007086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800708a:	4642      	mov	r2, r8
 800708c:	464b      	mov	r3, r9
 800708e:	1891      	adds	r1, r2, r2
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	415b      	adcs	r3, r3
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800709a:	4641      	mov	r1, r8
 800709c:	1851      	adds	r1, r2, r1
 800709e:	6039      	str	r1, [r7, #0]
 80070a0:	4649      	mov	r1, r9
 80070a2:	414b      	adcs	r3, r1
 80070a4:	607b      	str	r3, [r7, #4]
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070b2:	4659      	mov	r1, fp
 80070b4:	00cb      	lsls	r3, r1, #3
 80070b6:	4651      	mov	r1, sl
 80070b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070bc:	4651      	mov	r1, sl
 80070be:	00ca      	lsls	r2, r1, #3
 80070c0:	4610      	mov	r0, r2
 80070c2:	4619      	mov	r1, r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	4642      	mov	r2, r8
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80070cc:	464b      	mov	r3, r9
 80070ce:	460a      	mov	r2, r1
 80070d0:	eb42 0303 	adc.w	r3, r2, r3
 80070d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	663b      	str	r3, [r7, #96]	; 0x60
 80070e0:	667a      	str	r2, [r7, #100]	; 0x64
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070ee:	4649      	mov	r1, r9
 80070f0:	008b      	lsls	r3, r1, #2
 80070f2:	4641      	mov	r1, r8
 80070f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f8:	4641      	mov	r1, r8
 80070fa:	008a      	lsls	r2, r1, #2
 80070fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007100:	f7f9 f8be 	bl	8000280 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <UART_SetConfig+0x4e4>)
 800710a:	fba3 1302 	umull	r1, r3, r3, r2
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	2164      	movs	r1, #100	; 0x64
 8007112:	fb01 f303 	mul.w	r3, r1, r3
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	3332      	adds	r3, #50	; 0x32
 800711c:	4a08      	ldr	r2, [pc, #32]	; (8007140 <UART_SetConfig+0x4e4>)
 800711e:	fba2 2303 	umull	r2, r3, r2, r3
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	f003 020f 	and.w	r2, r3, #15
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4422      	add	r2, r4
 8007130:	609a      	str	r2, [r3, #8]
}
 8007132:	bf00      	nop
 8007134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007138:	46bd      	mov	sp, r7
 800713a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713e:	bf00      	nop
 8007140:	51eb851f 	.word	0x51eb851f

08007144 <MX_TOF_Init>:
static void handle_cmd(uint8_t cmd);
static uint8_t get_key(void);
static uint32_t com_has_data(void);

void MX_TOF_Init(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_VL53L7CX_SimpleRanging_Init();
 8007148:	f000 f808 	bl	800715c <MX_VL53L7CX_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 800714c:	bf00      	nop
 800714e:	bd80      	pop	{r7, pc}

08007150 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_VL53L7CX_SimpleRanging_Process();
 8007154:	f000 f81c 	bl	8007190 <MX_VL53L7CX_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8007158:	bf00      	nop
 800715a:	bd80      	pop	{r7, pc}

0800715c <MX_VL53L7CX_SimpleRanging_Init>:

static void MX_VL53L7CX_SimpleRanging_Init(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8007160:	2000      	movs	r0, #0
 8007162:	f7fc fe97 	bl	8003e94 <BSP_COM_Init>

  status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L7CX);
 8007166:	2000      	movs	r0, #0
 8007168:	f000 f9fc 	bl	8007564 <CUSTOM_RANGING_SENSOR_Init>
 800716c:	4603      	mov	r3, r0
 800716e:	4a06      	ldr	r2, [pc, #24]	; (8007188 <MX_VL53L7CX_SimpleRanging_Init+0x2c>)
 8007170:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8007172:	4b05      	ldr	r3, [pc, #20]	; (8007188 <MX_VL53L7CX_SimpleRanging_Init+0x2c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <MX_VL53L7CX_SimpleRanging_Init+0x26>
  {
    printf("CUSTOM_RANGING_SENSOR_Init failed\n");
 800717a:	4804      	ldr	r0, [pc, #16]	; (800718c <MX_VL53L7CX_SimpleRanging_Init+0x30>)
 800717c:	f000 fcce 	bl	8007b1c <puts>
    while(1);
 8007180:	e7fe      	b.n	8007180 <MX_VL53L7CX_SimpleRanging_Init+0x24>
  }
}
 8007182:	bf00      	nop
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	200004b4 	.word	0x200004b4
 800718c:	08008b34 	.word	0x08008b34

08007190 <MX_VL53L7CX_SimpleRanging_Process>:
    HAL_Delay(POLLING_PERIOD);
  }
}
#else
static void MX_VL53L7CX_SimpleRanging_Process(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8007196:	af00      	add	r7, sp, #0
  uint32_t Id;
  RANGING_SENSOR_Result_t Result;

  CUSTOM_RANGING_SENSOR_ReadID(CUSTOM_VL53L7CX, &Id);
 8007198:	f207 5304 	addw	r3, r7, #1284	; 0x504
 800719c:	4619      	mov	r1, r3
 800719e:	2000      	movs	r0, #0
 80071a0:	f000 fa0c 	bl	80075bc <CUSTOM_RANGING_SENSOR_ReadID>
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L7CX, &Cap);
 80071a4:	491e      	ldr	r1, [pc, #120]	; (8007220 <MX_VL53L7CX_SimpleRanging_Process+0x90>)
 80071a6:	2000      	movs	r0, #0
 80071a8:	f000 fa32 	bl	8007610 <CUSTOM_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80071ac:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 80071ae:	2203      	movs	r2, #3
 80071b0:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 80071b4:	221e      	movs	r2, #30
 80071b6:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 80071ba:	2205      	movs	r2, #5
 80071bc:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 80071be:	4b19      	ldr	r3, [pc, #100]	; (8007224 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 80071c4:	4b17      	ldr	r3, [pc, #92]	; (8007224 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L7CX, &Profile);
 80071ca:	4916      	ldr	r1, [pc, #88]	; (8007224 <MX_VL53L7CX_SimpleRanging_Process+0x94>)
 80071cc:	2000      	movs	r0, #0
 80071ce:	f000 fa49 	bl	8007664 <CUSTOM_RANGING_SENSOR_ConfigProfile>

  status = CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L7CX, RS_MODE_BLOCKING_CONTINUOUS);
 80071d2:	2101      	movs	r1, #1
 80071d4:	2000      	movs	r0, #0
 80071d6:	f000 fa99 	bl	800770c <CUSTOM_RANGING_SENSOR_Start>
 80071da:	4603      	mov	r3, r0
 80071dc:	4a12      	ldr	r2, [pc, #72]	; (8007228 <MX_VL53L7CX_SimpleRanging_Process+0x98>)
 80071de:	6013      	str	r3, [r2, #0]

  while (1)
  {
    /* polling mode */
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L7CX, &Result);
 80071e0:	463b      	mov	r3, r7
 80071e2:	4619      	mov	r1, r3
 80071e4:	2000      	movs	r0, #0
 80071e6:	f000 fa67 	bl	80076b8 <CUSTOM_RANGING_SENSOR_GetDistance>
 80071ea:	4603      	mov	r3, r0
 80071ec:	4a0e      	ldr	r2, [pc, #56]	; (8007228 <MX_VL53L7CX_SimpleRanging_Process+0x98>)
 80071ee:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <MX_VL53L7CX_SimpleRanging_Process+0x98>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d103      	bne.n	8007200 <MX_VL53L7CX_SimpleRanging_Process+0x70>
    {
      print_result(&Result);
 80071f8:	463b      	mov	r3, r7
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f816 	bl	800722c <print_result>
    }

    if (com_has_data())
 8007200:	f000 f988 	bl	8007514 <com_has_data>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <MX_VL53L7CX_SimpleRanging_Process+0x86>
    {
      handle_cmd(get_key());
 800720a:	f000 f96f 	bl	80074ec <get_key>
 800720e:	4603      	mov	r3, r0
 8007210:	4618      	mov	r0, r3
 8007212:	f000 f921 	bl	8007458 <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 8007216:	20c8      	movs	r0, #200	; 0xc8
 8007218:	f7fc ff7e 	bl	8004118 <HAL_Delay>
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L7CX, &Result);
 800721c:	e7e0      	b.n	80071e0 <MX_VL53L7CX_SimpleRanging_Process+0x50>
 800721e:	bf00      	nop
 8007220:	20000490 	.word	0x20000490
 8007224:	200004a0 	.word	0x200004a0
 8007228:	200004b4 	.word	0x200004b4

0800722c <print_result>:
  }
}
#endif /* USE_BARE_DRIVER */

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 800722c:	b5b0      	push	{r4, r5, r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  int8_t i, j, k, l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8007234:	4b49      	ldr	r3, [pc, #292]	; (800735c <print_result+0x130>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b04      	cmp	r3, #4
 800723a:	d003      	beq.n	8007244 <print_result+0x18>
         (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 800723c:	4b47      	ldr	r3, [pc, #284]	; (800735c <print_result+0x130>)
 800723e:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8007240:	2b03      	cmp	r3, #3
 8007242:	d101      	bne.n	8007248 <print_result+0x1c>
 8007244:	2308      	movs	r3, #8
 8007246:	e000      	b.n	800724a <print_result+0x1e>
 8007248:	2304      	movs	r3, #4
 800724a:	733b      	strb	r3, [r7, #12]
  /* clear screen */
//  printf("%c[2H", 27);

//  printf("Cell Format : %20s %20s %20s\n","Distance[mm]","Status","Signal[kcps/spad]\n\n");

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]
 8007250:	e076      	b.n	8007340 <print_result+0x114>
  {
	for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8007252:	2300      	movs	r3, #0
 8007254:	737b      	strb	r3, [r7, #13]
 8007256:	e06a      	b.n	800732e <print_result+0x102>
	{
		/* Print distance and status */
		for (k = (zones_per_line - 1); k >= 0; k--)
 8007258:	7b3b      	ldrb	r3, [r7, #12]
 800725a:	3b01      	subs	r3, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	73bb      	strb	r3, [r7, #14]
 8007260:	e05b      	b.n	800731a <print_result+0xee>
		{
		  if (k == 4){ // ****** only print middle top line ******* (zones_per_line/2-1) * 8
 8007262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007266:	2b04      	cmp	r3, #4
 8007268:	d151      	bne.n	800730e <print_result+0xe2>
			  if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 800726a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800726e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007272:	441a      	add	r2, r3
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	440b      	add	r3, r1
 8007280:	3304      	adds	r3, #4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d03c      	beq.n	8007302 <print_result+0xd6>
			  {
				printf("%5ld %5ld %5ld|",
					(long)Result->ZoneResult[j+k].Distance[l],
 8007288:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800728c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007290:	441a      	add	r2, r3
 8007292:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	4403      	add	r3, r0
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	689b      	ldr	r3, [r3, #8]
				printf("%5ld %5ld %5ld|",
 80072a6:	461c      	mov	r4, r3
					(long)Result->ZoneResult[j+k].Status[l],
 80072a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80072ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072b0:	441a      	add	r2, r3
 80072b2:	f997 000d 	ldrsb.w	r0, [r7, #13]
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	4403      	add	r3, r0
 80072c0:	3302      	adds	r3, #2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	685b      	ldr	r3, [r3, #4]
				printf("%5ld %5ld %5ld|",
 80072c8:	461d      	mov	r5, r3
					(long)Result->ZoneResult[j+k].Signal[l] );
 80072ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80072ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072d2:	441a      	add	r2, r3
 80072d4:	f997 000d 	ldrsb.w	r0, [r7, #13]
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	4403      	add	r3, r0
 80072e2:	3304      	adds	r3, #4
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	440b      	add	r3, r1
 80072e8:	3304      	adds	r3, #4
 80072ea:	edd3 7a00 	vldr	s15, [r3]
				printf("%5ld %5ld %5ld|",
 80072ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072f2:	ee17 3a90 	vmov	r3, s15
 80072f6:	462a      	mov	r2, r5
 80072f8:	4621      	mov	r1, r4
 80072fa:	4819      	ldr	r0, [pc, #100]	; (8007360 <print_result+0x134>)
 80072fc:	f000 fb72 	bl	80079e4 <iprintf>
 8007300:	e005      	b.n	800730e <print_result+0xe2>
			  }
				else
				  printf("%5s %5s %5s|", "X", "X","X");
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <print_result+0x138>)
 8007304:	4a17      	ldr	r2, [pc, #92]	; (8007364 <print_result+0x138>)
 8007306:	4917      	ldr	r1, [pc, #92]	; (8007364 <print_result+0x138>)
 8007308:	4817      	ldr	r0, [pc, #92]	; (8007368 <print_result+0x13c>)
 800730a:	f000 fb6b 	bl	80079e4 <iprintf>
		for (k = (zones_per_line - 1); k >= 0; k--)
 800730e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b2db      	uxtb	r3, r3
 8007318:	73bb      	strb	r3, [r7, #14]
 800731a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800731e:	2b00      	cmp	r3, #0
 8007320:	da9f      	bge.n	8007262 <print_result+0x36>
	for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8007322:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	3301      	adds	r3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	737b      	strb	r3, [r7, #13]
 800732e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d090      	beq.n	8007258 <print_result+0x2c>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8007336:	7bfa      	ldrb	r2, [r7, #15]
 8007338:	7b3b      	ldrb	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	b2db      	uxtb	r3, r3
 800733e:	73fb      	strb	r3, [r7, #15]
 8007340:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d382      	bcc.n	8007252 <print_result+0x26>
		  }
		}
	}
  }
  printf("\n");
 800734c:	200a      	movs	r0, #10
 800734e:	f000 fb61 	bl	8007a14 <putchar>
}
 8007352:	bf00      	nop
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bdb0      	pop	{r4, r5, r7, pc}
 800735a:	bf00      	nop
 800735c:	200004a0 	.word	0x200004a0
 8007360:	08008b58 	.word	0x08008b58
 8007364:	08008b68 	.word	0x08008b68
 8007368:	08008b6c 	.word	0x08008b6c

0800736c <toggle_resolution>:
static void toggle_resolution(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L7CX);
 8007370:	2000      	movs	r0, #0
 8007372:	f000 f9f7 	bl	8007764 <CUSTOM_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 8007376:	4b16      	ldr	r3, [pc, #88]	; (80073d0 <toggle_resolution+0x64>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3b01      	subs	r3, #1
 800737c:	2b03      	cmp	r3, #3
 800737e:	d81b      	bhi.n	80073b8 <toggle_resolution+0x4c>
 8007380:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <toggle_resolution+0x1c>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	080073a1 	.word	0x080073a1
 800738c:	08007399 	.word	0x08007399
 8007390:	080073b1 	.word	0x080073b1
 8007394:	080073a9 	.word	0x080073a9
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8007398:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <toggle_resolution+0x64>)
 800739a:	2204      	movs	r2, #4
 800739c:	601a      	str	r2, [r3, #0]
      break;
 800739e:	e00c      	b.n	80073ba <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <toggle_resolution+0x64>)
 80073a2:	2203      	movs	r2, #3
 80073a4:	601a      	str	r2, [r3, #0]
      break;
 80073a6:	e008      	b.n	80073ba <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 80073a8:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <toggle_resolution+0x64>)
 80073aa:	2202      	movs	r2, #2
 80073ac:	601a      	str	r2, [r3, #0]
      break;
 80073ae:	e004      	b.n	80073ba <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <toggle_resolution+0x64>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
      break;
 80073b6:	e000      	b.n	80073ba <toggle_resolution+0x4e>

    default:
      break;
 80073b8:	bf00      	nop
  }

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L7CX, &Profile);
 80073ba:	4905      	ldr	r1, [pc, #20]	; (80073d0 <toggle_resolution+0x64>)
 80073bc:	2000      	movs	r0, #0
 80073be:	f000 f951 	bl	8007664 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L7CX, RS_MODE_BLOCKING_CONTINUOUS);
 80073c2:	2101      	movs	r1, #1
 80073c4:	2000      	movs	r0, #0
 80073c6:	f000 f9a1 	bl	800770c <CUSTOM_RANGING_SENSOR_Start>
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200004a0 	.word	0x200004a0

080073d4 <toggle_signal>:

static void toggle_signal(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L7CX);
 80073d8:	2000      	movs	r0, #0
 80073da:	f000 f9c3 	bl	8007764 <CUSTOM_RANGING_SENSOR_Stop>

  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 80073de:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <toggle_signal+0x34>)
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bf0c      	ite	eq
 80073e6:	2301      	moveq	r3, #1
 80073e8:	2300      	movne	r3, #0
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	4b06      	ldr	r3, [pc, #24]	; (8007408 <toggle_signal+0x34>)
 80073f0:	611a      	str	r2, [r3, #16]

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L7CX, &Profile);
 80073f2:	4905      	ldr	r1, [pc, #20]	; (8007408 <toggle_signal+0x34>)
 80073f4:	2000      	movs	r0, #0
 80073f6:	f000 f935 	bl	8007664 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L7CX, RS_MODE_BLOCKING_CONTINUOUS);
 80073fa:	2101      	movs	r1, #1
 80073fc:	2000      	movs	r0, #0
 80073fe:	f000 f985 	bl	800770c <CUSTOM_RANGING_SENSOR_Start>
}
 8007402:	bf00      	nop
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200004a0 	.word	0x200004a0

0800740c <toggle_ambient>:

static void toggle_ambient(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L7CX);
 8007410:	2000      	movs	r0, #0
 8007412:	f000 f9a7 	bl	8007764 <CUSTOM_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 8007416:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <toggle_ambient+0x34>)
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	bf0c      	ite	eq
 800741e:	2301      	moveq	r3, #1
 8007420:	2300      	movne	r3, #0
 8007422:	b2db      	uxtb	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	4b06      	ldr	r3, [pc, #24]	; (8007440 <toggle_ambient+0x34>)
 8007428:	60da      	str	r2, [r3, #12]

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L7CX, &Profile);
 800742a:	4905      	ldr	r1, [pc, #20]	; (8007440 <toggle_ambient+0x34>)
 800742c:	2000      	movs	r0, #0
 800742e:	f000 f919 	bl	8007664 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L7CX, RS_MODE_BLOCKING_CONTINUOUS);
 8007432:	2101      	movs	r1, #1
 8007434:	2000      	movs	r0, #0
 8007436:	f000 f969 	bl	800770c <CUSTOM_RANGING_SENSOR_Start>
}
 800743a:	bf00      	nop
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	200004a0 	.word	0x200004a0

08007444 <clear_screen>:

static void clear_screen(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* clear Screen : 27 is ESC command */
  printf("%c[2J", 27);
 8007448:	211b      	movs	r1, #27
 800744a:	4802      	ldr	r0, [pc, #8]	; (8007454 <clear_screen+0x10>)
 800744c:	f000 faca 	bl	80079e4 <iprintf>
}
 8007450:	bf00      	nop
 8007452:	bd80      	pop	{r7, pc}
 8007454:	08008b7c 	.word	0x08008b7c

08007458 <handle_cmd>:
  printf(" 'c' : clear screen\n");
  printf("\n");
}

static void handle_cmd(uint8_t cmd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	3b61      	subs	r3, #97	; 0x61
 8007466:	2b12      	cmp	r3, #18
 8007468:	d83a      	bhi.n	80074e0 <handle_cmd+0x88>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <handle_cmd+0x18>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074d1 	.word	0x080074d1
 8007474:	080074e1 	.word	0x080074e1
 8007478:	080074db 	.word	0x080074db
 800747c:	080074e1 	.word	0x080074e1
 8007480:	080074e1 	.word	0x080074e1
 8007484:	080074e1 	.word	0x080074e1
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074e1 	.word	0x080074e1
 8007490:	080074e1 	.word	0x080074e1
 8007494:	080074e1 	.word	0x080074e1
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074e1 	.word	0x080074e1
 80074a0:	080074e1 	.word	0x080074e1
 80074a4:	080074e1 	.word	0x080074e1
 80074a8:	080074e1 	.word	0x080074e1
 80074ac:	080074e1 	.word	0x080074e1
 80074b0:	080074e1 	.word	0x080074e1
 80074b4:	080074bd 	.word	0x080074bd
 80074b8:	080074c7 	.word	0x080074c7
  {
    case 'r':
      toggle_resolution();
 80074bc:	f7ff ff56 	bl	800736c <toggle_resolution>
      clear_screen();
 80074c0:	f7ff ffc0 	bl	8007444 <clear_screen>
      break;
 80074c4:	e00d      	b.n	80074e2 <handle_cmd+0x8a>

    case 's':
      toggle_signal();
 80074c6:	f7ff ff85 	bl	80073d4 <toggle_signal>
      clear_screen();
 80074ca:	f7ff ffbb 	bl	8007444 <clear_screen>
      break;
 80074ce:	e008      	b.n	80074e2 <handle_cmd+0x8a>

    case 'a':
	  toggle_ambient();
 80074d0:	f7ff ff9c 	bl	800740c <toggle_ambient>
	  clear_screen();
 80074d4:	f7ff ffb6 	bl	8007444 <clear_screen>
	  break;
 80074d8:	e003      	b.n	80074e2 <handle_cmd+0x8a>

    case 'c':
      clear_screen();
 80074da:	f7ff ffb3 	bl	8007444 <clear_screen>
      break;
 80074de:	e000      	b.n	80074e2 <handle_cmd+0x8a>

    default:
      break;
 80074e0:	bf00      	nop
  }
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop

080074ec <get_key>:

static uint8_t get_key(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 80074f6:	1df9      	adds	r1, r7, #7
 80074f8:	f04f 33ff 	mov.w	r3, #4294967295
 80074fc:	2201      	movs	r2, #1
 80074fe:	4804      	ldr	r0, [pc, #16]	; (8007510 <get_key+0x24>)
 8007500:	f7ff fa9c 	bl	8006a3c <HAL_UART_Receive>

  return cmd;
 8007504:	79fb      	ldrb	r3, [r7, #7]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000444 	.word	0x20000444

08007514 <com_has_data>:

static uint32_t com_has_data(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <com_has_data+0x24>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b20      	cmp	r3, #32
 8007524:	bf0c      	ite	eq
 8007526:	2301      	moveq	r3, #1
 8007528:	2300      	movne	r3, #0
 800752a:	b2db      	uxtb	r3, r3
}
 800752c:	4618      	mov	r0, r3
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000444 	.word	0x20000444

0800753c <HAL_GPIO_EXTI_Callback>:
#include "app_tof_pin_conf.h"

extern volatile uint8_t ToF_EventDetected;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	2b10      	cmp	r3, #16
 800754a:	d102      	bne.n	8007552 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <HAL_GPIO_EXTI_Callback+0x24>)
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
  }
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	200004b8 	.word	0x200004b8

08007564 <CUSTOM_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Init(uint32_t Instance)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <CUSTOM_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007572:	f06f 0301 	mvn.w	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e01b      	b.n	80075b2 <CUSTOM_RANGING_SENSOR_Init+0x4e>
  }
  else
  {
    CUSTOM_RANGING_SENSOR_SetPowerMode(Instance, CUSTOM_RANGING_POWERMODE_OFF);
 800757a:	2101      	movs	r1, #1
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f919 	bl	80077b4 <CUSTOM_RANGING_SENSOR_SetPowerMode>
    CUSTOM_RANGING_SENSOR_SetPowerMode(Instance, CUSTOM_RANGING_POWERMODE_ON);
 8007582:	2100      	movs	r1, #0
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f915 	bl	80077b4 <CUSTOM_RANGING_SENSOR_SetPowerMode>

    switch (Instance)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10c      	bne.n	80075aa <CUSTOM_RANGING_SENSOR_Init+0x46>
    {
#if (USE_CUSTOM_RANGING_VL53L7CX == 1U)
      case CUSTOM_VL53L7CX:
          if (VL53L7CX_Probe(Instance) != BSP_ERROR_NONE)
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f967 	bl	8007864 <VL53L7CX_Probe>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <CUSTOM_RANGING_SENSOR_Init+0x40>
          {
            ret = BSP_ERROR_NO_INIT;
 800759c:	f04f 33ff 	mov.w	r3, #4294967295
 80075a0:	60fb      	str	r3, [r7, #12]
          }
          else
          {
            ret = BSP_ERROR_NONE;
          }
          break;
 80075a2:	e006      	b.n	80075b2 <CUSTOM_RANGING_SENSOR_Init+0x4e>
            ret = BSP_ERROR_NONE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]
          break;
 80075a8:	e003      	b.n	80075b2 <CUSTOM_RANGING_SENSOR_Init+0x4e>
#endif
      default:
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80075aa:	f06f 0306 	mvn.w	r3, #6
 80075ae:	60fb      	str	r3, [r7, #12]
          break;
 80075b0:	bf00      	nop
    }
  }

  return ret;
 80075b2:	68fb      	ldr	r3, [r7, #12]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <CUSTOM_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <CUSTOM_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80075cc:	f06f 0301 	mvn.w	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	e014      	b.n	80075fe <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ReadID(CUSTOM_RANGING_CompObj[Instance], pId) < 0)
 80075d4:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <CUSTOM_RANGING_SENSOR_ReadID+0x4c>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	490b      	ldr	r1, [pc, #44]	; (800760c <CUSTOM_RANGING_SENSOR_ReadID+0x50>)
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	da03      	bge.n	80075fa <CUSTOM_RANGING_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80075f2:	f06f 0304 	mvn.w	r3, #4
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e001      	b.n	80075fe <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200004c0 	.word	0x200004c0
 800760c:	200004bc 	.word	0x200004bc

08007610 <CUSTOM_RANGING_SENSOR_GetCapabilities>:
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @note This function should be called after the init.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
    int32_t ret;

    if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x18>
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007620:	f06f 0301 	mvn.w	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	e014      	b.n	8007652 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], pCapabilities) < 0)
 8007628:	4a0c      	ldr	r2, [pc, #48]	; (800765c <CUSTOM_RANGING_SENSOR_GetCapabilities+0x4c>)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	490b      	ldr	r1, [pc, #44]	; (8007660 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x50>)
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	da03      	bge.n	800764e <CUSTOM_RANGING_SENSOR_GetCapabilities+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007646:	f06f 0304 	mvn.w	r3, #4
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e001      	b.n	8007652 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8007652:	68fb      	ldr	r3, [r7, #12]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	200004c0 	.word	0x200004c0
 8007660:	200004bc 	.word	0x200004bc

08007664 <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007674:	f06f 0301 	mvn.w	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	e014      	b.n	80076a6 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 800767c:	4a0c      	ldr	r2, [pc, #48]	; (80076b0 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x4c>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	490b      	ldr	r1, [pc, #44]	; (80076b4 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x50>)
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	da03      	bge.n	80076a2 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800769a:	f06f 0304 	mvn.w	r3, #4
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e001      	b.n	80076a6 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076a6:	68fb      	ldr	r3, [r7, #12]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	200004c0 	.word	0x200004c0
 80076b4:	200004bc 	.word	0x200004bc

080076b8 <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80076c8:	f06f 0301 	mvn.w	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	e014      	b.n	80076fa <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 80076d0:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	490b      	ldr	r1, [pc, #44]	; (8007708 <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da03      	bge.n	80076f6 <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80076ee:	f06f 0304 	mvn.w	r3, #4
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e001      	b.n	80076fa <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076fa:	68fb      	ldr	r3, [r7, #12]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	200004c0 	.word	0x200004c0
 8007708:	200004bc 	.word	0x200004bc

0800770c <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800771e:	f06f 0301 	mvn.w	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e014      	b.n	8007750 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 8007726:	4a0d      	ldr	r2, [pc, #52]	; (800775c <CUSTOM_RANGING_SENSOR_Start+0x50>)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	490b      	ldr	r1, [pc, #44]	; (8007760 <CUSTOM_RANGING_SENSOR_Start+0x54>)
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007738:	78f9      	ldrb	r1, [r7, #3]
 800773a:	4610      	mov	r0, r2
 800773c:	4798      	blx	r3
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	da03      	bge.n	800774c <CUSTOM_RANGING_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007744:	f06f 0304 	mvn.w	r3, #4
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	e001      	b.n	8007750 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007750:	68fb      	ldr	r3, [r7, #12]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200004c0 	.word	0x200004c0
 8007760:	200004bc 	.word	0x200004bc

08007764 <CUSTOM_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <CUSTOM_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007772:	f06f 0301 	mvn.w	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e013      	b.n	80077a2 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Stop(CUSTOM_RANGING_CompObj[Instance]) < 0)
 800777a:	4a0c      	ldr	r2, [pc, #48]	; (80077ac <CUSTOM_RANGING_SENSOR_Stop+0x48>)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	490a      	ldr	r1, [pc, #40]	; (80077b0 <CUSTOM_RANGING_SENSOR_Stop+0x4c>)
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	da03      	bge.n	800779e <CUSTOM_RANGING_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007796:	f06f 0304 	mvn.w	r3, #4
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e001      	b.n	80077a2 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200004c0 	.word	0x200004c0
 80077b0:	200004bc 	.word	0x200004bc

080077b4 <CUSTOM_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <CUSTOM_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80077c4:	f06f 0301 	mvn.w	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e042      	b.n	8007852 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
  }
  else if (PowerMode == CUSTOM_RANGING_POWERMODE_ON)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d11c      	bne.n	800780c <CUSTOM_RANGING_SENSOR_SetPowerMode+0x58>
  {
       switch (Instance)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d115      	bne.n	8007804 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x50>
        {
#if (USE_CUSTOM_RANGING_VL53L7CX == 1U)
          case CUSTOM_VL53L7CX:
            if (CUSTOM_RANGING_Drv[Instance]->SetPowerMode(CUSTOM_RANGING_CompObj[Instance], VL53L7CX_POWER_MODE_WAKEUP) < 0)
 80077d8:	4a20      	ldr	r2, [pc, #128]	; (800785c <CUSTOM_RANGING_SENSOR_SetPowerMode+0xa8>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	491f      	ldr	r1, [pc, #124]	; (8007860 <CUSTOM_RANGING_SENSOR_SetPowerMode+0xac>)
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80077ea:	2101      	movs	r1, #1
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	da03      	bge.n	80077fe <CUSTOM_RANGING_SENSOR_SetPowerMode+0x4a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80077f6:	f06f 0304 	mvn.w	r3, #4
 80077fa:	60fb      	str	r3, [r7, #12]
            else
            {
              ret = BSP_ERROR_NONE;
            }

            break;
 80077fc:	e029      	b.n	8007852 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
              ret = BSP_ERROR_NONE;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
            break;
 8007802:	e026      	b.n	8007852 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
#endif
          default:
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007804:	f06f 0306 	mvn.w	r3, #6
 8007808:	60fb      	str	r3, [r7, #12]
              break;
 800780a:	e022      	b.n	8007852 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
    }
  }
  else if (PowerMode == CUSTOM_RANGING_POWERMODE_OFF)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d11c      	bne.n	800784c <CUSTOM_RANGING_SENSOR_SetPowerMode+0x98>
  {
        switch (Instance)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d115      	bne.n	8007844 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x90>
        {
#if (USE_CUSTOM_RANGING_VL53L7CX == 1U)
          case CUSTOM_VL53L7CX:
            if (CUSTOM_RANGING_Drv[Instance]->SetPowerMode(CUSTOM_RANGING_CompObj[Instance], VL53L7CX_POWER_MODE_SLEEP) < 0)
 8007818:	4a10      	ldr	r2, [pc, #64]	; (800785c <CUSTOM_RANGING_SENSOR_SetPowerMode+0xa8>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	490f      	ldr	r1, [pc, #60]	; (8007860 <CUSTOM_RANGING_SENSOR_SetPowerMode+0xac>)
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800782a:	2100      	movs	r1, #0
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	da03      	bge.n	800783e <CUSTOM_RANGING_SENSOR_SetPowerMode+0x8a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8007836:	f06f 0304 	mvn.w	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
            else
            {
              ret = BSP_ERROR_NONE;
            }

            break;
 800783c:	e009      	b.n	8007852 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
              ret = BSP_ERROR_NONE;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
            break;
 8007842:	e006      	b.n	8007852 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
#endif
          default:
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007844:	f06f 0306 	mvn.w	r3, #6
 8007848:	60fb      	str	r3, [r7, #12]
              break;
 800784a:	e002      	b.n	8007852 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800784c:	f06f 0301 	mvn.w	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
  }

    return ret;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200004c0 	.word	0x200004c0
 8007860:	200004bc 	.word	0x200004bc

08007864 <VL53L7CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L7CX_Probe(uint32_t Instance)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08a      	sub	sp, #40	; 0x28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  VL53L7CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L7CX_Object_t   VL53L7CXObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L7CX_ADDRESS;
 800786c:	2352      	movs	r3, #82	; 0x52
 800786e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = CUSTOM_VL53L7CX_I2C_Init;
 8007870:	4b32      	ldr	r3, [pc, #200]	; (800793c <VL53L7CX_Probe+0xd8>)
 8007872:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = CUSTOM_VL53L7CX_I2C_DeInit;
 8007874:	4b32      	ldr	r3, [pc, #200]	; (8007940 <VL53L7CX_Probe+0xdc>)
 8007876:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = CUSTOM_VL53L7CX_I2C_WriteReg;
 8007878:	4b32      	ldr	r3, [pc, #200]	; (8007944 <VL53L7CX_Probe+0xe0>)
 800787a:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = CUSTOM_VL53L7CX_I2C_ReadReg;
 800787c:	4b32      	ldr	r3, [pc, #200]	; (8007948 <VL53L7CX_Probe+0xe4>)
 800787e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8007880:	4b32      	ldr	r3, [pc, #200]	; (800794c <VL53L7CX_Probe+0xe8>)
 8007882:	623b      	str	r3, [r7, #32]

  if (VL53L7CX_RegisterBusIO(&VL53L7CXObj, &IOCtx) != VL53L7CX_OK)
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	4619      	mov	r1, r3
 800788a:	4831      	ldr	r0, [pc, #196]	; (8007950 <VL53L7CX_Probe+0xec>)
 800788c:	f7fb fd5b 	bl	8003346 <VL53L7CX_RegisterBusIO>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <VL53L7CX_Probe+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007896:	f06f 0304 	mvn.w	r3, #4
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
 800789c:	e049      	b.n	8007932 <VL53L7CX_Probe+0xce>
  }
  else
  {
    CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L7CX_RANGING_SENSOR_Driver;
 800789e:	4a2d      	ldr	r2, [pc, #180]	; (8007954 <VL53L7CX_Probe+0xf0>)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	492d      	ldr	r1, [pc, #180]	; (8007958 <VL53L7CX_Probe+0xf4>)
 80078a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CUSTOM_RANGING_CompObj[Instance] = &VL53L7CXObj;
 80078a8:	4a2c      	ldr	r2, [pc, #176]	; (800795c <VL53L7CX_Probe+0xf8>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4928      	ldr	r1, [pc, #160]	; (8007950 <VL53L7CX_Probe+0xec>)
 80078ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if (VL53L7CX_ReadID(&VL53L7CXObj, &id) != VL53L7CX_OK)
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	4619      	mov	r1, r3
 80078b8:	4825      	ldr	r0, [pc, #148]	; (8007950 <VL53L7CX_Probe+0xec>)
 80078ba:	f7fb fdf4 	bl	80034a6 <VL53L7CX_ReadID>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <VL53L7CX_Probe+0x68>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80078c4:	f06f 0304 	mvn.w	r3, #4
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ca:	e032      	b.n	8007932 <VL53L7CX_Probe+0xce>
    }
    else if (id != VL53L7CX_ID)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f24f 0202 	movw	r2, #61442	; 0xf002
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <VL53L7CX_Probe+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80078d6:	f06f 0306 	mvn.w	r3, #6
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
 80078dc:	e029      	b.n	8007932 <VL53L7CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L7CX_OK)
 80078de:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <VL53L7CX_Probe+0xf0>)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	491c      	ldr	r1, [pc, #112]	; (800795c <VL53L7CX_Probe+0xf8>)
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <VL53L7CX_Probe+0x9e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80078fa:	f06f 0304 	mvn.w	r3, #4
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007900:	e017      	b.n	8007932 <VL53L7CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8007902:	4a14      	ldr	r2, [pc, #80]	; (8007954 <VL53L7CX_Probe+0xf0>)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	4913      	ldr	r1, [pc, #76]	; (800795c <VL53L7CX_Probe+0xf8>)
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
              &RANGING_SENSOR_Cap[Instance]) != VL53L7CX_OK)
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	0112      	lsls	r2, r2, #4
 8007918:	4911      	ldr	r1, [pc, #68]	; (8007960 <VL53L7CX_Probe+0xfc>)
 800791a:	440a      	add	r2, r1
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 800791c:	4611      	mov	r1, r2
 800791e:	4798      	blx	r3
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <VL53L7CX_Probe+0xca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007926:	f06f 0304 	mvn.w	r3, #4
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
 800792c:	e001      	b.n	8007932 <VL53L7CX_Probe+0xce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800792e:	2300      	movs	r3, #0
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007934:	4618      	mov	r0, r3
 8007936:	3728      	adds	r7, #40	; 0x28
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	080009c5 	.word	0x080009c5
 8007940:	08000a29 	.word	0x08000a29
 8007944:	08000a79 	.word	0x08000a79
 8007948:	08000add 	.word	0x08000add
 800794c:	08000b41 	.word	0x08000b41
 8007950:	200004d4 	.word	0x200004d4
 8007954:	200004c0 	.word	0x200004c0
 8007958:	20000004 	.word	0x20000004
 800795c:	200004bc 	.word	0x200004bc
 8007960:	200004c4 	.word	0x200004c4

08007964 <__errno>:
 8007964:	4b01      	ldr	r3, [pc, #4]	; (800796c <__errno+0x8>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000048 	.word	0x20000048

08007970 <__libc_init_array>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	4d0d      	ldr	r5, [pc, #52]	; (80079a8 <__libc_init_array+0x38>)
 8007974:	4c0d      	ldr	r4, [pc, #52]	; (80079ac <__libc_init_array+0x3c>)
 8007976:	1b64      	subs	r4, r4, r5
 8007978:	10a4      	asrs	r4, r4, #2
 800797a:	2600      	movs	r6, #0
 800797c:	42a6      	cmp	r6, r4
 800797e:	d109      	bne.n	8007994 <__libc_init_array+0x24>
 8007980:	4d0b      	ldr	r5, [pc, #44]	; (80079b0 <__libc_init_array+0x40>)
 8007982:	4c0c      	ldr	r4, [pc, #48]	; (80079b4 <__libc_init_array+0x44>)
 8007984:	f001 f890 	bl	8008aa8 <_init>
 8007988:	1b64      	subs	r4, r4, r5
 800798a:	10a4      	asrs	r4, r4, #2
 800798c:	2600      	movs	r6, #0
 800798e:	42a6      	cmp	r6, r4
 8007990:	d105      	bne.n	800799e <__libc_init_array+0x2e>
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	f855 3b04 	ldr.w	r3, [r5], #4
 8007998:	4798      	blx	r3
 800799a:	3601      	adds	r6, #1
 800799c:	e7ee      	b.n	800797c <__libc_init_array+0xc>
 800799e:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a2:	4798      	blx	r3
 80079a4:	3601      	adds	r6, #1
 80079a6:	e7f2      	b.n	800798e <__libc_init_array+0x1e>
 80079a8:	0801e438 	.word	0x0801e438
 80079ac:	0801e438 	.word	0x0801e438
 80079b0:	0801e438 	.word	0x0801e438
 80079b4:	0801e43c 	.word	0x0801e43c

080079b8 <memcpy>:
 80079b8:	440a      	add	r2, r1
 80079ba:	4291      	cmp	r1, r2
 80079bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80079c0:	d100      	bne.n	80079c4 <memcpy+0xc>
 80079c2:	4770      	bx	lr
 80079c4:	b510      	push	{r4, lr}
 80079c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ce:	4291      	cmp	r1, r2
 80079d0:	d1f9      	bne.n	80079c6 <memcpy+0xe>
 80079d2:	bd10      	pop	{r4, pc}

080079d4 <memset>:
 80079d4:	4402      	add	r2, r0
 80079d6:	4603      	mov	r3, r0
 80079d8:	4293      	cmp	r3, r2
 80079da:	d100      	bne.n	80079de <memset+0xa>
 80079dc:	4770      	bx	lr
 80079de:	f803 1b01 	strb.w	r1, [r3], #1
 80079e2:	e7f9      	b.n	80079d8 <memset+0x4>

080079e4 <iprintf>:
 80079e4:	b40f      	push	{r0, r1, r2, r3}
 80079e6:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <iprintf+0x2c>)
 80079e8:	b513      	push	{r0, r1, r4, lr}
 80079ea:	681c      	ldr	r4, [r3, #0]
 80079ec:	b124      	cbz	r4, 80079f8 <iprintf+0x14>
 80079ee:	69a3      	ldr	r3, [r4, #24]
 80079f0:	b913      	cbnz	r3, 80079f8 <iprintf+0x14>
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fa74 	bl	8007ee0 <__sinit>
 80079f8:	ab05      	add	r3, sp, #20
 80079fa:	9a04      	ldr	r2, [sp, #16]
 80079fc:	68a1      	ldr	r1, [r4, #8]
 80079fe:	9301      	str	r3, [sp, #4]
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fc7d 	bl	8008300 <_vfiprintf_r>
 8007a06:	b002      	add	sp, #8
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0c:	b004      	add	sp, #16
 8007a0e:	4770      	bx	lr
 8007a10:	20000048 	.word	0x20000048

08007a14 <putchar>:
 8007a14:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <putchar+0x28>)
 8007a16:	b513      	push	{r0, r1, r4, lr}
 8007a18:	681c      	ldr	r4, [r3, #0]
 8007a1a:	4601      	mov	r1, r0
 8007a1c:	b134      	cbz	r4, 8007a2c <putchar+0x18>
 8007a1e:	69a3      	ldr	r3, [r4, #24]
 8007a20:	b923      	cbnz	r3, 8007a2c <putchar+0x18>
 8007a22:	9001      	str	r0, [sp, #4]
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fa5b 	bl	8007ee0 <__sinit>
 8007a2a:	9901      	ldr	r1, [sp, #4]
 8007a2c:	68a2      	ldr	r2, [r4, #8]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	b002      	add	sp, #8
 8007a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a36:	f000 bf27 	b.w	8008888 <_putc_r>
 8007a3a:	bf00      	nop
 8007a3c:	20000048 	.word	0x20000048

08007a40 <_puts_r>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	460e      	mov	r6, r1
 8007a44:	4605      	mov	r5, r0
 8007a46:	b118      	cbz	r0, 8007a50 <_puts_r+0x10>
 8007a48:	6983      	ldr	r3, [r0, #24]
 8007a4a:	b90b      	cbnz	r3, 8007a50 <_puts_r+0x10>
 8007a4c:	f000 fa48 	bl	8007ee0 <__sinit>
 8007a50:	69ab      	ldr	r3, [r5, #24]
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	b913      	cbnz	r3, 8007a5c <_puts_r+0x1c>
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fa42 	bl	8007ee0 <__sinit>
 8007a5c:	4b2c      	ldr	r3, [pc, #176]	; (8007b10 <_puts_r+0xd0>)
 8007a5e:	429c      	cmp	r4, r3
 8007a60:	d120      	bne.n	8007aa4 <_puts_r+0x64>
 8007a62:	686c      	ldr	r4, [r5, #4]
 8007a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a66:	07db      	lsls	r3, r3, #31
 8007a68:	d405      	bmi.n	8007a76 <_puts_r+0x36>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	0598      	lsls	r0, r3, #22
 8007a6e:	d402      	bmi.n	8007a76 <_puts_r+0x36>
 8007a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a72:	f000 fad3 	bl	800801c <__retarget_lock_acquire_recursive>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	0719      	lsls	r1, r3, #28
 8007a7a:	d51d      	bpl.n	8007ab8 <_puts_r+0x78>
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	b1db      	cbz	r3, 8007ab8 <_puts_r+0x78>
 8007a80:	3e01      	subs	r6, #1
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	60a3      	str	r3, [r4, #8]
 8007a8c:	bb39      	cbnz	r1, 8007ade <_puts_r+0x9e>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da38      	bge.n	8007b04 <_puts_r+0xc4>
 8007a92:	4622      	mov	r2, r4
 8007a94:	210a      	movs	r1, #10
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 f848 	bl	8007b2c <__swbuf_r>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d011      	beq.n	8007ac4 <_puts_r+0x84>
 8007aa0:	250a      	movs	r5, #10
 8007aa2:	e011      	b.n	8007ac8 <_puts_r+0x88>
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <_puts_r+0xd4>)
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	d101      	bne.n	8007aae <_puts_r+0x6e>
 8007aaa:	68ac      	ldr	r4, [r5, #8]
 8007aac:	e7da      	b.n	8007a64 <_puts_r+0x24>
 8007aae:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <_puts_r+0xd8>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	bf08      	it	eq
 8007ab4:	68ec      	ldreq	r4, [r5, #12]
 8007ab6:	e7d5      	b.n	8007a64 <_puts_r+0x24>
 8007ab8:	4621      	mov	r1, r4
 8007aba:	4628      	mov	r0, r5
 8007abc:	f000 f888 	bl	8007bd0 <__swsetup_r>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d0dd      	beq.n	8007a80 <_puts_r+0x40>
 8007ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aca:	07da      	lsls	r2, r3, #31
 8007acc:	d405      	bmi.n	8007ada <_puts_r+0x9a>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	059b      	lsls	r3, r3, #22
 8007ad2:	d402      	bmi.n	8007ada <_puts_r+0x9a>
 8007ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ad6:	f000 faa2 	bl	800801e <__retarget_lock_release_recursive>
 8007ada:	4628      	mov	r0, r5
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	da04      	bge.n	8007aec <_puts_r+0xac>
 8007ae2:	69a2      	ldr	r2, [r4, #24]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	dc06      	bgt.n	8007af6 <_puts_r+0xb6>
 8007ae8:	290a      	cmp	r1, #10
 8007aea:	d004      	beq.n	8007af6 <_puts_r+0xb6>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	7019      	strb	r1, [r3, #0]
 8007af4:	e7c5      	b.n	8007a82 <_puts_r+0x42>
 8007af6:	4622      	mov	r2, r4
 8007af8:	4628      	mov	r0, r5
 8007afa:	f000 f817 	bl	8007b2c <__swbuf_r>
 8007afe:	3001      	adds	r0, #1
 8007b00:	d1bf      	bne.n	8007a82 <_puts_r+0x42>
 8007b02:	e7df      	b.n	8007ac4 <_puts_r+0x84>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	250a      	movs	r5, #10
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	6022      	str	r2, [r4, #0]
 8007b0c:	701d      	strb	r5, [r3, #0]
 8007b0e:	e7db      	b.n	8007ac8 <_puts_r+0x88>
 8007b10:	0801e3bc 	.word	0x0801e3bc
 8007b14:	0801e3dc 	.word	0x0801e3dc
 8007b18:	0801e39c 	.word	0x0801e39c

08007b1c <puts>:
 8007b1c:	4b02      	ldr	r3, [pc, #8]	; (8007b28 <puts+0xc>)
 8007b1e:	4601      	mov	r1, r0
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	f7ff bf8d 	b.w	8007a40 <_puts_r>
 8007b26:	bf00      	nop
 8007b28:	20000048 	.word	0x20000048

08007b2c <__swbuf_r>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	460e      	mov	r6, r1
 8007b30:	4614      	mov	r4, r2
 8007b32:	4605      	mov	r5, r0
 8007b34:	b118      	cbz	r0, 8007b3e <__swbuf_r+0x12>
 8007b36:	6983      	ldr	r3, [r0, #24]
 8007b38:	b90b      	cbnz	r3, 8007b3e <__swbuf_r+0x12>
 8007b3a:	f000 f9d1 	bl	8007ee0 <__sinit>
 8007b3e:	4b21      	ldr	r3, [pc, #132]	; (8007bc4 <__swbuf_r+0x98>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	d12b      	bne.n	8007b9c <__swbuf_r+0x70>
 8007b44:	686c      	ldr	r4, [r5, #4]
 8007b46:	69a3      	ldr	r3, [r4, #24]
 8007b48:	60a3      	str	r3, [r4, #8]
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	071a      	lsls	r2, r3, #28
 8007b4e:	d52f      	bpl.n	8007bb0 <__swbuf_r+0x84>
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	b36b      	cbz	r3, 8007bb0 <__swbuf_r+0x84>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	6820      	ldr	r0, [r4, #0]
 8007b58:	1ac0      	subs	r0, r0, r3
 8007b5a:	6963      	ldr	r3, [r4, #20]
 8007b5c:	b2f6      	uxtb	r6, r6
 8007b5e:	4283      	cmp	r3, r0
 8007b60:	4637      	mov	r7, r6
 8007b62:	dc04      	bgt.n	8007b6e <__swbuf_r+0x42>
 8007b64:	4621      	mov	r1, r4
 8007b66:	4628      	mov	r0, r5
 8007b68:	f000 f926 	bl	8007db8 <_fflush_r>
 8007b6c:	bb30      	cbnz	r0, 8007bbc <__swbuf_r+0x90>
 8007b6e:	68a3      	ldr	r3, [r4, #8]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	60a3      	str	r3, [r4, #8]
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	6022      	str	r2, [r4, #0]
 8007b7a:	701e      	strb	r6, [r3, #0]
 8007b7c:	6963      	ldr	r3, [r4, #20]
 8007b7e:	3001      	adds	r0, #1
 8007b80:	4283      	cmp	r3, r0
 8007b82:	d004      	beq.n	8007b8e <__swbuf_r+0x62>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	07db      	lsls	r3, r3, #31
 8007b88:	d506      	bpl.n	8007b98 <__swbuf_r+0x6c>
 8007b8a:	2e0a      	cmp	r6, #10
 8007b8c:	d104      	bne.n	8007b98 <__swbuf_r+0x6c>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 f911 	bl	8007db8 <_fflush_r>
 8007b96:	b988      	cbnz	r0, 8007bbc <__swbuf_r+0x90>
 8007b98:	4638      	mov	r0, r7
 8007b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <__swbuf_r+0x9c>)
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	d101      	bne.n	8007ba6 <__swbuf_r+0x7a>
 8007ba2:	68ac      	ldr	r4, [r5, #8]
 8007ba4:	e7cf      	b.n	8007b46 <__swbuf_r+0x1a>
 8007ba6:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <__swbuf_r+0xa0>)
 8007ba8:	429c      	cmp	r4, r3
 8007baa:	bf08      	it	eq
 8007bac:	68ec      	ldreq	r4, [r5, #12]
 8007bae:	e7ca      	b.n	8007b46 <__swbuf_r+0x1a>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f000 f80c 	bl	8007bd0 <__swsetup_r>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d0cb      	beq.n	8007b54 <__swbuf_r+0x28>
 8007bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8007bc0:	e7ea      	b.n	8007b98 <__swbuf_r+0x6c>
 8007bc2:	bf00      	nop
 8007bc4:	0801e3bc 	.word	0x0801e3bc
 8007bc8:	0801e3dc 	.word	0x0801e3dc
 8007bcc:	0801e39c 	.word	0x0801e39c

08007bd0 <__swsetup_r>:
 8007bd0:	4b32      	ldr	r3, [pc, #200]	; (8007c9c <__swsetup_r+0xcc>)
 8007bd2:	b570      	push	{r4, r5, r6, lr}
 8007bd4:	681d      	ldr	r5, [r3, #0]
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	460c      	mov	r4, r1
 8007bda:	b125      	cbz	r5, 8007be6 <__swsetup_r+0x16>
 8007bdc:	69ab      	ldr	r3, [r5, #24]
 8007bde:	b913      	cbnz	r3, 8007be6 <__swsetup_r+0x16>
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 f97d 	bl	8007ee0 <__sinit>
 8007be6:	4b2e      	ldr	r3, [pc, #184]	; (8007ca0 <__swsetup_r+0xd0>)
 8007be8:	429c      	cmp	r4, r3
 8007bea:	d10f      	bne.n	8007c0c <__swsetup_r+0x3c>
 8007bec:	686c      	ldr	r4, [r5, #4]
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bf4:	0719      	lsls	r1, r3, #28
 8007bf6:	d42c      	bmi.n	8007c52 <__swsetup_r+0x82>
 8007bf8:	06dd      	lsls	r5, r3, #27
 8007bfa:	d411      	bmi.n	8007c20 <__swsetup_r+0x50>
 8007bfc:	2309      	movs	r3, #9
 8007bfe:	6033      	str	r3, [r6, #0]
 8007c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0a:	e03e      	b.n	8007c8a <__swsetup_r+0xba>
 8007c0c:	4b25      	ldr	r3, [pc, #148]	; (8007ca4 <__swsetup_r+0xd4>)
 8007c0e:	429c      	cmp	r4, r3
 8007c10:	d101      	bne.n	8007c16 <__swsetup_r+0x46>
 8007c12:	68ac      	ldr	r4, [r5, #8]
 8007c14:	e7eb      	b.n	8007bee <__swsetup_r+0x1e>
 8007c16:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <__swsetup_r+0xd8>)
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	bf08      	it	eq
 8007c1c:	68ec      	ldreq	r4, [r5, #12]
 8007c1e:	e7e6      	b.n	8007bee <__swsetup_r+0x1e>
 8007c20:	0758      	lsls	r0, r3, #29
 8007c22:	d512      	bpl.n	8007c4a <__swsetup_r+0x7a>
 8007c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c26:	b141      	cbz	r1, 8007c3a <__swsetup_r+0x6a>
 8007c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c2c:	4299      	cmp	r1, r3
 8007c2e:	d002      	beq.n	8007c36 <__swsetup_r+0x66>
 8007c30:	4630      	mov	r0, r6
 8007c32:	f000 fa5b 	bl	80080ec <_free_r>
 8007c36:	2300      	movs	r3, #0
 8007c38:	6363      	str	r3, [r4, #52]	; 0x34
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	2300      	movs	r3, #0
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	f043 0308 	orr.w	r3, r3, #8
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	b94b      	cbnz	r3, 8007c6a <__swsetup_r+0x9a>
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c60:	d003      	beq.n	8007c6a <__swsetup_r+0x9a>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4630      	mov	r0, r6
 8007c66:	f000 fa01 	bl	800806c <__smakebuf_r>
 8007c6a:	89a0      	ldrh	r0, [r4, #12]
 8007c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c70:	f010 0301 	ands.w	r3, r0, #1
 8007c74:	d00a      	beq.n	8007c8c <__swsetup_r+0xbc>
 8007c76:	2300      	movs	r3, #0
 8007c78:	60a3      	str	r3, [r4, #8]
 8007c7a:	6963      	ldr	r3, [r4, #20]
 8007c7c:	425b      	negs	r3, r3
 8007c7e:	61a3      	str	r3, [r4, #24]
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	b943      	cbnz	r3, 8007c96 <__swsetup_r+0xc6>
 8007c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c88:	d1ba      	bne.n	8007c00 <__swsetup_r+0x30>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	0781      	lsls	r1, r0, #30
 8007c8e:	bf58      	it	pl
 8007c90:	6963      	ldrpl	r3, [r4, #20]
 8007c92:	60a3      	str	r3, [r4, #8]
 8007c94:	e7f4      	b.n	8007c80 <__swsetup_r+0xb0>
 8007c96:	2000      	movs	r0, #0
 8007c98:	e7f7      	b.n	8007c8a <__swsetup_r+0xba>
 8007c9a:	bf00      	nop
 8007c9c:	20000048 	.word	0x20000048
 8007ca0:	0801e3bc 	.word	0x0801e3bc
 8007ca4:	0801e3dc 	.word	0x0801e3dc
 8007ca8:	0801e39c 	.word	0x0801e39c

08007cac <__sflush_r>:
 8007cac:	898a      	ldrh	r2, [r1, #12]
 8007cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	0710      	lsls	r0, r2, #28
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	d458      	bmi.n	8007d6c <__sflush_r+0xc0>
 8007cba:	684b      	ldr	r3, [r1, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dc05      	bgt.n	8007ccc <__sflush_r+0x20>
 8007cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dc02      	bgt.n	8007ccc <__sflush_r+0x20>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	d0f9      	beq.n	8007cc6 <__sflush_r+0x1a>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cd8:	682f      	ldr	r7, [r5, #0]
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	d032      	beq.n	8007d44 <__sflush_r+0x98>
 8007cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	075a      	lsls	r2, r3, #29
 8007ce4:	d505      	bpl.n	8007cf2 <__sflush_r+0x46>
 8007ce6:	6863      	ldr	r3, [r4, #4]
 8007ce8:	1ac0      	subs	r0, r0, r3
 8007cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cec:	b10b      	cbz	r3, 8007cf2 <__sflush_r+0x46>
 8007cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cf0:	1ac0      	subs	r0, r0, r3
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf8:	6a21      	ldr	r1, [r4, #32]
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b0      	blx	r6
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	d106      	bne.n	8007d12 <__sflush_r+0x66>
 8007d04:	6829      	ldr	r1, [r5, #0]
 8007d06:	291d      	cmp	r1, #29
 8007d08:	d82c      	bhi.n	8007d64 <__sflush_r+0xb8>
 8007d0a:	4a2a      	ldr	r2, [pc, #168]	; (8007db4 <__sflush_r+0x108>)
 8007d0c:	40ca      	lsrs	r2, r1
 8007d0e:	07d6      	lsls	r6, r2, #31
 8007d10:	d528      	bpl.n	8007d64 <__sflush_r+0xb8>
 8007d12:	2200      	movs	r2, #0
 8007d14:	6062      	str	r2, [r4, #4]
 8007d16:	04d9      	lsls	r1, r3, #19
 8007d18:	6922      	ldr	r2, [r4, #16]
 8007d1a:	6022      	str	r2, [r4, #0]
 8007d1c:	d504      	bpl.n	8007d28 <__sflush_r+0x7c>
 8007d1e:	1c42      	adds	r2, r0, #1
 8007d20:	d101      	bne.n	8007d26 <__sflush_r+0x7a>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	b903      	cbnz	r3, 8007d28 <__sflush_r+0x7c>
 8007d26:	6560      	str	r0, [r4, #84]	; 0x54
 8007d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d2a:	602f      	str	r7, [r5, #0]
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d0ca      	beq.n	8007cc6 <__sflush_r+0x1a>
 8007d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d34:	4299      	cmp	r1, r3
 8007d36:	d002      	beq.n	8007d3e <__sflush_r+0x92>
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f000 f9d7 	bl	80080ec <_free_r>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	6360      	str	r0, [r4, #52]	; 0x34
 8007d42:	e7c1      	b.n	8007cc8 <__sflush_r+0x1c>
 8007d44:	6a21      	ldr	r1, [r4, #32]
 8007d46:	2301      	movs	r3, #1
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b0      	blx	r6
 8007d4c:	1c41      	adds	r1, r0, #1
 8007d4e:	d1c7      	bne.n	8007ce0 <__sflush_r+0x34>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0c4      	beq.n	8007ce0 <__sflush_r+0x34>
 8007d56:	2b1d      	cmp	r3, #29
 8007d58:	d001      	beq.n	8007d5e <__sflush_r+0xb2>
 8007d5a:	2b16      	cmp	r3, #22
 8007d5c:	d101      	bne.n	8007d62 <__sflush_r+0xb6>
 8007d5e:	602f      	str	r7, [r5, #0]
 8007d60:	e7b1      	b.n	8007cc6 <__sflush_r+0x1a>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	e7ad      	b.n	8007cc8 <__sflush_r+0x1c>
 8007d6c:	690f      	ldr	r7, [r1, #16]
 8007d6e:	2f00      	cmp	r7, #0
 8007d70:	d0a9      	beq.n	8007cc6 <__sflush_r+0x1a>
 8007d72:	0793      	lsls	r3, r2, #30
 8007d74:	680e      	ldr	r6, [r1, #0]
 8007d76:	bf08      	it	eq
 8007d78:	694b      	ldreq	r3, [r1, #20]
 8007d7a:	600f      	str	r7, [r1, #0]
 8007d7c:	bf18      	it	ne
 8007d7e:	2300      	movne	r3, #0
 8007d80:	eba6 0807 	sub.w	r8, r6, r7
 8007d84:	608b      	str	r3, [r1, #8]
 8007d86:	f1b8 0f00 	cmp.w	r8, #0
 8007d8a:	dd9c      	ble.n	8007cc6 <__sflush_r+0x1a>
 8007d8c:	6a21      	ldr	r1, [r4, #32]
 8007d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d90:	4643      	mov	r3, r8
 8007d92:	463a      	mov	r2, r7
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b0      	blx	r6
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	dc06      	bgt.n	8007daa <__sflush_r+0xfe>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	e78e      	b.n	8007cc8 <__sflush_r+0x1c>
 8007daa:	4407      	add	r7, r0
 8007dac:	eba8 0800 	sub.w	r8, r8, r0
 8007db0:	e7e9      	b.n	8007d86 <__sflush_r+0xda>
 8007db2:	bf00      	nop
 8007db4:	20400001 	.word	0x20400001

08007db8 <_fflush_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	690b      	ldr	r3, [r1, #16]
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	b913      	cbnz	r3, 8007dc8 <_fflush_r+0x10>
 8007dc2:	2500      	movs	r5, #0
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	b118      	cbz	r0, 8007dd2 <_fflush_r+0x1a>
 8007dca:	6983      	ldr	r3, [r0, #24]
 8007dcc:	b90b      	cbnz	r3, 8007dd2 <_fflush_r+0x1a>
 8007dce:	f000 f887 	bl	8007ee0 <__sinit>
 8007dd2:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <_fflush_r+0x6c>)
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	d11b      	bne.n	8007e10 <_fflush_r+0x58>
 8007dd8:	686c      	ldr	r4, [r5, #4]
 8007dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0ef      	beq.n	8007dc2 <_fflush_r+0xa>
 8007de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007de4:	07d0      	lsls	r0, r2, #31
 8007de6:	d404      	bmi.n	8007df2 <_fflush_r+0x3a>
 8007de8:	0599      	lsls	r1, r3, #22
 8007dea:	d402      	bmi.n	8007df2 <_fflush_r+0x3a>
 8007dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dee:	f000 f915 	bl	800801c <__retarget_lock_acquire_recursive>
 8007df2:	4628      	mov	r0, r5
 8007df4:	4621      	mov	r1, r4
 8007df6:	f7ff ff59 	bl	8007cac <__sflush_r>
 8007dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dfc:	07da      	lsls	r2, r3, #31
 8007dfe:	4605      	mov	r5, r0
 8007e00:	d4e0      	bmi.n	8007dc4 <_fflush_r+0xc>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	059b      	lsls	r3, r3, #22
 8007e06:	d4dd      	bmi.n	8007dc4 <_fflush_r+0xc>
 8007e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e0a:	f000 f908 	bl	800801e <__retarget_lock_release_recursive>
 8007e0e:	e7d9      	b.n	8007dc4 <_fflush_r+0xc>
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <_fflush_r+0x70>)
 8007e12:	429c      	cmp	r4, r3
 8007e14:	d101      	bne.n	8007e1a <_fflush_r+0x62>
 8007e16:	68ac      	ldr	r4, [r5, #8]
 8007e18:	e7df      	b.n	8007dda <_fflush_r+0x22>
 8007e1a:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <_fflush_r+0x74>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	bf08      	it	eq
 8007e20:	68ec      	ldreq	r4, [r5, #12]
 8007e22:	e7da      	b.n	8007dda <_fflush_r+0x22>
 8007e24:	0801e3bc 	.word	0x0801e3bc
 8007e28:	0801e3dc 	.word	0x0801e3dc
 8007e2c:	0801e39c 	.word	0x0801e39c

08007e30 <std>:
 8007e30:	2300      	movs	r3, #0
 8007e32:	b510      	push	{r4, lr}
 8007e34:	4604      	mov	r4, r0
 8007e36:	e9c0 3300 	strd	r3, r3, [r0]
 8007e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e3e:	6083      	str	r3, [r0, #8]
 8007e40:	8181      	strh	r1, [r0, #12]
 8007e42:	6643      	str	r3, [r0, #100]	; 0x64
 8007e44:	81c2      	strh	r2, [r0, #14]
 8007e46:	6183      	str	r3, [r0, #24]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	2208      	movs	r2, #8
 8007e4c:	305c      	adds	r0, #92	; 0x5c
 8007e4e:	f7ff fdc1 	bl	80079d4 <memset>
 8007e52:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <std+0x38>)
 8007e54:	6263      	str	r3, [r4, #36]	; 0x24
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <std+0x3c>)
 8007e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e5a:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <std+0x40>)
 8007e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <std+0x44>)
 8007e60:	6224      	str	r4, [r4, #32]
 8007e62:	6323      	str	r3, [r4, #48]	; 0x30
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	08008939 	.word	0x08008939
 8007e6c:	0800895b 	.word	0x0800895b
 8007e70:	08008993 	.word	0x08008993
 8007e74:	080089b7 	.word	0x080089b7

08007e78 <_cleanup_r>:
 8007e78:	4901      	ldr	r1, [pc, #4]	; (8007e80 <_cleanup_r+0x8>)
 8007e7a:	f000 b8af 	b.w	8007fdc <_fwalk_reent>
 8007e7e:	bf00      	nop
 8007e80:	08007db9 	.word	0x08007db9

08007e84 <__sfmoreglue>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	2268      	movs	r2, #104	; 0x68
 8007e88:	1e4d      	subs	r5, r1, #1
 8007e8a:	4355      	muls	r5, r2
 8007e8c:	460e      	mov	r6, r1
 8007e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e92:	f000 f997 	bl	80081c4 <_malloc_r>
 8007e96:	4604      	mov	r4, r0
 8007e98:	b140      	cbz	r0, 8007eac <__sfmoreglue+0x28>
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8007ea0:	300c      	adds	r0, #12
 8007ea2:	60a0      	str	r0, [r4, #8]
 8007ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ea8:	f7ff fd94 	bl	80079d4 <memset>
 8007eac:	4620      	mov	r0, r4
 8007eae:	bd70      	pop	{r4, r5, r6, pc}

08007eb0 <__sfp_lock_acquire>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__sfp_lock_acquire+0x8>)
 8007eb2:	f000 b8b3 	b.w	800801c <__retarget_lock_acquire_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	20000e29 	.word	0x20000e29

08007ebc <__sfp_lock_release>:
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <__sfp_lock_release+0x8>)
 8007ebe:	f000 b8ae 	b.w	800801e <__retarget_lock_release_recursive>
 8007ec2:	bf00      	nop
 8007ec4:	20000e29 	.word	0x20000e29

08007ec8 <__sinit_lock_acquire>:
 8007ec8:	4801      	ldr	r0, [pc, #4]	; (8007ed0 <__sinit_lock_acquire+0x8>)
 8007eca:	f000 b8a7 	b.w	800801c <__retarget_lock_acquire_recursive>
 8007ece:	bf00      	nop
 8007ed0:	20000e2a 	.word	0x20000e2a

08007ed4 <__sinit_lock_release>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__sinit_lock_release+0x8>)
 8007ed6:	f000 b8a2 	b.w	800801e <__retarget_lock_release_recursive>
 8007eda:	bf00      	nop
 8007edc:	20000e2a 	.word	0x20000e2a

08007ee0 <__sinit>:
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	f7ff fff0 	bl	8007ec8 <__sinit_lock_acquire>
 8007ee8:	69a3      	ldr	r3, [r4, #24]
 8007eea:	b11b      	cbz	r3, 8007ef4 <__sinit+0x14>
 8007eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef0:	f7ff bff0 	b.w	8007ed4 <__sinit_lock_release>
 8007ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8007efa:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <__sinit+0x68>)
 8007efc:	4a13      	ldr	r2, [pc, #76]	; (8007f4c <__sinit+0x6c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f02:	42a3      	cmp	r3, r4
 8007f04:	bf04      	itt	eq
 8007f06:	2301      	moveq	r3, #1
 8007f08:	61a3      	streq	r3, [r4, #24]
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 f820 	bl	8007f50 <__sfp>
 8007f10:	6060      	str	r0, [r4, #4]
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 f81c 	bl	8007f50 <__sfp>
 8007f18:	60a0      	str	r0, [r4, #8]
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 f818 	bl	8007f50 <__sfp>
 8007f20:	2200      	movs	r2, #0
 8007f22:	60e0      	str	r0, [r4, #12]
 8007f24:	2104      	movs	r1, #4
 8007f26:	6860      	ldr	r0, [r4, #4]
 8007f28:	f7ff ff82 	bl	8007e30 <std>
 8007f2c:	68a0      	ldr	r0, [r4, #8]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	2109      	movs	r1, #9
 8007f32:	f7ff ff7d 	bl	8007e30 <std>
 8007f36:	68e0      	ldr	r0, [r4, #12]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	2112      	movs	r1, #18
 8007f3c:	f7ff ff78 	bl	8007e30 <std>
 8007f40:	2301      	movs	r3, #1
 8007f42:	61a3      	str	r3, [r4, #24]
 8007f44:	e7d2      	b.n	8007eec <__sinit+0xc>
 8007f46:	bf00      	nop
 8007f48:	0801e398 	.word	0x0801e398
 8007f4c:	08007e79 	.word	0x08007e79

08007f50 <__sfp>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	4607      	mov	r7, r0
 8007f54:	f7ff ffac 	bl	8007eb0 <__sfp_lock_acquire>
 8007f58:	4b1e      	ldr	r3, [pc, #120]	; (8007fd4 <__sfp+0x84>)
 8007f5a:	681e      	ldr	r6, [r3, #0]
 8007f5c:	69b3      	ldr	r3, [r6, #24]
 8007f5e:	b913      	cbnz	r3, 8007f66 <__sfp+0x16>
 8007f60:	4630      	mov	r0, r6
 8007f62:	f7ff ffbd 	bl	8007ee0 <__sinit>
 8007f66:	3648      	adds	r6, #72	; 0x48
 8007f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	d503      	bpl.n	8007f78 <__sfp+0x28>
 8007f70:	6833      	ldr	r3, [r6, #0]
 8007f72:	b30b      	cbz	r3, 8007fb8 <__sfp+0x68>
 8007f74:	6836      	ldr	r6, [r6, #0]
 8007f76:	e7f7      	b.n	8007f68 <__sfp+0x18>
 8007f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f7c:	b9d5      	cbnz	r5, 8007fb4 <__sfp+0x64>
 8007f7e:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <__sfp+0x88>)
 8007f80:	60e3      	str	r3, [r4, #12]
 8007f82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f86:	6665      	str	r5, [r4, #100]	; 0x64
 8007f88:	f000 f847 	bl	800801a <__retarget_lock_init_recursive>
 8007f8c:	f7ff ff96 	bl	8007ebc <__sfp_lock_release>
 8007f90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f98:	6025      	str	r5, [r4, #0]
 8007f9a:	61a5      	str	r5, [r4, #24]
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fa4:	f7ff fd16 	bl	80079d4 <memset>
 8007fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb4:	3468      	adds	r4, #104	; 0x68
 8007fb6:	e7d9      	b.n	8007f6c <__sfp+0x1c>
 8007fb8:	2104      	movs	r1, #4
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ff62 	bl	8007e84 <__sfmoreglue>
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	6030      	str	r0, [r6, #0]
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1d5      	bne.n	8007f74 <__sfp+0x24>
 8007fc8:	f7ff ff78 	bl	8007ebc <__sfp_lock_release>
 8007fcc:	230c      	movs	r3, #12
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	e7ee      	b.n	8007fb0 <__sfp+0x60>
 8007fd2:	bf00      	nop
 8007fd4:	0801e398 	.word	0x0801e398
 8007fd8:	ffff0001 	.word	0xffff0001

08007fdc <_fwalk_reent>:
 8007fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	4688      	mov	r8, r1
 8007fe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fe8:	2700      	movs	r7, #0
 8007fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fee:	f1b9 0901 	subs.w	r9, r9, #1
 8007ff2:	d505      	bpl.n	8008000 <_fwalk_reent+0x24>
 8007ff4:	6824      	ldr	r4, [r4, #0]
 8007ff6:	2c00      	cmp	r4, #0
 8007ff8:	d1f7      	bne.n	8007fea <_fwalk_reent+0xe>
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008000:	89ab      	ldrh	r3, [r5, #12]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d907      	bls.n	8008016 <_fwalk_reent+0x3a>
 8008006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800800a:	3301      	adds	r3, #1
 800800c:	d003      	beq.n	8008016 <_fwalk_reent+0x3a>
 800800e:	4629      	mov	r1, r5
 8008010:	4630      	mov	r0, r6
 8008012:	47c0      	blx	r8
 8008014:	4307      	orrs	r7, r0
 8008016:	3568      	adds	r5, #104	; 0x68
 8008018:	e7e9      	b.n	8007fee <_fwalk_reent+0x12>

0800801a <__retarget_lock_init_recursive>:
 800801a:	4770      	bx	lr

0800801c <__retarget_lock_acquire_recursive>:
 800801c:	4770      	bx	lr

0800801e <__retarget_lock_release_recursive>:
 800801e:	4770      	bx	lr

08008020 <__swhatbuf_r>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	460e      	mov	r6, r1
 8008024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008028:	2900      	cmp	r1, #0
 800802a:	b096      	sub	sp, #88	; 0x58
 800802c:	4614      	mov	r4, r2
 800802e:	461d      	mov	r5, r3
 8008030:	da08      	bge.n	8008044 <__swhatbuf_r+0x24>
 8008032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	602a      	str	r2, [r5, #0]
 800803a:	061a      	lsls	r2, r3, #24
 800803c:	d410      	bmi.n	8008060 <__swhatbuf_r+0x40>
 800803e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008042:	e00e      	b.n	8008062 <__swhatbuf_r+0x42>
 8008044:	466a      	mov	r2, sp
 8008046:	f000 fcdd 	bl	8008a04 <_fstat_r>
 800804a:	2800      	cmp	r0, #0
 800804c:	dbf1      	blt.n	8008032 <__swhatbuf_r+0x12>
 800804e:	9a01      	ldr	r2, [sp, #4]
 8008050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008058:	425a      	negs	r2, r3
 800805a:	415a      	adcs	r2, r3
 800805c:	602a      	str	r2, [r5, #0]
 800805e:	e7ee      	b.n	800803e <__swhatbuf_r+0x1e>
 8008060:	2340      	movs	r3, #64	; 0x40
 8008062:	2000      	movs	r0, #0
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	b016      	add	sp, #88	; 0x58
 8008068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800806c <__smakebuf_r>:
 800806c:	898b      	ldrh	r3, [r1, #12]
 800806e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008070:	079d      	lsls	r5, r3, #30
 8008072:	4606      	mov	r6, r0
 8008074:	460c      	mov	r4, r1
 8008076:	d507      	bpl.n	8008088 <__smakebuf_r+0x1c>
 8008078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	6123      	str	r3, [r4, #16]
 8008080:	2301      	movs	r3, #1
 8008082:	6163      	str	r3, [r4, #20]
 8008084:	b002      	add	sp, #8
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	ab01      	add	r3, sp, #4
 800808a:	466a      	mov	r2, sp
 800808c:	f7ff ffc8 	bl	8008020 <__swhatbuf_r>
 8008090:	9900      	ldr	r1, [sp, #0]
 8008092:	4605      	mov	r5, r0
 8008094:	4630      	mov	r0, r6
 8008096:	f000 f895 	bl	80081c4 <_malloc_r>
 800809a:	b948      	cbnz	r0, 80080b0 <__smakebuf_r+0x44>
 800809c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a0:	059a      	lsls	r2, r3, #22
 80080a2:	d4ef      	bmi.n	8008084 <__smakebuf_r+0x18>
 80080a4:	f023 0303 	bic.w	r3, r3, #3
 80080a8:	f043 0302 	orr.w	r3, r3, #2
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	e7e3      	b.n	8008078 <__smakebuf_r+0xc>
 80080b0:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <__smakebuf_r+0x7c>)
 80080b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	6020      	str	r0, [r4, #0]
 80080b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	9b00      	ldr	r3, [sp, #0]
 80080c0:	6163      	str	r3, [r4, #20]
 80080c2:	9b01      	ldr	r3, [sp, #4]
 80080c4:	6120      	str	r0, [r4, #16]
 80080c6:	b15b      	cbz	r3, 80080e0 <__smakebuf_r+0x74>
 80080c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080cc:	4630      	mov	r0, r6
 80080ce:	f000 fcab 	bl	8008a28 <_isatty_r>
 80080d2:	b128      	cbz	r0, 80080e0 <__smakebuf_r+0x74>
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	81a3      	strh	r3, [r4, #12]
 80080e0:	89a0      	ldrh	r0, [r4, #12]
 80080e2:	4305      	orrs	r5, r0
 80080e4:	81a5      	strh	r5, [r4, #12]
 80080e6:	e7cd      	b.n	8008084 <__smakebuf_r+0x18>
 80080e8:	08007e79 	.word	0x08007e79

080080ec <_free_r>:
 80080ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ee:	2900      	cmp	r1, #0
 80080f0:	d044      	beq.n	800817c <_free_r+0x90>
 80080f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f6:	9001      	str	r0, [sp, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f1a1 0404 	sub.w	r4, r1, #4
 80080fe:	bfb8      	it	lt
 8008100:	18e4      	addlt	r4, r4, r3
 8008102:	f000 fcb3 	bl	8008a6c <__malloc_lock>
 8008106:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <_free_r+0x94>)
 8008108:	9801      	ldr	r0, [sp, #4]
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	b933      	cbnz	r3, 800811c <_free_r+0x30>
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	6014      	str	r4, [r2, #0]
 8008112:	b003      	add	sp, #12
 8008114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008118:	f000 bcae 	b.w	8008a78 <__malloc_unlock>
 800811c:	42a3      	cmp	r3, r4
 800811e:	d908      	bls.n	8008132 <_free_r+0x46>
 8008120:	6825      	ldr	r5, [r4, #0]
 8008122:	1961      	adds	r1, r4, r5
 8008124:	428b      	cmp	r3, r1
 8008126:	bf01      	itttt	eq
 8008128:	6819      	ldreq	r1, [r3, #0]
 800812a:	685b      	ldreq	r3, [r3, #4]
 800812c:	1949      	addeq	r1, r1, r5
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	e7ed      	b.n	800810e <_free_r+0x22>
 8008132:	461a      	mov	r2, r3
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b10b      	cbz	r3, 800813c <_free_r+0x50>
 8008138:	42a3      	cmp	r3, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x46>
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	1855      	adds	r5, r2, r1
 8008140:	42a5      	cmp	r5, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x70>
 8008144:	6824      	ldr	r4, [r4, #0]
 8008146:	4421      	add	r1, r4
 8008148:	1854      	adds	r4, r2, r1
 800814a:	42a3      	cmp	r3, r4
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	d1e0      	bne.n	8008112 <_free_r+0x26>
 8008150:	681c      	ldr	r4, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	6053      	str	r3, [r2, #4]
 8008156:	4421      	add	r1, r4
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	e7da      	b.n	8008112 <_free_r+0x26>
 800815c:	d902      	bls.n	8008164 <_free_r+0x78>
 800815e:	230c      	movs	r3, #12
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	e7d6      	b.n	8008112 <_free_r+0x26>
 8008164:	6825      	ldr	r5, [r4, #0]
 8008166:	1961      	adds	r1, r4, r5
 8008168:	428b      	cmp	r3, r1
 800816a:	bf04      	itt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	bf04      	itt	eq
 8008174:	1949      	addeq	r1, r1, r5
 8008176:	6021      	streq	r1, [r4, #0]
 8008178:	6054      	str	r4, [r2, #4]
 800817a:	e7ca      	b.n	8008112 <_free_r+0x26>
 800817c:	b003      	add	sp, #12
 800817e:	bd30      	pop	{r4, r5, pc}
 8008180:	20000e2c 	.word	0x20000e2c

08008184 <sbrk_aligned>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4e0e      	ldr	r6, [pc, #56]	; (80081c0 <sbrk_aligned+0x3c>)
 8008188:	460c      	mov	r4, r1
 800818a:	6831      	ldr	r1, [r6, #0]
 800818c:	4605      	mov	r5, r0
 800818e:	b911      	cbnz	r1, 8008196 <sbrk_aligned+0x12>
 8008190:	f000 fbc2 	bl	8008918 <_sbrk_r>
 8008194:	6030      	str	r0, [r6, #0]
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f000 fbbd 	bl	8008918 <_sbrk_r>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	d00a      	beq.n	80081b8 <sbrk_aligned+0x34>
 80081a2:	1cc4      	adds	r4, r0, #3
 80081a4:	f024 0403 	bic.w	r4, r4, #3
 80081a8:	42a0      	cmp	r0, r4
 80081aa:	d007      	beq.n	80081bc <sbrk_aligned+0x38>
 80081ac:	1a21      	subs	r1, r4, r0
 80081ae:	4628      	mov	r0, r5
 80081b0:	f000 fbb2 	bl	8008918 <_sbrk_r>
 80081b4:	3001      	adds	r0, #1
 80081b6:	d101      	bne.n	80081bc <sbrk_aligned+0x38>
 80081b8:	f04f 34ff 	mov.w	r4, #4294967295
 80081bc:	4620      	mov	r0, r4
 80081be:	bd70      	pop	{r4, r5, r6, pc}
 80081c0:	20000e30 	.word	0x20000e30

080081c4 <_malloc_r>:
 80081c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c8:	1ccd      	adds	r5, r1, #3
 80081ca:	f025 0503 	bic.w	r5, r5, #3
 80081ce:	3508      	adds	r5, #8
 80081d0:	2d0c      	cmp	r5, #12
 80081d2:	bf38      	it	cc
 80081d4:	250c      	movcc	r5, #12
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	4607      	mov	r7, r0
 80081da:	db01      	blt.n	80081e0 <_malloc_r+0x1c>
 80081dc:	42a9      	cmp	r1, r5
 80081de:	d905      	bls.n	80081ec <_malloc_r+0x28>
 80081e0:	230c      	movs	r3, #12
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	2600      	movs	r6, #0
 80081e6:	4630      	mov	r0, r6
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ec:	4e2e      	ldr	r6, [pc, #184]	; (80082a8 <_malloc_r+0xe4>)
 80081ee:	f000 fc3d 	bl	8008a6c <__malloc_lock>
 80081f2:	6833      	ldr	r3, [r6, #0]
 80081f4:	461c      	mov	r4, r3
 80081f6:	bb34      	cbnz	r4, 8008246 <_malloc_r+0x82>
 80081f8:	4629      	mov	r1, r5
 80081fa:	4638      	mov	r0, r7
 80081fc:	f7ff ffc2 	bl	8008184 <sbrk_aligned>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	4604      	mov	r4, r0
 8008204:	d14d      	bne.n	80082a2 <_malloc_r+0xde>
 8008206:	6834      	ldr	r4, [r6, #0]
 8008208:	4626      	mov	r6, r4
 800820a:	2e00      	cmp	r6, #0
 800820c:	d140      	bne.n	8008290 <_malloc_r+0xcc>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	4631      	mov	r1, r6
 8008212:	4638      	mov	r0, r7
 8008214:	eb04 0803 	add.w	r8, r4, r3
 8008218:	f000 fb7e 	bl	8008918 <_sbrk_r>
 800821c:	4580      	cmp	r8, r0
 800821e:	d13a      	bne.n	8008296 <_malloc_r+0xd2>
 8008220:	6821      	ldr	r1, [r4, #0]
 8008222:	3503      	adds	r5, #3
 8008224:	1a6d      	subs	r5, r5, r1
 8008226:	f025 0503 	bic.w	r5, r5, #3
 800822a:	3508      	adds	r5, #8
 800822c:	2d0c      	cmp	r5, #12
 800822e:	bf38      	it	cc
 8008230:	250c      	movcc	r5, #12
 8008232:	4629      	mov	r1, r5
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff ffa5 	bl	8008184 <sbrk_aligned>
 800823a:	3001      	adds	r0, #1
 800823c:	d02b      	beq.n	8008296 <_malloc_r+0xd2>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	442b      	add	r3, r5
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	e00e      	b.n	8008264 <_malloc_r+0xa0>
 8008246:	6822      	ldr	r2, [r4, #0]
 8008248:	1b52      	subs	r2, r2, r5
 800824a:	d41e      	bmi.n	800828a <_malloc_r+0xc6>
 800824c:	2a0b      	cmp	r2, #11
 800824e:	d916      	bls.n	800827e <_malloc_r+0xba>
 8008250:	1961      	adds	r1, r4, r5
 8008252:	42a3      	cmp	r3, r4
 8008254:	6025      	str	r5, [r4, #0]
 8008256:	bf18      	it	ne
 8008258:	6059      	strne	r1, [r3, #4]
 800825a:	6863      	ldr	r3, [r4, #4]
 800825c:	bf08      	it	eq
 800825e:	6031      	streq	r1, [r6, #0]
 8008260:	5162      	str	r2, [r4, r5]
 8008262:	604b      	str	r3, [r1, #4]
 8008264:	4638      	mov	r0, r7
 8008266:	f104 060b 	add.w	r6, r4, #11
 800826a:	f000 fc05 	bl	8008a78 <__malloc_unlock>
 800826e:	f026 0607 	bic.w	r6, r6, #7
 8008272:	1d23      	adds	r3, r4, #4
 8008274:	1af2      	subs	r2, r6, r3
 8008276:	d0b6      	beq.n	80081e6 <_malloc_r+0x22>
 8008278:	1b9b      	subs	r3, r3, r6
 800827a:	50a3      	str	r3, [r4, r2]
 800827c:	e7b3      	b.n	80081e6 <_malloc_r+0x22>
 800827e:	6862      	ldr	r2, [r4, #4]
 8008280:	42a3      	cmp	r3, r4
 8008282:	bf0c      	ite	eq
 8008284:	6032      	streq	r2, [r6, #0]
 8008286:	605a      	strne	r2, [r3, #4]
 8008288:	e7ec      	b.n	8008264 <_malloc_r+0xa0>
 800828a:	4623      	mov	r3, r4
 800828c:	6864      	ldr	r4, [r4, #4]
 800828e:	e7b2      	b.n	80081f6 <_malloc_r+0x32>
 8008290:	4634      	mov	r4, r6
 8008292:	6876      	ldr	r6, [r6, #4]
 8008294:	e7b9      	b.n	800820a <_malloc_r+0x46>
 8008296:	230c      	movs	r3, #12
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	4638      	mov	r0, r7
 800829c:	f000 fbec 	bl	8008a78 <__malloc_unlock>
 80082a0:	e7a1      	b.n	80081e6 <_malloc_r+0x22>
 80082a2:	6025      	str	r5, [r4, #0]
 80082a4:	e7de      	b.n	8008264 <_malloc_r+0xa0>
 80082a6:	bf00      	nop
 80082a8:	20000e2c 	.word	0x20000e2c

080082ac <__sfputc_r>:
 80082ac:	6893      	ldr	r3, [r2, #8]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	b410      	push	{r4}
 80082b4:	6093      	str	r3, [r2, #8]
 80082b6:	da08      	bge.n	80082ca <__sfputc_r+0x1e>
 80082b8:	6994      	ldr	r4, [r2, #24]
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	db01      	blt.n	80082c2 <__sfputc_r+0x16>
 80082be:	290a      	cmp	r1, #10
 80082c0:	d103      	bne.n	80082ca <__sfputc_r+0x1e>
 80082c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c6:	f7ff bc31 	b.w	8007b2c <__swbuf_r>
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	1c58      	adds	r0, r3, #1
 80082ce:	6010      	str	r0, [r2, #0]
 80082d0:	7019      	strb	r1, [r3, #0]
 80082d2:	4608      	mov	r0, r1
 80082d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d8:	4770      	bx	lr

080082da <__sfputs_r>:
 80082da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082dc:	4606      	mov	r6, r0
 80082de:	460f      	mov	r7, r1
 80082e0:	4614      	mov	r4, r2
 80082e2:	18d5      	adds	r5, r2, r3
 80082e4:	42ac      	cmp	r4, r5
 80082e6:	d101      	bne.n	80082ec <__sfputs_r+0x12>
 80082e8:	2000      	movs	r0, #0
 80082ea:	e007      	b.n	80082fc <__sfputs_r+0x22>
 80082ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f0:	463a      	mov	r2, r7
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7ff ffda 	bl	80082ac <__sfputc_r>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d1f3      	bne.n	80082e4 <__sfputs_r+0xa>
 80082fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008300 <_vfiprintf_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	460d      	mov	r5, r1
 8008306:	b09d      	sub	sp, #116	; 0x74
 8008308:	4614      	mov	r4, r2
 800830a:	4698      	mov	r8, r3
 800830c:	4606      	mov	r6, r0
 800830e:	b118      	cbz	r0, 8008318 <_vfiprintf_r+0x18>
 8008310:	6983      	ldr	r3, [r0, #24]
 8008312:	b90b      	cbnz	r3, 8008318 <_vfiprintf_r+0x18>
 8008314:	f7ff fde4 	bl	8007ee0 <__sinit>
 8008318:	4b89      	ldr	r3, [pc, #548]	; (8008540 <_vfiprintf_r+0x240>)
 800831a:	429d      	cmp	r5, r3
 800831c:	d11b      	bne.n	8008356 <_vfiprintf_r+0x56>
 800831e:	6875      	ldr	r5, [r6, #4]
 8008320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008322:	07d9      	lsls	r1, r3, #31
 8008324:	d405      	bmi.n	8008332 <_vfiprintf_r+0x32>
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	059a      	lsls	r2, r3, #22
 800832a:	d402      	bmi.n	8008332 <_vfiprintf_r+0x32>
 800832c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800832e:	f7ff fe75 	bl	800801c <__retarget_lock_acquire_recursive>
 8008332:	89ab      	ldrh	r3, [r5, #12]
 8008334:	071b      	lsls	r3, r3, #28
 8008336:	d501      	bpl.n	800833c <_vfiprintf_r+0x3c>
 8008338:	692b      	ldr	r3, [r5, #16]
 800833a:	b9eb      	cbnz	r3, 8008378 <_vfiprintf_r+0x78>
 800833c:	4629      	mov	r1, r5
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff fc46 	bl	8007bd0 <__swsetup_r>
 8008344:	b1c0      	cbz	r0, 8008378 <_vfiprintf_r+0x78>
 8008346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008348:	07dc      	lsls	r4, r3, #31
 800834a:	d50e      	bpl.n	800836a <_vfiprintf_r+0x6a>
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	b01d      	add	sp, #116	; 0x74
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	4b7b      	ldr	r3, [pc, #492]	; (8008544 <_vfiprintf_r+0x244>)
 8008358:	429d      	cmp	r5, r3
 800835a:	d101      	bne.n	8008360 <_vfiprintf_r+0x60>
 800835c:	68b5      	ldr	r5, [r6, #8]
 800835e:	e7df      	b.n	8008320 <_vfiprintf_r+0x20>
 8008360:	4b79      	ldr	r3, [pc, #484]	; (8008548 <_vfiprintf_r+0x248>)
 8008362:	429d      	cmp	r5, r3
 8008364:	bf08      	it	eq
 8008366:	68f5      	ldreq	r5, [r6, #12]
 8008368:	e7da      	b.n	8008320 <_vfiprintf_r+0x20>
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	0598      	lsls	r0, r3, #22
 800836e:	d4ed      	bmi.n	800834c <_vfiprintf_r+0x4c>
 8008370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008372:	f7ff fe54 	bl	800801e <__retarget_lock_release_recursive>
 8008376:	e7e9      	b.n	800834c <_vfiprintf_r+0x4c>
 8008378:	2300      	movs	r3, #0
 800837a:	9309      	str	r3, [sp, #36]	; 0x24
 800837c:	2320      	movs	r3, #32
 800837e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008382:	f8cd 800c 	str.w	r8, [sp, #12]
 8008386:	2330      	movs	r3, #48	; 0x30
 8008388:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800854c <_vfiprintf_r+0x24c>
 800838c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008390:	f04f 0901 	mov.w	r9, #1
 8008394:	4623      	mov	r3, r4
 8008396:	469a      	mov	sl, r3
 8008398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839c:	b10a      	cbz	r2, 80083a2 <_vfiprintf_r+0xa2>
 800839e:	2a25      	cmp	r2, #37	; 0x25
 80083a0:	d1f9      	bne.n	8008396 <_vfiprintf_r+0x96>
 80083a2:	ebba 0b04 	subs.w	fp, sl, r4
 80083a6:	d00b      	beq.n	80083c0 <_vfiprintf_r+0xc0>
 80083a8:	465b      	mov	r3, fp
 80083aa:	4622      	mov	r2, r4
 80083ac:	4629      	mov	r1, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ff93 	bl	80082da <__sfputs_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	f000 80aa 	beq.w	800850e <_vfiprintf_r+0x20e>
 80083ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083bc:	445a      	add	r2, fp
 80083be:	9209      	str	r2, [sp, #36]	; 0x24
 80083c0:	f89a 3000 	ldrb.w	r3, [sl]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80a2 	beq.w	800850e <_vfiprintf_r+0x20e>
 80083ca:	2300      	movs	r3, #0
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d4:	f10a 0a01 	add.w	sl, sl, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083e0:	931a      	str	r3, [sp, #104]	; 0x68
 80083e2:	4654      	mov	r4, sl
 80083e4:	2205      	movs	r2, #5
 80083e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ea:	4858      	ldr	r0, [pc, #352]	; (800854c <_vfiprintf_r+0x24c>)
 80083ec:	f7f7 fef8 	bl	80001e0 <memchr>
 80083f0:	9a04      	ldr	r2, [sp, #16]
 80083f2:	b9d8      	cbnz	r0, 800842c <_vfiprintf_r+0x12c>
 80083f4:	06d1      	lsls	r1, r2, #27
 80083f6:	bf44      	itt	mi
 80083f8:	2320      	movmi	r3, #32
 80083fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083fe:	0713      	lsls	r3, r2, #28
 8008400:	bf44      	itt	mi
 8008402:	232b      	movmi	r3, #43	; 0x2b
 8008404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008408:	f89a 3000 	ldrb.w	r3, [sl]
 800840c:	2b2a      	cmp	r3, #42	; 0x2a
 800840e:	d015      	beq.n	800843c <_vfiprintf_r+0x13c>
 8008410:	9a07      	ldr	r2, [sp, #28]
 8008412:	4654      	mov	r4, sl
 8008414:	2000      	movs	r0, #0
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	4621      	mov	r1, r4
 800841c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008420:	3b30      	subs	r3, #48	; 0x30
 8008422:	2b09      	cmp	r3, #9
 8008424:	d94e      	bls.n	80084c4 <_vfiprintf_r+0x1c4>
 8008426:	b1b0      	cbz	r0, 8008456 <_vfiprintf_r+0x156>
 8008428:	9207      	str	r2, [sp, #28]
 800842a:	e014      	b.n	8008456 <_vfiprintf_r+0x156>
 800842c:	eba0 0308 	sub.w	r3, r0, r8
 8008430:	fa09 f303 	lsl.w	r3, r9, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	46a2      	mov	sl, r4
 800843a:	e7d2      	b.n	80083e2 <_vfiprintf_r+0xe2>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1d19      	adds	r1, r3, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	9103      	str	r1, [sp, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	bfbb      	ittet	lt
 8008448:	425b      	neglt	r3, r3
 800844a:	f042 0202 	orrlt.w	r2, r2, #2
 800844e:	9307      	strge	r3, [sp, #28]
 8008450:	9307      	strlt	r3, [sp, #28]
 8008452:	bfb8      	it	lt
 8008454:	9204      	strlt	r2, [sp, #16]
 8008456:	7823      	ldrb	r3, [r4, #0]
 8008458:	2b2e      	cmp	r3, #46	; 0x2e
 800845a:	d10c      	bne.n	8008476 <_vfiprintf_r+0x176>
 800845c:	7863      	ldrb	r3, [r4, #1]
 800845e:	2b2a      	cmp	r3, #42	; 0x2a
 8008460:	d135      	bne.n	80084ce <_vfiprintf_r+0x1ce>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	9203      	str	r2, [sp, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	bfb8      	it	lt
 800846e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008472:	3402      	adds	r4, #2
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800855c <_vfiprintf_r+0x25c>
 800847a:	7821      	ldrb	r1, [r4, #0]
 800847c:	2203      	movs	r2, #3
 800847e:	4650      	mov	r0, sl
 8008480:	f7f7 feae 	bl	80001e0 <memchr>
 8008484:	b140      	cbz	r0, 8008498 <_vfiprintf_r+0x198>
 8008486:	2340      	movs	r3, #64	; 0x40
 8008488:	eba0 000a 	sub.w	r0, r0, sl
 800848c:	fa03 f000 	lsl.w	r0, r3, r0
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	4303      	orrs	r3, r0
 8008494:	3401      	adds	r4, #1
 8008496:	9304      	str	r3, [sp, #16]
 8008498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849c:	482c      	ldr	r0, [pc, #176]	; (8008550 <_vfiprintf_r+0x250>)
 800849e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084a2:	2206      	movs	r2, #6
 80084a4:	f7f7 fe9c 	bl	80001e0 <memchr>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d03f      	beq.n	800852c <_vfiprintf_r+0x22c>
 80084ac:	4b29      	ldr	r3, [pc, #164]	; (8008554 <_vfiprintf_r+0x254>)
 80084ae:	bb1b      	cbnz	r3, 80084f8 <_vfiprintf_r+0x1f8>
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	3307      	adds	r3, #7
 80084b4:	f023 0307 	bic.w	r3, r3, #7
 80084b8:	3308      	adds	r3, #8
 80084ba:	9303      	str	r3, [sp, #12]
 80084bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084be:	443b      	add	r3, r7
 80084c0:	9309      	str	r3, [sp, #36]	; 0x24
 80084c2:	e767      	b.n	8008394 <_vfiprintf_r+0x94>
 80084c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084c8:	460c      	mov	r4, r1
 80084ca:	2001      	movs	r0, #1
 80084cc:	e7a5      	b.n	800841a <_vfiprintf_r+0x11a>
 80084ce:	2300      	movs	r3, #0
 80084d0:	3401      	adds	r4, #1
 80084d2:	9305      	str	r3, [sp, #20]
 80084d4:	4619      	mov	r1, r3
 80084d6:	f04f 0c0a 	mov.w	ip, #10
 80084da:	4620      	mov	r0, r4
 80084dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084e0:	3a30      	subs	r2, #48	; 0x30
 80084e2:	2a09      	cmp	r2, #9
 80084e4:	d903      	bls.n	80084ee <_vfiprintf_r+0x1ee>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0c5      	beq.n	8008476 <_vfiprintf_r+0x176>
 80084ea:	9105      	str	r1, [sp, #20]
 80084ec:	e7c3      	b.n	8008476 <_vfiprintf_r+0x176>
 80084ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f2:	4604      	mov	r4, r0
 80084f4:	2301      	movs	r3, #1
 80084f6:	e7f0      	b.n	80084da <_vfiprintf_r+0x1da>
 80084f8:	ab03      	add	r3, sp, #12
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	462a      	mov	r2, r5
 80084fe:	4b16      	ldr	r3, [pc, #88]	; (8008558 <_vfiprintf_r+0x258>)
 8008500:	a904      	add	r1, sp, #16
 8008502:	4630      	mov	r0, r6
 8008504:	f3af 8000 	nop.w
 8008508:	4607      	mov	r7, r0
 800850a:	1c78      	adds	r0, r7, #1
 800850c:	d1d6      	bne.n	80084bc <_vfiprintf_r+0x1bc>
 800850e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008510:	07d9      	lsls	r1, r3, #31
 8008512:	d405      	bmi.n	8008520 <_vfiprintf_r+0x220>
 8008514:	89ab      	ldrh	r3, [r5, #12]
 8008516:	059a      	lsls	r2, r3, #22
 8008518:	d402      	bmi.n	8008520 <_vfiprintf_r+0x220>
 800851a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851c:	f7ff fd7f 	bl	800801e <__retarget_lock_release_recursive>
 8008520:	89ab      	ldrh	r3, [r5, #12]
 8008522:	065b      	lsls	r3, r3, #25
 8008524:	f53f af12 	bmi.w	800834c <_vfiprintf_r+0x4c>
 8008528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800852a:	e711      	b.n	8008350 <_vfiprintf_r+0x50>
 800852c:	ab03      	add	r3, sp, #12
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	462a      	mov	r2, r5
 8008532:	4b09      	ldr	r3, [pc, #36]	; (8008558 <_vfiprintf_r+0x258>)
 8008534:	a904      	add	r1, sp, #16
 8008536:	4630      	mov	r0, r6
 8008538:	f000 f880 	bl	800863c <_printf_i>
 800853c:	e7e4      	b.n	8008508 <_vfiprintf_r+0x208>
 800853e:	bf00      	nop
 8008540:	0801e3bc 	.word	0x0801e3bc
 8008544:	0801e3dc 	.word	0x0801e3dc
 8008548:	0801e39c 	.word	0x0801e39c
 800854c:	0801e3fc 	.word	0x0801e3fc
 8008550:	0801e406 	.word	0x0801e406
 8008554:	00000000 	.word	0x00000000
 8008558:	080082db 	.word	0x080082db
 800855c:	0801e402 	.word	0x0801e402

08008560 <_printf_common>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	4616      	mov	r6, r2
 8008566:	4699      	mov	r9, r3
 8008568:	688a      	ldr	r2, [r1, #8]
 800856a:	690b      	ldr	r3, [r1, #16]
 800856c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008570:	4293      	cmp	r3, r2
 8008572:	bfb8      	it	lt
 8008574:	4613      	movlt	r3, r2
 8008576:	6033      	str	r3, [r6, #0]
 8008578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800857c:	4607      	mov	r7, r0
 800857e:	460c      	mov	r4, r1
 8008580:	b10a      	cbz	r2, 8008586 <_printf_common+0x26>
 8008582:	3301      	adds	r3, #1
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	0699      	lsls	r1, r3, #26
 800858a:	bf42      	ittt	mi
 800858c:	6833      	ldrmi	r3, [r6, #0]
 800858e:	3302      	addmi	r3, #2
 8008590:	6033      	strmi	r3, [r6, #0]
 8008592:	6825      	ldr	r5, [r4, #0]
 8008594:	f015 0506 	ands.w	r5, r5, #6
 8008598:	d106      	bne.n	80085a8 <_printf_common+0x48>
 800859a:	f104 0a19 	add.w	sl, r4, #25
 800859e:	68e3      	ldr	r3, [r4, #12]
 80085a0:	6832      	ldr	r2, [r6, #0]
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	42ab      	cmp	r3, r5
 80085a6:	dc26      	bgt.n	80085f6 <_printf_common+0x96>
 80085a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085ac:	1e13      	subs	r3, r2, #0
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	bf18      	it	ne
 80085b2:	2301      	movne	r3, #1
 80085b4:	0692      	lsls	r2, r2, #26
 80085b6:	d42b      	bmi.n	8008610 <_printf_common+0xb0>
 80085b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085bc:	4649      	mov	r1, r9
 80085be:	4638      	mov	r0, r7
 80085c0:	47c0      	blx	r8
 80085c2:	3001      	adds	r0, #1
 80085c4:	d01e      	beq.n	8008604 <_printf_common+0xa4>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	68e5      	ldr	r5, [r4, #12]
 80085ca:	6832      	ldr	r2, [r6, #0]
 80085cc:	f003 0306 	and.w	r3, r3, #6
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	bf08      	it	eq
 80085d4:	1aad      	subeq	r5, r5, r2
 80085d6:	68a3      	ldr	r3, [r4, #8]
 80085d8:	6922      	ldr	r2, [r4, #16]
 80085da:	bf0c      	ite	eq
 80085dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e0:	2500      	movne	r5, #0
 80085e2:	4293      	cmp	r3, r2
 80085e4:	bfc4      	itt	gt
 80085e6:	1a9b      	subgt	r3, r3, r2
 80085e8:	18ed      	addgt	r5, r5, r3
 80085ea:	2600      	movs	r6, #0
 80085ec:	341a      	adds	r4, #26
 80085ee:	42b5      	cmp	r5, r6
 80085f0:	d11a      	bne.n	8008628 <_printf_common+0xc8>
 80085f2:	2000      	movs	r0, #0
 80085f4:	e008      	b.n	8008608 <_printf_common+0xa8>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4652      	mov	r2, sl
 80085fa:	4649      	mov	r1, r9
 80085fc:	4638      	mov	r0, r7
 80085fe:	47c0      	blx	r8
 8008600:	3001      	adds	r0, #1
 8008602:	d103      	bne.n	800860c <_printf_common+0xac>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	3501      	adds	r5, #1
 800860e:	e7c6      	b.n	800859e <_printf_common+0x3e>
 8008610:	18e1      	adds	r1, r4, r3
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	2030      	movs	r0, #48	; 0x30
 8008616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800861a:	4422      	add	r2, r4
 800861c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008624:	3302      	adds	r3, #2
 8008626:	e7c7      	b.n	80085b8 <_printf_common+0x58>
 8008628:	2301      	movs	r3, #1
 800862a:	4622      	mov	r2, r4
 800862c:	4649      	mov	r1, r9
 800862e:	4638      	mov	r0, r7
 8008630:	47c0      	blx	r8
 8008632:	3001      	adds	r0, #1
 8008634:	d0e6      	beq.n	8008604 <_printf_common+0xa4>
 8008636:	3601      	adds	r6, #1
 8008638:	e7d9      	b.n	80085ee <_printf_common+0x8e>
	...

0800863c <_printf_i>:
 800863c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	7e0f      	ldrb	r7, [r1, #24]
 8008642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008644:	2f78      	cmp	r7, #120	; 0x78
 8008646:	4691      	mov	r9, r2
 8008648:	4680      	mov	r8, r0
 800864a:	460c      	mov	r4, r1
 800864c:	469a      	mov	sl, r3
 800864e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008652:	d807      	bhi.n	8008664 <_printf_i+0x28>
 8008654:	2f62      	cmp	r7, #98	; 0x62
 8008656:	d80a      	bhi.n	800866e <_printf_i+0x32>
 8008658:	2f00      	cmp	r7, #0
 800865a:	f000 80d8 	beq.w	800880e <_printf_i+0x1d2>
 800865e:	2f58      	cmp	r7, #88	; 0x58
 8008660:	f000 80a3 	beq.w	80087aa <_printf_i+0x16e>
 8008664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800866c:	e03a      	b.n	80086e4 <_printf_i+0xa8>
 800866e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008672:	2b15      	cmp	r3, #21
 8008674:	d8f6      	bhi.n	8008664 <_printf_i+0x28>
 8008676:	a101      	add	r1, pc, #4	; (adr r1, 800867c <_printf_i+0x40>)
 8008678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800867c:	080086d5 	.word	0x080086d5
 8008680:	080086e9 	.word	0x080086e9
 8008684:	08008665 	.word	0x08008665
 8008688:	08008665 	.word	0x08008665
 800868c:	08008665 	.word	0x08008665
 8008690:	08008665 	.word	0x08008665
 8008694:	080086e9 	.word	0x080086e9
 8008698:	08008665 	.word	0x08008665
 800869c:	08008665 	.word	0x08008665
 80086a0:	08008665 	.word	0x08008665
 80086a4:	08008665 	.word	0x08008665
 80086a8:	080087f5 	.word	0x080087f5
 80086ac:	08008719 	.word	0x08008719
 80086b0:	080087d7 	.word	0x080087d7
 80086b4:	08008665 	.word	0x08008665
 80086b8:	08008665 	.word	0x08008665
 80086bc:	08008817 	.word	0x08008817
 80086c0:	08008665 	.word	0x08008665
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008665 	.word	0x08008665
 80086cc:	08008665 	.word	0x08008665
 80086d0:	080087df 	.word	0x080087df
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	602a      	str	r2, [r5, #0]
 80086dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0a3      	b.n	8008830 <_printf_i+0x1f4>
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	6829      	ldr	r1, [r5, #0]
 80086ec:	0606      	lsls	r6, r0, #24
 80086ee:	f101 0304 	add.w	r3, r1, #4
 80086f2:	d50a      	bpl.n	800870a <_printf_i+0xce>
 80086f4:	680e      	ldr	r6, [r1, #0]
 80086f6:	602b      	str	r3, [r5, #0]
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	da03      	bge.n	8008704 <_printf_i+0xc8>
 80086fc:	232d      	movs	r3, #45	; 0x2d
 80086fe:	4276      	negs	r6, r6
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008704:	485e      	ldr	r0, [pc, #376]	; (8008880 <_printf_i+0x244>)
 8008706:	230a      	movs	r3, #10
 8008708:	e019      	b.n	800873e <_printf_i+0x102>
 800870a:	680e      	ldr	r6, [r1, #0]
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008712:	bf18      	it	ne
 8008714:	b236      	sxthne	r6, r6
 8008716:	e7ef      	b.n	80086f8 <_printf_i+0xbc>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	6820      	ldr	r0, [r4, #0]
 800871c:	1d19      	adds	r1, r3, #4
 800871e:	6029      	str	r1, [r5, #0]
 8008720:	0601      	lsls	r1, r0, #24
 8008722:	d501      	bpl.n	8008728 <_printf_i+0xec>
 8008724:	681e      	ldr	r6, [r3, #0]
 8008726:	e002      	b.n	800872e <_printf_i+0xf2>
 8008728:	0646      	lsls	r6, r0, #25
 800872a:	d5fb      	bpl.n	8008724 <_printf_i+0xe8>
 800872c:	881e      	ldrh	r6, [r3, #0]
 800872e:	4854      	ldr	r0, [pc, #336]	; (8008880 <_printf_i+0x244>)
 8008730:	2f6f      	cmp	r7, #111	; 0x6f
 8008732:	bf0c      	ite	eq
 8008734:	2308      	moveq	r3, #8
 8008736:	230a      	movne	r3, #10
 8008738:	2100      	movs	r1, #0
 800873a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800873e:	6865      	ldr	r5, [r4, #4]
 8008740:	60a5      	str	r5, [r4, #8]
 8008742:	2d00      	cmp	r5, #0
 8008744:	bfa2      	ittt	ge
 8008746:	6821      	ldrge	r1, [r4, #0]
 8008748:	f021 0104 	bicge.w	r1, r1, #4
 800874c:	6021      	strge	r1, [r4, #0]
 800874e:	b90e      	cbnz	r6, 8008754 <_printf_i+0x118>
 8008750:	2d00      	cmp	r5, #0
 8008752:	d04d      	beq.n	80087f0 <_printf_i+0x1b4>
 8008754:	4615      	mov	r5, r2
 8008756:	fbb6 f1f3 	udiv	r1, r6, r3
 800875a:	fb03 6711 	mls	r7, r3, r1, r6
 800875e:	5dc7      	ldrb	r7, [r0, r7]
 8008760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008764:	4637      	mov	r7, r6
 8008766:	42bb      	cmp	r3, r7
 8008768:	460e      	mov	r6, r1
 800876a:	d9f4      	bls.n	8008756 <_printf_i+0x11a>
 800876c:	2b08      	cmp	r3, #8
 800876e:	d10b      	bne.n	8008788 <_printf_i+0x14c>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	07de      	lsls	r6, r3, #31
 8008774:	d508      	bpl.n	8008788 <_printf_i+0x14c>
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	6861      	ldr	r1, [r4, #4]
 800877a:	4299      	cmp	r1, r3
 800877c:	bfde      	ittt	le
 800877e:	2330      	movle	r3, #48	; 0x30
 8008780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008784:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008788:	1b52      	subs	r2, r2, r5
 800878a:	6122      	str	r2, [r4, #16]
 800878c:	f8cd a000 	str.w	sl, [sp]
 8008790:	464b      	mov	r3, r9
 8008792:	aa03      	add	r2, sp, #12
 8008794:	4621      	mov	r1, r4
 8008796:	4640      	mov	r0, r8
 8008798:	f7ff fee2 	bl	8008560 <_printf_common>
 800879c:	3001      	adds	r0, #1
 800879e:	d14c      	bne.n	800883a <_printf_i+0x1fe>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	b004      	add	sp, #16
 80087a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087aa:	4835      	ldr	r0, [pc, #212]	; (8008880 <_printf_i+0x244>)
 80087ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087b0:	6829      	ldr	r1, [r5, #0]
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087b8:	6029      	str	r1, [r5, #0]
 80087ba:	061d      	lsls	r5, r3, #24
 80087bc:	d514      	bpl.n	80087e8 <_printf_i+0x1ac>
 80087be:	07df      	lsls	r7, r3, #31
 80087c0:	bf44      	itt	mi
 80087c2:	f043 0320 	orrmi.w	r3, r3, #32
 80087c6:	6023      	strmi	r3, [r4, #0]
 80087c8:	b91e      	cbnz	r6, 80087d2 <_printf_i+0x196>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	f023 0320 	bic.w	r3, r3, #32
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	2310      	movs	r3, #16
 80087d4:	e7b0      	b.n	8008738 <_printf_i+0xfc>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	f043 0320 	orr.w	r3, r3, #32
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	2378      	movs	r3, #120	; 0x78
 80087e0:	4828      	ldr	r0, [pc, #160]	; (8008884 <_printf_i+0x248>)
 80087e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087e6:	e7e3      	b.n	80087b0 <_printf_i+0x174>
 80087e8:	0659      	lsls	r1, r3, #25
 80087ea:	bf48      	it	mi
 80087ec:	b2b6      	uxthmi	r6, r6
 80087ee:	e7e6      	b.n	80087be <_printf_i+0x182>
 80087f0:	4615      	mov	r5, r2
 80087f2:	e7bb      	b.n	800876c <_printf_i+0x130>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	6826      	ldr	r6, [r4, #0]
 80087f8:	6961      	ldr	r1, [r4, #20]
 80087fa:	1d18      	adds	r0, r3, #4
 80087fc:	6028      	str	r0, [r5, #0]
 80087fe:	0635      	lsls	r5, r6, #24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	d501      	bpl.n	8008808 <_printf_i+0x1cc>
 8008804:	6019      	str	r1, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0x1d2>
 8008808:	0670      	lsls	r0, r6, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0x1c8>
 800880c:	8019      	strh	r1, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	4615      	mov	r5, r2
 8008814:	e7ba      	b.n	800878c <_printf_i+0x150>
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	602a      	str	r2, [r5, #0]
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	2100      	movs	r1, #0
 8008822:	4628      	mov	r0, r5
 8008824:	f7f7 fcdc 	bl	80001e0 <memchr>
 8008828:	b108      	cbz	r0, 800882e <_printf_i+0x1f2>
 800882a:	1b40      	subs	r0, r0, r5
 800882c:	6060      	str	r0, [r4, #4]
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	2300      	movs	r3, #0
 8008834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008838:	e7a8      	b.n	800878c <_printf_i+0x150>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	462a      	mov	r2, r5
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d0ab      	beq.n	80087a0 <_printf_i+0x164>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	d413      	bmi.n	8008876 <_printf_i+0x23a>
 800884e:	68e0      	ldr	r0, [r4, #12]
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	4298      	cmp	r0, r3
 8008854:	bfb8      	it	lt
 8008856:	4618      	movlt	r0, r3
 8008858:	e7a4      	b.n	80087a4 <_printf_i+0x168>
 800885a:	2301      	movs	r3, #1
 800885c:	4632      	mov	r2, r6
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d09b      	beq.n	80087a0 <_printf_i+0x164>
 8008868:	3501      	adds	r5, #1
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	9903      	ldr	r1, [sp, #12]
 800886e:	1a5b      	subs	r3, r3, r1
 8008870:	42ab      	cmp	r3, r5
 8008872:	dcf2      	bgt.n	800885a <_printf_i+0x21e>
 8008874:	e7eb      	b.n	800884e <_printf_i+0x212>
 8008876:	2500      	movs	r5, #0
 8008878:	f104 0619 	add.w	r6, r4, #25
 800887c:	e7f5      	b.n	800886a <_printf_i+0x22e>
 800887e:	bf00      	nop
 8008880:	0801e40d 	.word	0x0801e40d
 8008884:	0801e41e 	.word	0x0801e41e

08008888 <_putc_r>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	460d      	mov	r5, r1
 800888c:	4614      	mov	r4, r2
 800888e:	4606      	mov	r6, r0
 8008890:	b118      	cbz	r0, 800889a <_putc_r+0x12>
 8008892:	6983      	ldr	r3, [r0, #24]
 8008894:	b90b      	cbnz	r3, 800889a <_putc_r+0x12>
 8008896:	f7ff fb23 	bl	8007ee0 <__sinit>
 800889a:	4b1c      	ldr	r3, [pc, #112]	; (800890c <_putc_r+0x84>)
 800889c:	429c      	cmp	r4, r3
 800889e:	d124      	bne.n	80088ea <_putc_r+0x62>
 80088a0:	6874      	ldr	r4, [r6, #4]
 80088a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088a4:	07d8      	lsls	r0, r3, #31
 80088a6:	d405      	bmi.n	80088b4 <_putc_r+0x2c>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	0599      	lsls	r1, r3, #22
 80088ac:	d402      	bmi.n	80088b4 <_putc_r+0x2c>
 80088ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b0:	f7ff fbb4 	bl	800801c <__retarget_lock_acquire_recursive>
 80088b4:	68a3      	ldr	r3, [r4, #8]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	60a3      	str	r3, [r4, #8]
 80088bc:	da05      	bge.n	80088ca <_putc_r+0x42>
 80088be:	69a2      	ldr	r2, [r4, #24]
 80088c0:	4293      	cmp	r3, r2
 80088c2:	db1c      	blt.n	80088fe <_putc_r+0x76>
 80088c4:	b2eb      	uxtb	r3, r5
 80088c6:	2b0a      	cmp	r3, #10
 80088c8:	d019      	beq.n	80088fe <_putc_r+0x76>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	701d      	strb	r5, [r3, #0]
 80088d2:	b2ed      	uxtb	r5, r5
 80088d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088d6:	07da      	lsls	r2, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_putc_r+0x5e>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	059b      	lsls	r3, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_putc_r+0x5e>
 80088e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e2:	f7ff fb9c 	bl	800801e <__retarget_lock_release_recursive>
 80088e6:	4628      	mov	r0, r5
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <_putc_r+0x88>)
 80088ec:	429c      	cmp	r4, r3
 80088ee:	d101      	bne.n	80088f4 <_putc_r+0x6c>
 80088f0:	68b4      	ldr	r4, [r6, #8]
 80088f2:	e7d6      	b.n	80088a2 <_putc_r+0x1a>
 80088f4:	4b07      	ldr	r3, [pc, #28]	; (8008914 <_putc_r+0x8c>)
 80088f6:	429c      	cmp	r4, r3
 80088f8:	bf08      	it	eq
 80088fa:	68f4      	ldreq	r4, [r6, #12]
 80088fc:	e7d1      	b.n	80088a2 <_putc_r+0x1a>
 80088fe:	4629      	mov	r1, r5
 8008900:	4622      	mov	r2, r4
 8008902:	4630      	mov	r0, r6
 8008904:	f7ff f912 	bl	8007b2c <__swbuf_r>
 8008908:	4605      	mov	r5, r0
 800890a:	e7e3      	b.n	80088d4 <_putc_r+0x4c>
 800890c:	0801e3bc 	.word	0x0801e3bc
 8008910:	0801e3dc 	.word	0x0801e3dc
 8008914:	0801e39c 	.word	0x0801e39c

08008918 <_sbrk_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d06      	ldr	r5, [pc, #24]	; (8008934 <_sbrk_r+0x1c>)
 800891c:	2300      	movs	r3, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	f7f8 fa1c 	bl	8000d60 <_sbrk>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_sbrk_r+0x1a>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_sbrk_r+0x1a>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20000e34 	.word	0x20000e34

08008938 <__sread>:
 8008938:	b510      	push	{r4, lr}
 800893a:	460c      	mov	r4, r1
 800893c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008940:	f000 f8a0 	bl	8008a84 <_read_r>
 8008944:	2800      	cmp	r0, #0
 8008946:	bfab      	itete	ge
 8008948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800894a:	89a3      	ldrhlt	r3, [r4, #12]
 800894c:	181b      	addge	r3, r3, r0
 800894e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008952:	bfac      	ite	ge
 8008954:	6563      	strge	r3, [r4, #84]	; 0x54
 8008956:	81a3      	strhlt	r3, [r4, #12]
 8008958:	bd10      	pop	{r4, pc}

0800895a <__swrite>:
 800895a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895e:	461f      	mov	r7, r3
 8008960:	898b      	ldrh	r3, [r1, #12]
 8008962:	05db      	lsls	r3, r3, #23
 8008964:	4605      	mov	r5, r0
 8008966:	460c      	mov	r4, r1
 8008968:	4616      	mov	r6, r2
 800896a:	d505      	bpl.n	8008978 <__swrite+0x1e>
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	2302      	movs	r3, #2
 8008972:	2200      	movs	r2, #0
 8008974:	f000 f868 	bl	8008a48 <_lseek_r>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800897e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008982:	81a3      	strh	r3, [r4, #12]
 8008984:	4632      	mov	r2, r6
 8008986:	463b      	mov	r3, r7
 8008988:	4628      	mov	r0, r5
 800898a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800898e:	f000 b817 	b.w	80089c0 <_write_r>

08008992 <__sseek>:
 8008992:	b510      	push	{r4, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800899a:	f000 f855 	bl	8008a48 <_lseek_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	bf15      	itete	ne
 80089a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80089a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089ae:	81a3      	strheq	r3, [r4, #12]
 80089b0:	bf18      	it	ne
 80089b2:	81a3      	strhne	r3, [r4, #12]
 80089b4:	bd10      	pop	{r4, pc}

080089b6 <__sclose>:
 80089b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ba:	f000 b813 	b.w	80089e4 <_close_r>
	...

080089c0 <_write_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d07      	ldr	r5, [pc, #28]	; (80089e0 <_write_r+0x20>)
 80089c4:	4604      	mov	r4, r0
 80089c6:	4608      	mov	r0, r1
 80089c8:	4611      	mov	r1, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	602a      	str	r2, [r5, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f7f8 f975 	bl	8000cbe <_write>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_write_r+0x1e>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_write_r+0x1e>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	20000e34 	.word	0x20000e34

080089e4 <_close_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d06      	ldr	r5, [pc, #24]	; (8008a00 <_close_r+0x1c>)
 80089e8:	2300      	movs	r3, #0
 80089ea:	4604      	mov	r4, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	602b      	str	r3, [r5, #0]
 80089f0:	f7f8 f981 	bl	8000cf6 <_close>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_close_r+0x1a>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_close_r+0x1a>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	20000e34 	.word	0x20000e34

08008a04 <_fstat_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d07      	ldr	r5, [pc, #28]	; (8008a24 <_fstat_r+0x20>)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	f7f8 f97c 	bl	8000d0e <_fstat>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d102      	bne.n	8008a20 <_fstat_r+0x1c>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	b103      	cbz	r3, 8008a20 <_fstat_r+0x1c>
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
 8008a22:	bf00      	nop
 8008a24:	20000e34 	.word	0x20000e34

08008a28 <_isatty_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d06      	ldr	r5, [pc, #24]	; (8008a44 <_isatty_r+0x1c>)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	f7f8 f97b 	bl	8000d2e <_isatty>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_isatty_r+0x1a>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_isatty_r+0x1a>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	20000e34 	.word	0x20000e34

08008a48 <_lseek_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d07      	ldr	r5, [pc, #28]	; (8008a68 <_lseek_r+0x20>)
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4611      	mov	r1, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	602a      	str	r2, [r5, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f7f8 f974 	bl	8000d44 <_lseek>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_lseek_r+0x1e>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_lseek_r+0x1e>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	20000e34 	.word	0x20000e34

08008a6c <__malloc_lock>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <__malloc_lock+0x8>)
 8008a6e:	f7ff bad5 	b.w	800801c <__retarget_lock_acquire_recursive>
 8008a72:	bf00      	nop
 8008a74:	20000e28 	.word	0x20000e28

08008a78 <__malloc_unlock>:
 8008a78:	4801      	ldr	r0, [pc, #4]	; (8008a80 <__malloc_unlock+0x8>)
 8008a7a:	f7ff bad0 	b.w	800801e <__retarget_lock_release_recursive>
 8008a7e:	bf00      	nop
 8008a80:	20000e28 	.word	0x20000e28

08008a84 <_read_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d07      	ldr	r5, [pc, #28]	; (8008aa4 <_read_r+0x20>)
 8008a88:	4604      	mov	r4, r0
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	602a      	str	r2, [r5, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	f7f8 f8f6 	bl	8000c84 <_read>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_read_r+0x1e>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_read_r+0x1e>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	20000e34 	.word	0x20000e34

08008aa8 <_init>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr

08008ab4 <_fini>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	bf00      	nop
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr
